2016-09-03 13:57:38	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-03 13:57:38	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-03 13:57:38	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-03 13:57:38	--	Channel #scala: 398 nicks (0 ops, 0 voices, 398 normals)
2016-09-03 13:57:40	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-03 13:58:35	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 14:01:31	-->	Guest19 (~textual@c-76-97-202-41.hsd1.ga.comcast.net) has joined #scala
2016-09-03 14:03:14	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 260 seconds)
2016-09-03 14:03:20	-->	mszczygiel (~mszczygie@78.10.93.143) has joined #scala
2016-09-03 14:04:51	<--	plamb (~plamb@2601:1c1:c200:e8c1:14f2:70bd:6dc5:c97f) has quit (Remote host closed the connection)
2016-09-03 14:05:42	-->	asteve (~asteve@unaffiliated/kxsteve) has joined #scala
2016-09-03 14:06:30	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-03 14:07:06	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-03 14:09:49	<--	Big_G (Big_G@c.24.56.239.123.static.broadstripe.net) has quit (Read error: Connection reset by peer)
2016-09-03 14:11:13	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-03 14:15:47	-->	Yiota (~Yiota@24.114.68.180) has joined #scala
2016-09-03 14:17:28	<--	Muflo (muflo@gateway/shell/fnordserver.eu/x-injsbeyqjmtolajn) has quit (Quit: https://fnordserver.eu)
2016-09-03 14:23:11	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 14:24:41	<--	Yiota (~Yiota@24.114.68.180) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-03 14:28:03	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 264 seconds)
2016-09-03 14:32:29	<--	Velizar (~DEA7TH@unaffiliated/dea7th) has quit (Quit: Velizar)
2016-09-03 14:33:01	-->	constant (~root@freebsd/developer/variable) has joined #scala
2016-09-03 14:34:20	-->	xnavor (~xnavor@p5793A88C.dip0.t-ipconnect.de) has joined #scala
2016-09-03 14:35:58	<--	GrayArea (~GrayArea@cpc73846-dals21-2-0-cust384.20-2.cable.virginm.net) has quit (Ping timeout: 252 seconds)
2016-09-03 14:36:39	<--	asteve (~asteve@unaffiliated/kxsteve) has quit (Quit: .)
2016-09-03 14:42:16	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 244 seconds)
2016-09-03 14:43:28	<--	xnavor (~xnavor@p5793A88C.dip0.t-ipconnect.de) has quit (Quit: This computer has gone to sleep)
2016-09-03 14:47:43	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 14:49:27	-->	xnavor (~xnavor@p5793A88C.dip0.t-ipconnect.de) has joined #scala
2016-09-03 14:50:15	<--	augustin985 (~aborsu@ptr-2hj4tbq0lddrd3opd1qps9xof.ip6.access.telenet.be) has quit (Ping timeout: 264 seconds)
2016-09-03 14:50:20	<--	AzureStigma (~AzureStig@unaffiliated/azurestigma) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-03 14:52:08	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 250 seconds)
2016-09-03 14:54:12	<--	achauvin2_ (~achauvin@static-176-183-245-22.ncc.abo.bbox.fr) has quit (Ping timeout: 240 seconds)
2016-09-03 14:59:40	-->	hamid (~nithp@unaffiliated/hamid) has joined #scala
2016-09-03 14:59:55	-->	kembrek (~kembrek@2.218.246.19) has joined #scala
2016-09-03 15:02:35	<--	adolf_stalin (~adolf_sta@2600:8804:6000:283:780f:18c2:3e97:a673) has quit (Remote host closed the connection)
2016-09-03 15:07:43	-->	GrayArea (~GrayArea@cpc73846-dals21-2-0-cust384.20-2.cable.virginm.net) has joined #scala
2016-09-03 15:12:44	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-03 15:12:45	<--	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-03 15:13:32	-->	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-03 15:13:32	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-03 15:15:15	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-03 15:20:15	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2016-09-03 15:20:34	-->	Copperis (~Tadas@unaffiliated/varis) has joined #scala
2016-09-03 15:21:39	<--	mszczygiel (~mszczygie@78.10.93.143) has quit (Quit: Lost terminal)
2016-09-03 15:22:11	-->	foocraft (~foocraft@unaffiliated/foocraft) has joined #scala
2016-09-03 15:23:46	<--	foocraft (~foocraft@unaffiliated/foocraft) has quit (Client Quit)
2016-09-03 15:23:50	<--	clamstar (~rx-ident@162.243.230.189) has quit (Ping timeout: 240 seconds)
2016-09-03 15:24:05	-->	foocraft (~foocraft@unaffiliated/foocraft) has joined #scala
2016-09-03 15:24:27	-->	jackweirdy (~jackweird@cpc27-stre5-2-0-cust239.1-1.cable.virginm.net) has joined #scala
2016-09-03 15:25:15	-->	adolf_stalin (~adolf_sta@wsip-98-191-227-66.tu.ok.cox.net) has joined #scala
2016-09-03 15:26:18	<--	OOPMan (~OOPMan@154.66.249.84) has quit (Quit: Konversation terminated!)
2016-09-03 15:28:58	jackweirdy	I'm trying to build a scala-graph HyperEdge with known start and end nodes but arbitrary number of middle nodes. I've tried to Fold across the list of middle nodes but I'm having trouble getting the types to line up. Something like `types.foldLeft(start)(_ ~+> _) ~+> end` doesn't work because the type that fold expects to see returned is the type of start, rather than an edge. Is there either a scala-graph way to do
2016-09-03 15:28:58	jackweirdy	 this, or a variety of foldLeft which allows the type of the initial value to be different from all of the following ones?
2016-09-03 15:30:24	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-03 15:30:24	<--	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-03 15:32:24	-->	clamstar (~rx-ident@162.243.230.189) has joined #scala
2016-09-03 15:33:25	-->	Rawriful (~Rawriful@host-92-20-15-64.as13285.net) has joined #scala
2016-09-03 15:33:46	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 265 seconds)
2016-09-03 15:33:51	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-03 15:34:39	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 264 seconds)
2016-09-03 15:34:58	-->	Sasazuka (~Sasazuka@unaffiliated/sasazuka) has joined #scala
2016-09-03 15:35:20	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-03 15:36:06	-->	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-03 15:36:06	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-03 15:36:14	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-03 15:36:50	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 15:39:07	<--	xnavor (~xnavor@p5793A88C.dip0.t-ipconnect.de) has quit (Quit: This computer has gone to sleep)
2016-09-03 15:39:59	-->	acidjnk (~havenone@p5DC96E86.dip0.t-ipconnect.de) has joined #scala
2016-09-03 15:41:35	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 265 seconds)
2016-09-03 15:41:39	-->	lefou_ (~lefou@p5B034A53.dip0.t-ipconnect.de) has joined #scala
2016-09-03 15:48:11	-->	AdrianiOS (~adrianios@cpe-68-175-116-122.nyc.res.rr.com) has joined #scala
2016-09-03 15:49:05	jackweirdy	Ah, looks like my trouble was because I was using ~+> in the middle of the fold which adds the label at each point. Just doing ~> in the fold and then ~+> when I add the end node is what I needed 
2016-09-03 15:49:42	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 15:50:35	-->	[poe]jdk (~jdkendall@96.36.206.167) has joined #scala
2016-09-03 15:51:28	[poe]jdk	any suggestions for a book on reactive programming? Preferrably Scala or Javascript, I'm not quite on the level for Haskell yet (but if there's nothing comparable I can deal with Haskell)
2016-09-03 15:51:42	[poe]jdk	functional reactive programming, I mean.*
2016-09-03 15:53:11	<--	AdrianiOS (~adrianios@cpe-68-175-116-122.nyc.res.rr.com) has quit (Ping timeout: 265 seconds)
2016-09-03 15:54:04	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 252 seconds)
2016-09-03 15:56:58	<--	eklavya (~eklavya@117.204.250.179) has quit (Remote host closed the connection)
2016-09-03 15:59:21	<--	adolf_stalin (~adolf_sta@wsip-98-191-227-66.tu.ok.cox.net) has quit (Remote host closed the connection)
2016-09-03 16:01:26	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 16:01:35	-->	Big_G (Big_G@c.24.56.239.123.static.broadstripe.net) has joined #scala
2016-09-03 16:02:07	[poe]jdk	alternatively if there are any good free options to read online I'm game for that too.
2016-09-03 16:06:27	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 264 seconds)
2016-09-03 16:09:26	-->	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has joined #scala
2016-09-03 16:09:32	-->	nosceteipsum (~void@84-46-58-242.lsn7.wtnet.de) has joined #scala
2016-09-03 16:10:10	-->	Sord (~Sord@87-100-243-137.bb.dnainternet.fi) has joined #scala
2016-09-03 16:13:52	<--	jackweirdy (~jackweird@cpc27-stre5-2-0-cust239.1-1.cable.virginm.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-03 16:14:32	<--	constant (~root@freebsd/developer/variable) has quit (Quit: /dev/null is full)
2016-09-03 16:15:01	-->	constant (~root@freebsd/developer/variable) has joined #scala
2016-09-03 16:15:21	<--	constant (~root@freebsd/developer/variable) has quit (Client Quit)
2016-09-03 16:15:51	-->	constant (~root@freebsd/developer/variable) has joined #scala
2016-09-03 16:16:09	<--	constant (~root@freebsd/developer/variable) has quit (Client Quit)
2016-09-03 16:16:42	-->	constant (~root@freebsd/developer/variable) has joined #scala
2016-09-03 16:16:58	<--	constant (~root@freebsd/developer/variable) has quit (Client Quit)
2016-09-03 16:17:26	-->	constant (~root@freebsd/developer/variable) has joined #scala
2016-09-03 16:17:46	<--	constant (~root@freebsd/developer/variable) has quit (Client Quit)
2016-09-03 16:18:26	<--	allengeorge (~textual@cpe-74-73-18-87.nyc.res.rr.com) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-03 16:21:56	<--	foocraft (~foocraft@unaffiliated/foocraft) has quit (Quit: Leaving)
2016-09-03 16:21:58	-->	bmahe (~bruno@c-69-181-81-140.hsd1.ca.comcast.net) has joined #scala
2016-09-03 16:24:59	Sord	Hi... I am trying to getting started with IntelliJ IDEA with SBT.
2016-09-03 16:25:32	Sord	It seems to be able to get depedencies greatly but I have no idea how to create .jar package with idea plugin
2016-09-03 16:25:36	-->	adolf_stalin (~adolf_sta@ip70-185-196-164.ok.ok.cox.net) has joined #scala
2016-09-03 16:25:50	reactormonk	I'd just run package from the sbt command line, but that's me.
2016-09-03 16:25:58	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 16:26:39	Sord	reactormonk, I tried that too but I get null pointer exception from sbt
2016-09-03 16:27:27	Sord	plain new SBT project created with idea
2016-09-03 16:27:45	Sord	I putted "sbt" (or sbt --help) to terminal
2016-09-03 16:28:25	Sord	[info] Loading project definition from [PROJECT PATH]/project
2016-09-03 16:28:25	Sord	java.lang.NullPointerException
2016-09-03 16:28:25	Sord		at java.util.regex.Matcher.getTextLength(java.base@9-internal/Matcher.java:1747)
2016-09-03 16:28:49	Sord	wtf there is happening
2016-09-03 16:28:50	Sord	:D
2016-09-03 16:29:09	Sord	(working on ubuntu)
2016-09-03 16:30:39	-->	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has joined #scala
2016-09-03 16:30:58	-->	adelbertc (uid26183@gateway/web/irccloud.com/x-xwoyqazclwnhsgia) has joined #scala
2016-09-03 16:31:03	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 276 seconds)
2016-09-03 16:31:59	-->	JuanMiguel (~juanmi@155.red-81-39-33.dynamicip.rima-tde.net) has joined #scala
2016-09-03 16:32:59	OlegYch_	wild guess - your project name/path is fucked up
2016-09-03 16:35:33	OlegYch_	could you share the build definition?
2016-09-03 16:38:13	Sord	OlegYch_, technically path should be ok since working folder of terminal was project root already
2016-09-03 16:38:39	Sord	however there was one folder with space and after renaming I am getting difrent error
2016-09-03 16:40:05	Sord	now it is: error: error while loading package, Missing dependency 'object java.lang.Object in compiler mirror', required by /home/USERNAME/.sbt/boot/scala-2.10.4/lib/scala-library.jar(scala/package.class)
2016-09-03 16:41:10	OlegYch_	um dunno
2016-09-03 16:41:18	Sord	build.sbt include just: name := "sbttestA" version := "1.0" scalaVersion := "2.11.8"
2016-09-03 16:41:55	OlegYch_	might be something with your jvm setup
2016-09-03 16:41:58	Sord	good question is that is this going forward or backward...
2016-09-03 16:42:19	OlegYch_	delete project/target though just to be sure
2016-09-03 16:43:23	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-03 16:44:01	Sord	I deleted all the target folders and same result
2016-09-03 16:44:33	Sord	is that a good thing that my project is targeting to scala 2.11.8 but scala 2.10.4 is mentioned in sbt error?
2016-09-03 16:45:12	OlegYch_	yes that's ok
2016-09-03 16:45:23	OlegYch_	delete ~/.sbt ь
2016-09-03 16:45:26	OlegYch_	maybe
2016-09-03 16:46:43	OlegYch_	otherwise it seems like your jvm or sbt package is really borked
2016-09-03 16:46:52	OlegYch_	happens a lot to linux packages
2016-09-03 16:47:15	<--	kini (~kini@unaffiliated/kini) has quit (Quit: No Ping reply in 180 seconds.)
2016-09-03 16:47:26	OlegYch_	i'd advise to use oracle jvm and http://www.scala-sbt.org/0.13/docs/Manual-Installation.html
2016-09-03 16:50:29	OlegYch_	https://github.com/paulp/sbt-extras is also good
2016-09-03 16:54:35	Sord	OlegYch_, thanks for tips
2016-09-03 16:55:37	Sord	ok after installing oracle jvm its magically start working
2016-09-03 16:56:37	<--	Guest19 (~textual@c-76-97-202-41.hsd1.ga.comcast.net) has quit (Read error: Connection reset by peer)
2016-09-03 16:59:08	Sord	I am little bit out of my comfort zone here
2016-09-03 16:59:28	OlegYch_	yay
2016-09-03 16:59:33	 *	Sord is Windows .Net dev
2016-09-03 17:00:42	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-09-03 17:01:30	<--	OscarZ (~samoanbea@188.126.80.50) has quit (Read error: Connection reset by peer)
2016-09-03 17:01:45	OlegYch_	windoes is great
2016-09-03 17:01:59	OlegYch_	it doesn't have broken linux packages
2016-09-03 17:02:55	nullremains	well, this is a surprise: https://groups.google.com/forum/#!topic/scala-internals/JslA9u20mow
2016-09-03 17:02:58	-->	cotalinux (~cota@79.112.81.176) has joined #scala
2016-09-03 17:03:18	-->	Yiota (~Yiota@198-84-178-244.cpe.teksavvy.com) has joined #scala
2016-09-03 17:04:10	OlegYch_	sneaky
2016-09-03 17:05:02	nullremains	thought RC1 was going to be delayed due to the 20% slow down wrt to default methods
2016-09-03 17:05:14	<--	fancyfetus (4c452c85@gateway/web/freenode/ip.76.69.44.133) has quit (Ping timeout: 264 seconds)
2016-09-03 17:07:49	-->	pfurla (~textual@ool-2f12d419.dyn.optonline.net) has joined #scala
2016-09-03 17:11:42	-->	manyu4rime (~abhimanyu@120.89.76.108) has joined #scala
2016-09-03 17:12:28	<--	Caelum (rkitover@cachemiss.com) has quit (Ping timeout: 255 seconds)
2016-09-03 17:13:30	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-03 17:13:57	manyu4rime	japhar81 please provide me with mailing list of scala
2016-09-03 17:15:05	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 17:15:38	manyu4rime	aupiff please provide  easy bugs regarding scala
2016-09-03 17:19:04	<--	JuanMiguel (~juanmi@155.red-81-39-33.dynamicip.rima-tde.net) has quit (Quit: This computer has gone to sleep)
2016-09-03 17:19:12	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-09-03 17:19:50	-->	WalrusNaib (~WalrusNai@host86-160-117-214.range86-160.btcentralplus.com) has joined #scala
2016-09-03 17:21:27	<--	WalrusNaib (~WalrusNai@host86-160-117-214.range86-160.btcentralplus.com) has quit (Quit: Leaving)
2016-09-03 17:22:09	<--	Sasazuka (~Sasazuka@unaffiliated/sasazuka) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-03 17:23:11	<--	Yiota (~Yiota@198-84-178-244.cpe.teksavvy.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-03 17:23:59	<--	kembrek (~kembrek@2.218.246.19) has quit (Quit: leaving)
2016-09-03 17:25:01	<--	manyu4rime (~abhimanyu@120.89.76.108) has quit (Quit: Leaving)
2016-09-03 17:26:32	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-03 17:27:56	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 17:28:39	-->	Yiota (~Yiota@198-84-178-244.cpe.teksavvy.com) has joined #scala
2016-09-03 17:29:08	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-03 17:31:22	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-03 17:31:56	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-03 17:32:03	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-09-03 17:36:37	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 265 seconds)
2016-09-03 17:39:41	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 17:40:34	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-03 17:43:16	<--	atomi (~atomi@71-83-179-177.dhcp.lnbh.ca.charter.com) has quit (Quit: brb)
2016-09-03 17:44:10	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 250 seconds)
2016-09-03 17:44:56	-->	atomi (~atomi@71-83-179-177.dhcp.lnbh.ca.charter.com) has joined #scala
2016-09-03 17:45:57	<--	Big_G (Big_G@c.24.56.239.123.static.broadstripe.net) has quit (Read error: Connection reset by peer)
2016-09-03 17:48:03	-->	AzureStigma (~AzureStig@unaffiliated/azurestigma) has joined #scala
2016-09-03 17:51:35	-->	paws_ (uid89121@gateway/web/irccloud.com/x-vautzhgseyfudijf) has joined #scala
2016-09-03 17:59:21	-->	nefilim (~Adium@c-71-202-233-36.hsd1.ca.comcast.net) has joined #scala
2016-09-03 18:04:41	<--	AzureStigma (~AzureStig@unaffiliated/azurestigma) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-03 18:05:32	<--	Yiota (~Yiota@198-84-178-244.cpe.teksavvy.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-03 18:11:58	<--	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has quit (Quit: Leaving.)
2016-09-03 18:16:29	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 18:17:22	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-03 18:18:18	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 276 seconds)
2016-09-03 18:18:58	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-03 18:19:14	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-03 18:20:02	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-03 18:20:35	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-03 18:21:33	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 276 seconds)
2016-09-03 18:21:45	<--	adolf_stalin (~adolf_sta@ip70-185-196-164.ok.ok.cox.net) has quit (Remote host closed the connection)
2016-09-03 18:25:34	-->	schos (55b33a35@gateway/web/freenode/ip.85.179.58.53) has joined #scala
2016-09-03 18:26:07	<--	omefire (~omefire@24.18.128.19) has quit (Read error: Connection reset by peer)
2016-09-03 18:28:04	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-03 18:29:49	<--	cotalinux (~cota@79.112.81.176) has quit (Read error: Connection reset by peer)
2016-09-03 18:30:13	-->	omefire (~omefire@24.18.128.19) has joined #scala
2016-09-03 18:30:40	schos	I'm trying to get parser combinators to work. Anyone can help make http://pastebin.com/JBkxS5g9 compile?
2016-09-03 18:32:56	OlegYch_	wild guess - def foo = bar.map(FooBar) | baz.map(FooBaz)
2016-09-03 18:34:47	schos	def foo = bar.map(_.asInstanceOf[Foo]) | baz.map(_.asInstanceOf[Foo]) works
2016-09-03 18:35:16	schos	kinda weird behaviour though
2016-09-03 18:36:30	schos	it compiles, but it cannot be cast
2016-09-03 18:36:31	OlegYch_	um i doubt that works
2016-09-03 18:36:36	OlegYch_	exactly
2016-09-03 18:37:19	-->	Caelum (rkitover@cachemiss.com) has joined #scala
2016-09-03 18:37:59	<--	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has quit (Ping timeout: 260 seconds)
2016-09-03 18:38:08	<--	firstdayonthejob (~firstdayo@cpc99346-croy26-2-0-cust153.19-2.cable.virginm.net) has quit (Ping timeout: 250 seconds)
2016-09-03 18:38:14	schos	yours just say "not found: value Foo" :/
2016-09-03 18:39:53	schos	okay
2016-09-03 18:40:06	schos	dunno why, but FooBar and FooBaz as regular classes works
2016-09-03 18:41:05	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 18:44:52	-->	marrrk (~marrrk@ip5f5af7de.dynamic.kabel-deutschland.de) has joined #scala
2016-09-03 18:46:15	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 276 seconds)
2016-09-03 18:46:44	<--	Caelum (rkitover@cachemiss.com) has quit (Ping timeout: 258 seconds)
2016-09-03 18:48:12	schos	I'm either not using them right or they are a mess to use
2016-09-03 18:48:27	schos	scala parser combinators that is
2016-09-03 18:49:56	dibblego	The scala parser combinator library is very poorly designed. It's not just you.
2016-09-03 18:50:31	-->	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has joined #scala
2016-09-03 18:53:03	<--	omefire (~omefire@24.18.128.19) has quit (Read error: Connection reset by peer)
2016-09-03 18:54:42	-->	Muflo (muflo@gateway/shell/fnordserver.eu/x-tmiysvqkrmminhsj) has joined #scala
2016-09-03 18:57:20	<--	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has quit (Ping timeout: 244 seconds)
2016-09-03 18:57:49	<--	Dinduks (~dinduks@193.183.99.37) has quit (Ping timeout: 265 seconds)
2016-09-03 18:58:17	OlegYch_	it is just a collection of pure functions though
2016-09-03 18:59:38	-->	Dinduks (~dinduks@193.183.99.37) has joined #scala
2016-09-03 19:01:38	<--	pfurla (~textual@ool-2f12d419.dyn.optonline.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-03 19:01:42	-->	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has joined #scala
2016-09-03 19:03:11	-->	allengeorge (~textual@cpe-74-73-18-87.nyc.res.rr.com) has joined #scala
2016-09-03 19:03:18	-->	pfurla (~textual@ool-2f12d419.dyn.optonline.net) has joined #scala
2016-09-03 19:05:26	<--	xacktm (xacktm@unaffiliated/xacktm) has quit (Ping timeout: 250 seconds)
2016-09-03 19:05:36	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 19:06:34	<--	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has quit (Ping timeout: 260 seconds)
2016-09-03 19:08:44	dibblego	that "try to blend with OO", they are quite a pain to get working, and when you eventually do, the performance is rubbish
2016-09-03 19:09:00	-->	veegee (~veegee@104.234.246.59) has joined #scala
2016-09-03 19:09:30	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-03 19:09:50	-->	RainFlying (~RainFlyin@101.87.159.213) has joined #scala
2016-09-03 19:10:18	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 276 seconds)
2016-09-03 19:10:58	<--	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has quit (Quit: nomicflux)
2016-09-03 19:11:40	-->	Caelum (rkitover@cachemiss.com) has joined #scala
2016-09-03 19:13:02	dibblego	here is the original argonaut, which uses scala parser combinators for prototyping, https://github.com/argonaut-io/argonaut/blob/b6142542f463fa060a325c0e9ab1d3551337e27f/src/main/scala/com/ephox/argonaut/JsonParser.scala
2016-09-03 19:13:54	<--	marrrk (~marrrk@ip5f5af7de.dynamic.kabel-deutschland.de) has quit (Quit: marrrk)
2016-09-03 19:14:37	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-03 19:14:38	<--	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-03 19:15:31	-->	xacktm (xacktm@unaffiliated/xacktm) has joined #scala
2016-09-03 19:17:49	-->	predator117 (~predator1@p4FDC0BBD.dip0.t-ipconnect.de) has joined #scala
2016-09-03 19:17:59	--	Obeliks is now known as oxc
2016-09-03 19:18:14	<--	veegee (~veegee@104.234.246.59) has quit (Quit: veegee)
2016-09-03 19:18:27	-->	markus1199 (~markus118@p4FDC0BBD.dip0.t-ipconnect.de) has joined #scala
2016-09-03 19:18:42	-->	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has joined #scala
2016-09-03 19:19:10	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-03 19:20:15	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 264 seconds)
2016-09-03 19:20:44	<--	predator217 (~predator1@p4FDC19E0.dip0.t-ipconnect.de) has quit (Ping timeout: 244 seconds)
2016-09-03 19:21:31	-->	lambda-11235 (~lambda-11@184.63.207.209) has joined #scala
2016-09-03 19:22:00	<--	markus1189 (~markus118@p4FDC19E0.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2016-09-03 19:23:50	<--	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has quit (Ping timeout: 250 seconds)
2016-09-03 19:26:06	-->	JuanMiguel (~juanmi@155.red-81-39-33.dynamicip.rima-tde.net) has joined #scala
2016-09-03 19:26:19	-->	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has joined #scala
2016-09-03 19:28:36	-->	adolf_stalin (~adolf_sta@ip70-185-196-164.ok.ok.cox.net) has joined #scala
2016-09-03 19:30:13	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 19:31:04	<--	Caelum (rkitover@cachemiss.com) has quit (Ping timeout: 264 seconds)
2016-09-03 19:32:44	<--	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has quit (Ping timeout: 250 seconds)
2016-09-03 19:34:40	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 255 seconds)
2016-09-03 19:35:05	-->	asteve (~asteve@unaffiliated/kxsteve) has joined #scala
2016-09-03 19:37:35	<--	vili_ (~nick@2605:a000:ffc0:d8:5c8e:e37d:ec73:4299) has quit (Remote host closed the connection)
2016-09-03 19:40:53	-->	tag (~tag@li13-142.members.linode.com) has joined #scala
2016-09-03 19:42:47	<--	JuanMiguel (~juanmi@155.red-81-39-33.dynamicip.rima-tde.net) has quit (Quit: Saliendo)
2016-09-03 19:47:59	-->	plamb_ (~plamb@2601:1c1:c200:e8c1:cda9:77ab:311d:fa3d) has joined #scala
2016-09-03 19:48:17	-->	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has joined #scala
2016-09-03 19:49:04	-->	plamb__ (~plamb@2601:1c1:c200:e8c1:cdfd:5cc9:c390:a95b) has joined #scala
2016-09-03 19:49:46	-->	AdrianiOS (~adrianios@cpe-68-175-116-122.nyc.res.rr.com) has joined #scala
2016-09-03 19:50:00	-->	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has joined #scala
2016-09-03 19:50:45	<--	plamb__ (~plamb@2601:1c1:c200:e8c1:cdfd:5cc9:c390:a95b) has quit (Remote host closed the connection)
2016-09-03 19:52:14	<--	plamb_ (~plamb@2601:1c1:c200:e8c1:cda9:77ab:311d:fa3d) has quit (Ping timeout: 250 seconds)
2016-09-03 19:54:09	<--	asteve (~asteve@unaffiliated/kxsteve) has quit (Quit: .)
2016-09-03 19:54:27	<--	AdrianiOS (~adrianios@cpe-68-175-116-122.nyc.res.rr.com) has quit (Ping timeout: 264 seconds)
2016-09-03 19:54:58	<--	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has quit (Ping timeout: 258 seconds)
2016-09-03 19:54:58	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-03 19:55:12	<--	paws_ (uid89121@gateway/web/irccloud.com/x-vautzhgseyfudijf) has quit (Quit: Connection closed for inactivity)
2016-09-03 19:58:24	-->	Caelum (rkitover@cachemiss.com) has joined #scala
2016-09-03 19:58:55	<--	offbored (~offbored@c-73-84-220-223.hsd1.fl.comcast.net) has quit (Quit: Konversation terminated!)
2016-09-03 20:01:20	<--	Caelum (rkitover@cachemiss.com) has quit (Client Quit)
2016-09-03 20:02:22	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-03 20:02:55	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-03 20:03:59	<--	adolf_stalin (~adolf_sta@ip70-185-196-164.ok.ok.cox.net) has quit (Remote host closed the connection)
2016-09-03 20:06:32	-->	captainsplash (~captainsp@149.149.2.201) has joined #scala
2016-09-03 20:07:00	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 20:07:04	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-03 20:08:51	<--	captainsplash (~captainsp@149.149.2.201) has quit (Quit: Leaving)
2016-09-03 20:12:03	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 276 seconds)
2016-09-03 20:13:06	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-03 20:15:39	-->	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has joined #scala
2016-09-03 20:17:31	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-03 20:17:47	<--	RainFlying (~RainFlyin@101.87.159.213) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-03 20:17:58	<--	nosceteipsum (~void@84-46-58-242.lsn7.wtnet.de) has quit (Ping timeout: 265 seconds)
2016-09-03 20:20:38	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-03 20:22:26	-->	CaptainSplash (~captainsp@149.149.2.201) has joined #scala
2016-09-03 20:25:42	<--	knix (~jcm@unaffiliated/knix) has quit (Ping timeout: 276 seconds)
2016-09-03 20:26:48	-->	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has joined #scala
2016-09-03 20:29:09	-->	knix (~jcm@unaffiliated/knix) has joined #scala
2016-09-03 20:29:22	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-09-03 20:31:33	-->	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-03 20:31:36	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 20:32:50	-->	RainFlying (~RainFlyin@101.87.159.213) has joined #scala
2016-09-03 20:35:59	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 258 seconds)
2016-09-03 20:48:44	<--	schos (55b33a35@gateway/web/freenode/ip.85.179.58.53) has quit (Quit: Page closed)
2016-09-03 20:57:27	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 258 seconds)
2016-09-03 20:58:46	<--	bluezone (uid104970@gateway/web/irccloud.com/x-escghkhceojgxcwp) has quit (Quit: Connection closed for inactivity)
2016-09-03 20:59:49	-->	Sasazuka (~Sasazuka@unaffiliated/sasazuka) has joined #scala
2016-09-03 21:02:25	<--	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has quit (Ping timeout: 255 seconds)
2016-09-03 21:02:59	<--	Sasazuka (~Sasazuka@unaffiliated/sasazuka) has quit (Client Quit)
2016-09-03 21:04:49	-->	adolf_stalin (~adolf_sta@ip70-185-196-164.ok.ok.cox.net) has joined #scala
2016-09-03 21:08:27	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 21:08:32	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-03 21:09:05	<--	adolf_stalin (~adolf_sta@ip70-185-196-164.ok.ok.cox.net) has quit (Ping timeout: 244 seconds)
2016-09-03 21:09:08	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-03 21:09:28	<--	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-03 21:11:07	-->	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has joined #scala
2016-09-03 21:12:33	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-09-03 21:13:37	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-03 21:18:25	-->	constant (~root@freebsd/developer/variable) has joined #scala
2016-09-03 21:25:05	--	constant is now known as variable
2016-09-03 21:29:30	<--	nullremains (~godenji@96.127.214.232) has quit (Ping timeout: 250 seconds)
2016-09-03 21:29:56	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-09-03 21:31:30	SJr	Um, question: "Vector is a collection type (introduced in Scala 2.8) that addresses the inefficiency for random access on lists. Vectors allow accessing any element of the list in effectively constant time".  (http://docs.scala-lang.org/overviews/collections/concrete-immutable-collection-classes.html#vectors) 
2016-09-03 21:32:52	SJr	From the descripting it gives, where it is a tree, storing up to 32 elements, and then having multiple depths, so that 2^5 elements is 1 access, 2^10 is 2 accesses, 2^15 3,  2^20 = 4... "So for all vectors of reasonable size, an element selection involves up to 5 primitive array selections. This is what we meant when we wrote that element access is effectively constant time."
2016-09-03 21:33:03	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 21:33:07	SJr	Does "effectively constant time" mean "logarithmic" then?
2016-09-03 21:37:39	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 244 seconds)
2016-09-03 21:38:22	adelbertc	@SJr log32 or something like that, yeah
2016-09-03 21:38:22	lambdabot	Yeh scurvy dog...
2016-09-03 21:38:24	-->	omefire (~omefire@24.18.128.19) has joined #scala
2016-09-03 21:40:15	SJr	So when it says "Vectors allow accessing any element of the list in effectively constant time. Its a larger constant than for access to the head of a list or for reading an element of an array, but its a constant nonetheless" that would be incorrect.
2016-09-03 21:41:33	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-03 21:48:57	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-03 21:53:45	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 265 seconds)
2016-09-03 21:57:36	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 22:02:33	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 276 seconds)
2016-09-03 22:10:40	<--	eean (~quassel@amarok/developer/eean) has quit (Ping timeout: 250 seconds)
2016-09-03 22:11:09	-->	eean (~quassel@amarok/developer/eean) has joined #scala
2016-09-03 22:14:24	<--	acidjnk (~havenone@p5DC96E86.dip0.t-ipconnect.de) has quit (Ping timeout: 260 seconds)
2016-09-03 22:15:22	<--	hexagoxel (~hexagoxel@p4FCCCFD3.dip0.t-ipconnect.de) has quit (Ping timeout: 244 seconds)
2016-09-03 22:16:35	-->	hexagoxel (~hexagoxel@p200300798F093600021E33FFFE2231E9.dip0.t-ipconnect.de) has joined #scala
2016-09-03 22:20:25	-->	adolf_stalin (~adolf_sta@2600:8804:6000:283:39b3:7fcc:28a0:342f) has joined #scala
2016-09-03 22:22:10	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 22:24:45	<--	adolf_stalin (~adolf_sta@2600:8804:6000:283:39b3:7fcc:28a0:342f) has quit (Ping timeout: 250 seconds)
2016-09-03 22:26:12	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-09-03 22:30:23	<--	CaptainSplash (~captainsp@149.149.2.201) has quit (Remote host closed the connection)
2016-09-03 22:32:04	-->	lefou__ (~lefou@p5B086661.dip0.t-ipconnect.de) has joined #scala
2016-09-03 22:33:09	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-03 22:34:54	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 22:35:48	<--	lefou_ (~lefou@p5B034A53.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2016-09-03 22:39:27	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 264 seconds)
2016-09-03 22:44:41	<--	circ-user-iEC6C (~circuser-@gprs-inet-183-77.elisa.ee) has quit (Ping timeout: 250 seconds)
2016-09-03 22:50:41	<--	Rawriful (~Rawriful@host-92-20-15-64.as13285.net) has quit (Quit: WeeChat 1.3)
2016-09-03 22:50:59	<--	allengeorge (~textual@cpe-74-73-18-87.nyc.res.rr.com) has left #scala ("Textual IRC Client: www.textualapp.com")
2016-09-03 22:54:30	-->	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined #scala
2016-09-03 22:58:37	-->	mizu_no_oto (~textual@98.159.210.253) has joined #scala
2016-09-03 22:59:02	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 23:01:07	-->	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has joined #scala
2016-09-03 23:04:18	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 276 seconds)
2016-09-03 23:08:52	<--	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has quit (Ping timeout: 255 seconds)
2016-09-03 23:14:29	-->	nafg (~naftoli@96.57.169.90) has joined #scala
2016-09-03 23:19:27	dibblego	you're right it's not constant-time
2016-09-03 23:21:11	-->	adolf_stalin (~adolf_sta@2600:8804:6000:283:21fe:743b:3d9:7bfc) has joined #scala
2016-09-03 23:23:34	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 23:25:51	<--	adolf_stalin (~adolf_sta@2600:8804:6000:283:21fe:743b:3d9:7bfc) has quit (Ping timeout: 250 seconds)
2016-09-03 23:28:01	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 250 seconds)
2016-09-03 23:31:28	[poe]jdk	any suggestions for reading up on functional reactive programming? Books or free online materials? Would prefer javascript / Scala if possible, but not adverse to others
2016-09-03 23:37:47	<--	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-03 23:39:47	-->	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has joined #scala
2016-09-03 23:39:53	-->	hamid_ (~nithp@unaffiliated/hamid) has joined #scala
2016-09-03 23:48:08	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-03 23:51:35	-->	AdrianiOS (~adrianios@cpe-68-175-116-122.nyc.res.rr.com) has joined #scala
2016-09-03 23:52:12	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-09-03 23:55:11	<--	mizu_no_oto (~textual@98.159.210.253) has quit (Quit: Computer has gone to sleep.)
2016-09-03 23:55:23	<--	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has quit (Quit: nomicflux)
2016-09-03 23:56:03	<--	AdrianiOS (~adrianios@cpe-68-175-116-122.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-09-04 00:12:44	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 00:17:09	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 244 seconds)
2016-09-04 00:25:34	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 00:29:42	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 244 seconds)
2016-09-04 00:37:19	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 00:41:42	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 258 seconds)
2016-09-04 00:43:50	-->	rosten (~rosten@cpe-45-48-9-161.socal.res.rr.com) has joined #scala
2016-09-04 00:44:58	<--	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has quit (Quit: Leaving.)
2016-09-04 00:48:01	<--	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-09-04 00:52:31	-->	eklavya (~eklavya@103.69.50.58) has joined #scala
2016-09-04 00:54:48	<--	GrayArea (~GrayArea@cpc73846-dals21-2-0-cust384.20-2.cable.virginm.net) has quit (Ping timeout: 276 seconds)
2016-09-04 00:58:36	-->	adolf_stalin (~adolf_sta@2600:8804:6000:283:e997:e0eb:8c4d:a19a) has joined #scala
2016-09-04 01:00:39	<--	beat (~beat@a89-154-83-119.cpe.netcabo.pt) has quit (Read error: Connection reset by peer)
2016-09-04 01:01:47	-->	allengeorge (~textual@cpe-74-73-18-87.nyc.res.rr.com) has joined #scala
2016-09-04 01:03:17	-->	beat (~beat@a89-154-83-119.cpe.netcabo.pt) has joined #scala
2016-09-04 01:04:58	<--	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-04 01:12:37	-->	vili_ (~nick@2605:a000:ffc0:d8:5c8e:e37d:ec73:4299) has joined #scala
2016-09-04 01:14:08	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 01:18:38	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 244 seconds)
2016-09-04 01:21:33	<--	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has quit (Ping timeout: 240 seconds)
2016-09-04 01:24:51	<--	erguven (uid171385@gateway/web/irccloud.com/x-ffwoyhesltjuovrm) has quit (Quit: Connection closed for inactivity)
2016-09-04 01:25:14	<--	eklavya (~eklavya@103.69.50.58) has quit (Remote host closed the connection)
2016-09-04 01:26:53	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 01:29:06	tpolecat	SJr: it's constant time in that its upper bound is log32(Int.MaxValue) which isn't very big. just call that 1 and sometimes you do better
2016-09-04 01:31:11	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 244 seconds)
2016-09-04 01:31:44	<--	nefilim (~Adium@c-71-202-233-36.hsd1.ca.comcast.net) has quit (Quit: Leaving.)
2016-09-04 01:34:30	SJr	I guess, I just don't see why you just wouldn't say "very fast" as opposed to spending a paragraph defining "effectively constant" which a book (functional programming in Scala), then drops the effectively and states that Vectors are constant time, which is just incorrect.
2016-09-04 01:35:32	<--	bmahe (~bruno@c-69-181-81-140.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2016-09-04 01:38:44	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 01:39:32	tpolecat	The argument is that the difference between O(1) and O(log32 n) where n is bounded isn't worth worrying about.
2016-09-04 01:39:55	tpolecat	You can compute the worst case and call it 1,
2016-09-04 01:40:46	<--	dolio (~dolio@haskell/developer/dolio) has quit (Quit: ZNC 1.6.3 - http://znc.in)
2016-09-04 01:43:13	-->	dolio (~dolio@haskell/developer/dolio) has joined #scala
2016-09-04 01:43:15	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 265 seconds)
2016-09-04 01:44:46	dibblego	embellishment is trendy
2016-09-04 01:46:09	<--	nafg (~naftoli@96.57.169.90) has quit (Ping timeout: 276 seconds)
2016-09-04 01:46:49	-->	eklavya (~eklavya@103.69.50.58) has joined #scala
2016-09-04 01:50:22	-->	bmahe (~bruno@2601:644:8102:98c0:226:b6ff:feee:3a31) has joined #scala
2016-09-04 01:51:21	<--	tag (~tag@li13-142.members.linode.com) has quit (Ping timeout: 276 seconds)
2016-09-04 01:53:35	--	irc: disconnected from server
2016-09-04 12:32:21	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-04 12:32:21	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-04 12:32:21	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-04 12:32:21	--	Channel #scala: 384 nicks (0 ops, 0 voices, 384 normals)
2016-09-04 12:32:21	***	Buffer Playback...
2016-09-04 12:32:21	jackweirdy	[15:28:58] I'm trying to build a scala-graph HyperEdge with known start and end nodes but arbitrary number of middle nodes. I've tried to Fold across the list of middle nodes but I'm having trouble getting the types to line up. Something like `types.foldLeft(start)(_ ~+> _) ~+> end` doesn't work because the type that fold expects to see returned is the type of start, rather than an edge. Is there either a scala-graph way to do
2016-09-04 12:32:21	jackweirdy	[15:28:58]  this, or a variety of foldLeft which allows the type of the initial value to be different from all of the following ones?
2016-09-04 12:32:21	jackweirdy	[15:49:05] Ah, looks like my trouble was because I was using ~+> in the middle of the fold which adds the label at each point. Just doing ~> in the fold and then ~+> when I add the end node is what I needed 
2016-09-04 12:32:21	[poe]jdk	[15:51:28] any suggestions for a book on reactive programming? Preferrably Scala or Javascript, I'm not quite on the level for Haskell yet (but if there's nothing comparable I can deal with Haskell)
2016-09-04 12:32:21	[poe]jdk	[15:51:42] functional reactive programming, I mean.*
2016-09-04 12:32:21	[poe]jdk	[16:02:07] alternatively if there are any good free options to read online I'm game for that too.
2016-09-04 12:32:21	Sord	[16:24:59] Hi... I am trying to getting started with IntelliJ IDEA with SBT.
2016-09-04 12:32:21	Sord	[16:25:32] It seems to be able to get depedencies greatly but I have no idea how to create .jar package with idea plugin
2016-09-04 12:32:21	reactormonk	[16:25:50] I'd just run package from the sbt command line, but that's me.
2016-09-04 12:32:21	Sord	[16:26:39] reactormonk, I tried that too but I get null pointer exception from sbt
2016-09-04 12:32:21	Sord	[16:27:27] plain new SBT project created with idea
2016-09-04 12:32:21	Sord	[16:27:45] I putted "sbt" (or sbt --help) to terminal
2016-09-04 12:32:21	Sord	[16:28:25] [info] Loading project definition from [PROJECT PATH]/project
2016-09-04 12:32:21	Sord	[16:28:25] java.lang.NullPointerException
2016-09-04 12:32:21	Sord	[16:28:25] 	at java.util.regex.Matcher.getTextLength(java.base@9-internal/Matcher.java:1747)
2016-09-04 12:32:21	Sord	[16:28:49] wtf there is happening
2016-09-04 12:32:21	Sord	[16:28:50] :D
2016-09-04 12:32:21	Sord	[16:29:09] (working on ubuntu)
2016-09-04 12:32:21	OlegYch_	[16:32:59] wild guess - your project name/path is fucked up
2016-09-04 12:32:21	OlegYch_	[16:35:33] could you share the build definition?
2016-09-04 12:32:21	Sord	[16:38:13] OlegYch_, technically path should be ok since working folder of terminal was project root already
2016-09-04 12:32:21	Sord	[16:38:39] however there was one folder with space and after renaming I am getting difrent error
2016-09-04 12:32:21	Sord	[16:40:05] now it is: error: error while loading package, Missing dependency 'object java.lang.Object in compiler mirror', required by /home/USERNAME/.sbt/boot/scala-2.10.4/lib/scala-library.jar(scala/package.class)
2016-09-04 12:32:21	OlegYch_	[16:41:10] um dunno
2016-09-04 12:32:21	Sord	[16:41:18] build.sbt include just: name := "sbttestA" version := "1.0" scalaVersion := "2.11.8"
2016-09-04 12:32:21	OlegYch_	[16:41:55] might be something with your jvm setup
2016-09-04 12:32:21	Sord	[16:41:58] good question is that is this going forward or backward...
2016-09-04 12:32:21	OlegYch_	[16:42:19] delete project/target though just to be sure
2016-09-04 12:32:21	Sord	[16:44:01] I deleted all the target folders and same result
2016-09-04 12:32:21	Sord	[16:44:33] is that a good thing that my project is targeting to scala 2.11.8 but scala 2.10.4 is mentioned in sbt error?
2016-09-04 12:32:21	OlegYch_	[16:45:12] yes that's ok
2016-09-04 12:32:21	OlegYch_	[16:45:23] delete ~/.sbt ь
2016-09-04 12:32:21	OlegYch_	[16:45:26] maybe
2016-09-04 12:32:21	OlegYch_	[16:46:43] otherwise it seems like your jvm or sbt package is really borked
2016-09-04 12:32:21	OlegYch_	[16:46:52] happens a lot to linux packages
2016-09-04 12:32:21	OlegYch_	[16:47:26] i'd advise to use oracle jvm and http://www.scala-sbt.org/0.13/docs/Manual-Installation.html
2016-09-04 12:32:21	OlegYch_	[16:50:29] https://github.com/paulp/sbt-extras is also good
2016-09-04 12:32:21	Sord	[16:54:35] OlegYch_, thanks for tips
2016-09-04 12:32:21	Sord	[16:55:37] ok after installing oracle jvm its magically start working
2016-09-04 12:32:21	Sord	[16:59:08] I am little bit out of my comfort zone here
2016-09-04 12:32:21	OlegYch_	[16:59:28] yay
2016-09-04 12:32:21	 *	Sord [16:59:33] is Windows .Net dev
2016-09-04 12:32:21	OlegYch_	[17:01:45] windoes is great
2016-09-04 12:32:21	OlegYch_	[17:01:59] it doesn't have broken linux packages
2016-09-04 12:32:21	nullremains	[17:02:55] well, this is a surprise: https://groups.google.com/forum/#!topic/scala-internals/JslA9u20mow
2016-09-04 12:32:21	OlegYch_	[17:04:10] sneaky
2016-09-04 12:32:21	nullremains	[17:05:02] thought RC1 was going to be delayed due to the 20% slow down wrt to default methods
2016-09-04 12:32:21	manyu4rime	[17:13:57] japhar81 please provide me with mailing list of scala
2016-09-04 12:32:21	manyu4rime	[17:15:38] aupiff please provide  easy bugs regarding scala
2016-09-04 12:32:21	schos	[18:30:40] I'm trying to get parser combinators to work. Anyone can help make http://pastebin.com/JBkxS5g9 compile?
2016-09-04 12:32:21	OlegYch_	[18:32:56] wild guess - def foo = bar.map(FooBar) | baz.map(FooBaz)
2016-09-04 12:32:21	schos	[18:34:47] def foo = bar.map(_.asInstanceOf[Foo]) | baz.map(_.asInstanceOf[Foo]) works
2016-09-04 12:32:21	schos	[18:35:16] kinda weird behaviour though
2016-09-04 12:32:21	schos	[18:36:30] it compiles, but it cannot be cast
2016-09-04 12:32:21	OlegYch_	[18:36:31] um i doubt that works
2016-09-04 12:32:21	OlegYch_	[18:36:36] exactly
2016-09-04 12:32:21	schos	[18:38:14] yours just say "not found: value Foo" :/
2016-09-04 12:32:21	schos	[18:39:53] okay
2016-09-04 12:32:21	schos	[18:40:06] dunno why, but FooBar and FooBaz as regular classes works
2016-09-04 12:32:21	schos	[18:48:12] I'm either not using them right or they are a mess to use
2016-09-04 12:32:21	schos	[18:48:27] scala parser combinators that is
2016-09-04 12:32:21	dibblego	[18:49:56] The scala parser combinator library is very poorly designed. It's not just you.
2016-09-04 12:32:21	OlegYch_	[18:58:17] it is just a collection of pure functions though
2016-09-04 12:32:21	dibblego	[19:08:44] that "try to blend with OO", they are quite a pain to get working, and when you eventually do, the performance is rubbish
2016-09-04 12:32:21	dibblego	[19:13:02] here is the original argonaut, which uses scala parser combinators for prototyping, https://github.com/argonaut-io/argonaut/blob/b6142542f463fa060a325c0e9ab1d3551337e27f/src/main/scala/com/ephox/argonaut/JsonParser.scala
2016-09-04 12:32:21	SJr	[21:31:30] Um, question: "Vector is a collection type (introduced in Scala 2.8) that addresses the inefficiency for random access on lists. Vectors allow accessing any element of the list in effectively constant time".  (http://docs.scala-lang.org/overviews/collections/concrete-immutable-collection-classes.html#vectors) 
2016-09-04 12:32:21	SJr	[21:32:52] From the descripting it gives, where it is a tree, storing up to 32 elements, and then having multiple depths, so that 2^5 elements is 1 access, 2^10 is 2 accesses, 2^15 3,  2^20 = 4... "So for all vectors of reasonable size, an element selection involves up to 5 primitive array selections. This is what we meant when we wrote that element access is effectively constant time."
2016-09-04 12:32:21	SJr	[21:33:07] Does "effectively constant time" mean "logarithmic" then?
2016-09-04 12:32:21	adelbertc	[21:38:22] @SJr log32 or something like that, yeah
2016-09-04 12:32:21	lambdabot	[21:38:22] Yeh scurvy dog...
2016-09-04 12:32:21	SJr	[21:40:15] So when it says "Vectors allow accessing any element of the list in effectively constant time. Its a larger constant than for access to the head of a list or for reading an element of an array, but its a constant nonetheless" that would be incorrect.
2016-09-04 12:32:21	dibblego	[23:19:27] you're right it's not constant-time
2016-09-04 12:32:21	[poe]jdk	[23:31:28] any suggestions for reading up on functional reactive programming? Books or free online materials? Would prefer javascript / Scala if possible, but not adverse to others
2016-09-04 12:32:21	tpolecat	[01:29:06] SJr: it's constant time in that its upper bound is log32(Int.MaxValue) which isn't very big. just call that 1 and sometimes you do better
2016-09-04 12:32:21	SJr	[01:34:30] I guess, I just don't see why you just wouldn't say "very fast" as opposed to spending a paragraph defining "effectively constant" which a book (functional programming in Scala), then drops the effectively and states that Vectors are constant time, which is just incorrect.
2016-09-04 12:32:21	tpolecat	[01:39:32] The argument is that the difference between O(1) and O(log32 n) where n is bounded isn't worth worrying about.
2016-09-04 12:32:21	tpolecat	[01:39:55] You can compute the worst case and call it 1,
2016-09-04 12:32:21	dibblego	[01:44:46] embellishment is trendy
2016-09-04 12:32:21	SJr	[02:11:59] tpolecat, I guess, but that argument just seems equally applicable to an array based heap or self balancing binary tree, since depth will just be log_2(Int.MaxValue).
2016-09-04 12:32:21	tpolecat	[02:14:40] right. log32 just grows much more slowly
2016-09-04 12:32:21	lkso	[05:14:48] how do i play a wav file in a scala/swing program?
2016-09-04 12:32:21	lkso	[05:17:10] i get: Exception in thread "AWT-EventQueue-1" java.lang.IllegalArgumentException: Invalid format
2016-09-04 12:32:21	lkso	[05:17:19] when doing: val audioInputStream = AudioSystem.getAudioInputStream(new java.io.File(s))
2016-09-04 12:32:21	Sord	[06:00:55] lkso, does exception really come from exactly from getAudioInputStream?
2016-09-04 12:32:21	Sord	[06:01:06] and are you sure that file is loaded correctly
2016-09-04 12:32:21	lkso	[06:02:35] Sord: wait let me try again with a minimal code example (do you have an example?)
2016-09-04 12:32:21	lkso	[06:08:56] Sord: http://scastie.org/22166
2016-09-04 12:32:21	lkso	[06:10:55] does anyone one know why the code above returns exception Exception in thread "AWT-EventQueue-1" java.lang.IllegalArgumentException: Invalid format
2016-09-04 12:32:21	lkso	[06:11:01] i'm on linux if this helps 
2016-09-04 12:32:21	Sord	[06:17:22] lkso, if file is good I have no idea
2016-09-04 12:32:21	lkso	[06:17:45] Sord: does the code work for you?
2016-09-04 12:32:21	Sord	[06:18:09] just googled invalid exception but those other cases it was thrown on later phase
2016-09-04 12:32:21	Sord	[06:19:01] lkso, sorry I haven't time to test right now =/ need to leave very soon
2016-09-04 12:32:21	Sord	[06:21:24] Have somebody any idea with OSGI and SBT combo? If soneone can help with converting this simple  project from Maven to SBT I can throw you 50€/$
2016-09-04 12:32:21	Sord	[06:21:25] https://github.com/protegeproject/protege-plugin-examples
2016-09-04 12:32:21	lkso	[06:21:46] np
2016-09-04 12:32:21	Sord	[06:21:49] (Code is already transformed from java to scala, problem is building tools)
2016-09-04 12:32:21	Sord	[06:22:06] will be back later...
2016-09-04 12:32:21	dunkel	[07:42:27] If I have a List[(Int, Int)] and for each item I need to create a subclass of Foo depending on the first int and override a method (inherited from Foo, all have the same arguments) in that subclass depending on the second int. Is there a better way than to use pattern matching and create firstInt*secondInt cases?
2016-09-04 12:32:21	dunkel	[07:44:12] firstInt*secondInt < I meant the possibilities of each, not the values
2016-09-04 12:32:21	funrep	[10:04:24] hey, im using the parsing combinator library in the stdlib, in haskell you can use do-syntax to compose more complex parsers of simpler ones
2016-09-04 12:32:21	funrep	[10:04:40] is there anything similar in the scala library?
2016-09-04 12:32:21	reactormonk	[10:10:25] there's for-yield
2016-09-04 12:32:21	funrep	[10:18:31] oh ~ is used for sequencing
2016-09-04 12:32:21	Sord	[10:54:10] anyone used OSGI with scala?
2016-09-04 12:32:21	[poe]jdk	[11:04:43] Is Scala.Rx worth learning or is there a better alternative? Should I study it and roll my own instead?
2016-09-04 12:32:21	mszczygiel	[11:06:49] [poe]jdk: I think you might want to give a try to Akka Streams
2016-09-04 12:32:21	reactormonk	[11:08:46] [poe]jdk, or fs2
2016-09-04 12:32:21	[poe]jdk	[11:10:14] thanks!
2016-09-04 12:32:21	***	Playback Complete.
2016-09-04 12:32:36	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-04 12:33:21	-->	Ven_ (~textual@133.249.29.93.rev.sfr.net) has joined #scala
2016-09-04 12:33:28	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 255 seconds)
2016-09-04 12:34:26	<--	Ven_ (~textual@133.249.29.93.rev.sfr.net) has quit (Client Quit)
2016-09-04 12:38:18	-->	Ven_ (~textual@133.249.29.93.rev.sfr.net) has joined #scala
2016-09-04 12:39:21	<--	Ven_ (~textual@133.249.29.93.rev.sfr.net) has quit (Client Quit)
2016-09-04 12:39:47	-->	Ven_ (~textual@133.249.29.93.rev.sfr.net) has joined #scala
2016-09-04 12:40:03	-->	zephyz_ (~zephyz@235.112.77.83.dynamic.wline.res.cust.swisscom.ch) has joined #scala
2016-09-04 12:41:15	-->	circ-user-iEC6C (~circuser-@gprs-inet-183-77.elisa.ee) has joined #scala
2016-09-04 12:44:21	<--	Ven_ (~textual@133.249.29.93.rev.sfr.net) has quit (Client Quit)
2016-09-04 12:45:18	-->	overlord_tm (~andraz@213.172.234.141) has joined #scala
2016-09-04 12:47:16	-->	Ven_ (~textual@133.249.29.93.rev.sfr.net) has joined #scala
2016-09-04 12:48:20	<--	Ven_ (~textual@133.249.29.93.rev.sfr.net) has quit (Client Quit)
2016-09-04 12:48:40	-->	Ven_ (~textual@133.249.29.93.rev.sfr.net) has joined #scala
2016-09-04 12:49:58	<--	Ven_ (~textual@133.249.29.93.rev.sfr.net) has quit (Client Quit)
2016-09-04 12:52:03	-->	Ven_ (~textual@133.249.29.93.rev.sfr.net) has joined #scala
2016-09-04 12:52:52	<--	Ven_ (~textual@133.249.29.93.rev.sfr.net) has quit (Client Quit)
2016-09-04 12:53:49	-->	Ven_ (~textual@133.249.29.93.rev.sfr.net) has joined #scala
2016-09-04 12:54:07	-->	datura (~datura@unaffiliated/datura) has joined #scala
2016-09-04 12:54:10	<--	overlord_tm (~andraz@213.172.234.141) has quit (Ping timeout: 255 seconds)
2016-09-04 12:54:25	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 12:58:33	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-09-04 13:00:53	<--	OOPMan (~OOPMan@154.66.249.84) has quit (Quit: Konversation terminated!)
2016-09-04 13:01:35	<--	Guest87 (~textual@c47-18.i07-12.onvol.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-04 13:07:10	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 13:10:19	-->	eklavya (~eklavya@117.204.254.237) has joined #scala
2016-09-04 13:11:54	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 276 seconds)
2016-09-04 13:12:58	-->	eklavya_ (~eklavya@117.204.254.237) has joined #scala
2016-09-04 13:13:10	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-04 13:14:52	<--	eklavya (~eklavya@117.204.254.237) has quit (Ping timeout: 255 seconds)
2016-09-04 13:16:06	-->	Agro (~Agro@108-79-22-150.lightspeed.hstntx.sbcglobal.net) has joined #scala
2016-09-04 13:16:07	<--	Velizar (~DEA7TH@unaffiliated/dea7th) has quit (Quit: Velizar)
2016-09-04 13:17:17	-->	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has joined #scala
2016-09-04 13:17:56	-->	Eizen (~Eizen@unaffiliated/eizen) has joined #scala
2016-09-04 13:20:50	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-04 13:21:12	<--	Eizen (~Eizen@unaffiliated/eizen) has quit (Quit: Leaving)
2016-09-04 13:21:19	<--	Raynes (~macro@unaffiliated/raynes) has quit (Ping timeout: 250 seconds)
2016-09-04 13:21:23	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-04 13:21:29	<--	SegFaultAX (SegFaultAX@unaffiliated/segfaultax) has quit (Ping timeout: 260 seconds)
2016-09-04 13:21:33	<--	octane--_ (jan@jungnickel.com) has quit (Ping timeout: 240 seconds)
2016-09-04 13:21:45	<--	xacktm (xacktm@unaffiliated/xacktm) has quit (Ping timeout: 250 seconds)
2016-09-04 13:22:11	<--	murph (murph@welcome.to.the.darkside.panicbnc.us) has quit (Ping timeout: 250 seconds)
2016-09-04 13:25:15	-->	Velizar (~DEA7TH@unaffiliated/dea7th) has joined #scala
2016-09-04 13:27:01	-->	paws_ (uid89121@gateway/web/irccloud.com/x-subghrkbdrmiropw) has joined #scala
2016-09-04 13:29:19	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-04 13:30:08	-->	Raynes (~macro@li231-96.members.linode.com) has joined #scala
2016-09-04 13:30:15	<--	Raynes (~macro@li231-96.members.linode.com) has quit (Changing host)
2016-09-04 13:30:15	-->	Raynes (~macro@unaffiliated/raynes) has joined #scala
2016-09-04 13:30:39	<--	dennisvennink (~dv@92.109.221.191) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-09-04 13:31:45	<--	atomi (~atomi@71-83-179-177.dhcp.lnbh.ca.charter.com) has quit (Quit: Lost terminal)
2016-09-04 13:33:25	-->	atomi (~atomi@71-83-179-177.dhcp.lnbh.ca.charter.com) has joined #scala
2016-09-04 13:33:44	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 260 seconds)
2016-09-04 13:34:05	-->	dennisvennink (~dv@92.109.221.191) has joined #scala
2016-09-04 13:36:05	<--	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has quit (Ping timeout: 244 seconds)
2016-09-04 13:36:18	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-04 13:37:06	-->	constant (~root@freebsd/developer/variable) has joined #scala
2016-09-04 13:37:26	-->	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has joined #scala
2016-09-04 13:39:39	<--	codesoup (~codesoup@CPE00fc8de45853-CM00fc8de45850.cpe.net.cable.rogers.com) has quit (Quit: Leaving)
2016-09-04 13:40:25	-->	SegFaultAX (SegFaultAX@unaffiliated/segfaultax) has joined #scala
2016-09-04 13:40:36	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 250 seconds)
2016-09-04 13:43:33	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 13:47:45	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 250 seconds)
2016-09-04 13:48:35	-->	octane--_ (jan@jungnickel.com) has joined #scala
2016-09-04 13:50:59	<--	haaja (haaja@2001:67c:1be8::2:0:9b) has left #scala ("adios")
2016-09-04 13:51:56	-->	shinnya (~shinnya@245.144.137.133.dy.bbexcite.jp) has joined #scala
2016-09-04 13:52:12	<--	Inv1s1ble (~cassius@199.231.241.36) has quit (Ping timeout: 276 seconds)
2016-09-04 13:53:33	-->	zmack (~zmack@188.26.139.255) has joined #scala
2016-09-04 13:56:15	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-09-04 13:56:41	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-04 13:56:51	-->	AdrianiOS (~adrianios@cpe-68-175-116-122.nyc.res.rr.com) has joined #scala
2016-09-04 14:00:08	<--	mszczygiel (~mszczygie@78.10.93.143) has quit (Quit: leaving)
2016-09-04 14:00:44	<--	Ven_ (~textual@133.249.29.93.rev.sfr.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-09-04 14:01:13	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Ping timeout: 255 seconds)
2016-09-04 14:01:23	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-04 14:01:33	<--	AdrianiOS (~adrianios@cpe-68-175-116-122.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-09-04 14:03:23	SJr	tpolecat, by much more slowly you mean 5 times more slowly? So it just seems odd to call a red black tree, logarithmic in the documentation when it is log_2 , and then call a Vector constant when it is log_32.
2016-09-04 14:03:36	constant	SJr: I'd never consider that
2016-09-04 14:03:45	constant	I don't want to be a piece of wood
2016-09-04 14:03:50	<--	eklavya_ (~eklavya@117.204.254.237) has quit (Read error: Connection timed out)
2016-09-04 14:03:52	tpolecat	Sord: yes
2016-09-04 14:04:50	-->	eklavya (~eklavya@117.204.254.237) has joined #scala
2016-09-04 14:06:30	tpolecat	Sord: there is a bnd plugin for sbt (sbt-osgi)
2016-09-04 14:06:43	<--	gabriel-bezerra (~ubuntu@150.165.15.51) has quit (Ping timeout: 252 seconds)
2016-09-04 14:06:48	tpolecat	as far as assembling applications there is nothing out there that I know of. we have a custom setup
2016-09-04 14:07:09	tpolecat	but compiling to a bundle jar is fairly straightforward
2016-09-04 14:07:16	-->	Inv1s1ble (~cassius@199.231.242.158) has joined #scala
2016-09-04 14:08:06	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 14:08:31	 *	constant feels ignored :(
2016-09-04 14:09:49	tpolecat	did you have a question?
2016-09-04 14:10:30	constant	tpolecat: nah. I was just offended that SJr called me a log
2016-09-04 14:10:31	constant	:)
2016-09-04 14:10:48	-->	gabriel-bezerra (~ubuntu@150.165.15.51) has joined #scala
2016-09-04 14:10:53	tpolecat	it's log log log
2016-09-04 14:12:15	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 244 seconds)
2016-09-04 14:14:02	-->	murph (murph@welcome.to.the.darkside.panicbnc.us) has joined #scala
2016-09-04 14:14:26	--	murph is now known as Guest69677
2016-09-04 14:14:56	-->	red1ynx (~dzmitry@178.124.163.67) has joined #scala
2016-09-04 14:16:54	<--	gabriel-bezerra (~ubuntu@150.165.15.51) has quit (Ping timeout: 276 seconds)
2016-09-04 14:19:49	-->	AnarchyAo (~andrew@dhcp.1lakeside.web-pass.com) has joined #scala
2016-09-04 14:21:39	<--	drumr (~drumr@ip68-225-223-26.ph.ph.cox.net) has quit (Read error: Connection reset by peer)
2016-09-04 14:22:32	<--	eklavya (~eklavya@117.204.254.237) has quit (Read error: Connection timed out)
2016-09-04 14:22:53	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-04 14:23:26	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-04 14:23:42	-->	eklavya (~eklavya@117.204.254.237) has joined #scala
2016-09-04 14:24:28	<--	firstdayonthejob (~firstdayo@cpc99346-croy26-2-0-cust153.19-2.cable.virginm.net) has quit (Quit: WeeChat 1.5)
2016-09-04 14:24:35	-->	adolf_stalin (~adolf_sta@ip70-185-196-164.ok.ok.cox.net) has joined #scala
2016-09-04 14:25:57	<--	zmack (~zmack@188.26.139.255) has quit (Ping timeout: 265 seconds)
2016-09-04 14:27:37	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-04 14:28:18	-->	pfurla (~textual@ool-2f12d419.dyn.optonline.net) has joined #scala
2016-09-04 14:30:55	-->	firstdayonthejob (~firstdayo@cpc99346-croy26-2-0-cust153.19-2.cable.virginm.net) has joined #scala
2016-09-04 14:37:02	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-04 14:37:39	<--	shinnya (~shinnya@245.144.137.133.dy.bbexcite.jp) has quit (Ping timeout: 264 seconds)
2016-09-04 14:41:22	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 252 seconds)
2016-09-04 14:44:59	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 14:47:04	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-09-04 14:47:35	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-04 14:49:43	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 265 seconds)
2016-09-04 14:52:39	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Ping timeout: 276 seconds)
2016-09-04 14:53:08	<--	tpolecat (~anonymous@c-76-27-230-159.hsd1.or.comcast.net) has quit (Quit: tpolecat)
2016-09-04 14:53:24	<--	eklavya (~eklavya@117.204.254.237) has quit (Read error: Connection timed out)
2016-09-04 14:54:24	-->	eklavya (~eklavya@117.204.254.237) has joined #scala
2016-09-04 15:00:02	<--	circ-user-iEC6C (~circuser-@gprs-inet-183-77.elisa.ee) has quit (Remote host closed the connection)
2016-09-04 15:02:59	--	Guest69677 is now known as murph
2016-09-04 15:05:15	<--	augustin985 (~aborsu@ptr-2hj4tbq0lddrd3opd1qps9xof.ip6.access.telenet.be) has quit (Ping timeout: 264 seconds)
2016-09-04 15:09:32	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 15:12:50	<--	IstiCusi (~phonon@84-75-175-159.dclient.hispeed.ch) has quit (Ping timeout: 265 seconds)
2016-09-04 15:14:12	-->	partycoder (~partycode@2604:5500:1a:7c7:2072:c9e0:f2db:8934) has joined #scala
2016-09-04 15:14:12	<--	partycoder (~partycode@2604:5500:1a:7c7:2072:c9e0:f2db:8934) has quit (Changing host)
2016-09-04 15:14:12	-->	partycoder (~partycode@unaffiliated/partycoder) has joined #scala
2016-09-04 15:14:15	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 264 seconds)
2016-09-04 15:21:26	-->	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has joined #scala
2016-09-04 15:23:17	-->	circ-user-wzlJo (~circuser-@gprs-inet-183-77.elisa.ee) has joined #scala
2016-09-04 15:23:59	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-04 15:25:47	-->	IstiCusi (~phonon@84-75-175-159.dclient.hispeed.ch) has joined #scala
2016-09-04 15:26:54	-->	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has joined #scala
2016-09-04 15:28:40	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-04 15:28:40	<--	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2016-09-04 15:29:46	-->	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has joined #scala
2016-09-04 15:32:11	<--	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2016-09-04 15:32:14	<--	partycoder (~partycode@unaffiliated/partycoder) has quit (Quit: zzz)
2016-09-04 15:32:56	-->	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has joined #scala
2016-09-04 15:33:20	-->	romerocesar (~cesar@2601:602:9300:6000:2ce4:d8bf:6764:7c30) has joined #scala
2016-09-04 15:37:37	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-04 15:38:08	-->	bmahe (~bruno@c-69-181-81-140.hsd1.ca.comcast.net) has joined #scala
2016-09-04 15:39:35	<--	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2016-09-04 15:40:27	-->	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has joined #scala
2016-09-04 15:41:12	-->	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has joined #scala
2016-09-04 15:41:13	-->	freemonad (~djang0nub@72.34.102.188) has joined #scala
2016-09-04 15:42:01	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 255 seconds)
2016-09-04 15:46:21	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 15:46:21	<--	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2016-09-04 15:47:49	-->	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has joined #scala
2016-09-04 15:47:51	-->	Hoffman (~Hoffman@unaffiliated/hoffman) has joined #scala
2016-09-04 15:48:07	-->	xacktm (xacktm@unaffiliated/xacktm) has joined #scala
2016-09-04 15:48:35	<--	eklavya (~eklavya@117.204.254.237) has quit (Remote host closed the connection)
2016-09-04 15:50:33	<--	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2016-09-04 15:51:01	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 255 seconds)
2016-09-04 15:51:22	-->	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has joined #scala
2016-09-04 15:54:32	-->	xnavor (~xnavor@ipbcc19516.dynamic.kabel-deutschland.de) has joined #scala
2016-09-04 15:54:33	<--	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2016-09-04 15:56:21	-->	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has joined #scala
2016-09-04 15:59:04	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 16:02:01	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-04 16:03:10	-->	romerocesar_ (~cesar@c-73-97-145-30.hsd1.wa.comcast.net) has joined #scala
2016-09-04 16:03:10	<--	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has quit (Read error: Connection reset by peer)
2016-09-04 16:03:33	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-09-04 16:04:36	-->	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has joined #scala
2016-09-04 16:05:32	<--	romerocesar (~cesar@2601:602:9300:6000:2ce4:d8bf:6764:7c30) has quit (Ping timeout: 250 seconds)
2016-09-04 16:06:21	<--	tpolecat (~anonymous@c-73-67-226-174.hsd1.or.comcast.net) has quit (Client Quit)
2016-09-04 16:13:08	<--	datura (~datura@unaffiliated/datura) has quit (Ping timeout: 250 seconds)
2016-09-04 16:15:52	-->	Guest87 (~textual@c47-18.i07-12.onvol.net) has joined #scala
2016-09-04 16:16:03	<--	Hoffman (~Hoffman@unaffiliated/hoffman) has quit (Ping timeout: 264 seconds)
2016-09-04 16:16:31	<--	AnarchyAo (~andrew@dhcp.1lakeside.web-pass.com) has quit (Quit: ircN 8.00 for mIRC (20100904) - www.ircN.org)
2016-09-04 16:16:43	-->	GrayArea (~GrayArea@cpc73846-dals21-2-0-cust384.20-2.cable.virginm.net) has joined #scala
2016-09-04 16:22:28	<--	freemonad (~djang0nub@72.34.102.188) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-04 16:22:53	-->	zmack (~zmack@188.26.139.255) has joined #scala
2016-09-04 16:23:10	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 16:25:39	<--	romerocesar_ (~cesar@c-73-97-145-30.hsd1.wa.comcast.net) has quit (Remote host closed the connection)
2016-09-04 16:26:07	<--	henriknj (~hnj@84.238.125.62) has quit (Ping timeout: 255 seconds)
2016-09-04 16:26:14	-->	hamid (~nithp@unaffiliated/hamid) has joined #scala
2016-09-04 16:27:23	<--	red1ynx (~dzmitry@178.124.163.67) has quit (Ping timeout: 258 seconds)
2016-09-04 16:27:36	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 244 seconds)
2016-09-04 16:27:45	-->	AnarchyAo (~andrew@dhcp.1lakeside.web-pass.com) has joined #scala
2016-09-04 16:27:58	-->	red1ynx (~dzmitry@178.124.163.67) has joined #scala
2016-09-04 16:28:09	<--	zmack (~zmack@188.26.139.255) has quit (Ping timeout: 258 seconds)
2016-09-04 16:29:26	-->	zmack (~zmack@188.26.139.255) has joined #scala
2016-09-04 16:30:44	-->	freemonad (~djang0nub@72.34.102.188) has joined #scala
2016-09-04 16:31:57	-->	Hoffman (~Hoffman@unaffiliated/hoffman) has joined #scala
2016-09-04 16:32:25	<--	circ-user-wzlJo (~circuser-@gprs-inet-183-77.elisa.ee) has quit (Ping timeout: 255 seconds)
2016-09-04 16:33:46	<--	zmack (~zmack@188.26.139.255) has quit (Ping timeout: 255 seconds)
2016-09-04 16:34:54	-->	sepp2k (~sepp2k@pD9520884.dip0.t-ipconnect.de) has joined #scala
2016-09-04 16:38:21	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-04 16:39:12	-->	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined #scala
2016-09-04 16:42:55	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 252 seconds)
2016-09-04 16:47:42	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 16:50:53	-->	kueller (~kueller@bne75-7-82-230-123-111.fbx.proxad.net) has joined #scala
2016-09-04 16:51:23	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-09-04 16:51:26	kueller	has anyone managed to get tut to work with later versions of sbt-site?
2016-09-04 16:51:51	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-04 16:52:24	<--	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has quit (Ping timeout: 244 seconds)
2016-09-04 16:52:54	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 276 seconds)
2016-09-04 16:53:54	-->	nefilim (~Adium@c-71-202-233-36.hsd1.ca.comcast.net) has joined #scala
2016-09-04 16:55:06	<--	sepp2k (~sepp2k@pD9520884.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2016-09-04 16:55:11	-->	adelbertc (uid26183@gateway/web/irccloud.com/x-fyoinamsfzjkpuba) has joined #scala
2016-09-04 16:55:13	<--	paws_ (uid89121@gateway/web/irccloud.com/x-subghrkbdrmiropw) has quit (Quit: Connection closed for inactivity)
2016-09-04 16:55:20	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-04 16:55:28	-->	datura (~datura@unaffiliated/datura) has joined #scala
2016-09-04 16:55:32	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-04 17:00:59	-->	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has joined #scala
2016-09-04 17:01:20	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 17:03:36	<--	red1ynx (~dzmitry@178.124.163.67) has quit (Ping timeout: 250 seconds)
2016-09-04 17:05:32	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-09-04 17:06:52	<--	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has quit (Ping timeout: 240 seconds)
2016-09-04 17:07:05	-->	simplyianm_ (uid132889@gateway/web/irccloud.com/x-ftlabuowiqwpmxgt) has joined #scala
2016-09-04 17:08:25	<--	adolf_stalin (~adolf_sta@ip70-185-196-164.ok.ok.cox.net) has quit (Remote host closed the connection)
2016-09-04 17:08:30	-->	romerocesar (~cesar@2601:602:9300:6000:80ca:7d23:f6ca:a437) has joined #scala
2016-09-04 17:11:03	<--	IstiCusi (~phonon@84-75-175-159.dclient.hispeed.ch) has quit (Ping timeout: 240 seconds)
2016-09-04 17:12:29	<--	Guest87 (~textual@c47-18.i07-12.onvol.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-04 17:13:02	-->	griffindy (~textual@216.229.136.31) has joined #scala
2016-09-04 17:15:09	<--	griffindy (~textual@216.229.136.31) has quit (Client Quit)
2016-09-04 17:15:43	-->	circ-user-wzlJo (~circuser-@gprs-inet-183-77.elisa.ee) has joined #scala
2016-09-04 17:16:12	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 240 seconds)
2016-09-04 17:18:56	<--	xnavor (~xnavor@ipbcc19516.dynamic.kabel-deutschland.de) has quit (Quit: This computer has gone to sleep)
2016-09-04 17:19:21	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-04 17:20:30	-->	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has joined #scala
2016-09-04 17:20:49	-->	darkfrog (~mhicks@ip68-97-10-164.ok.ok.cox.net) has joined #scala
2016-09-04 17:22:14	-->	griffindy (~textual@216.229.136.31) has joined #scala
2016-09-04 17:24:53	<--	circ-user-wzlJo (~circuser-@gprs-inet-183-77.elisa.ee) has quit (Ping timeout: 258 seconds)
2016-09-04 17:25:50	<--	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has quit (Ping timeout: 265 seconds)
2016-09-04 17:26:13	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-09-04 17:26:29	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-04 17:28:32	<--	kueller (~kueller@bne75-7-82-230-123-111.fbx.proxad.net) has quit (Ping timeout: 240 seconds)
2016-09-04 17:30:14	-->	zmack (~zmack@188.26.139.255) has joined #scala
2016-09-04 17:31:13	-->	marr (~ccc@159-205-248-26.adsl.inetia.pl) has joined #scala
2016-09-04 17:34:37	<--	zmack (~zmack@188.26.139.255) has quit (Ping timeout: 244 seconds)
2016-09-04 17:37:35	<--	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has quit (Quit: Leaving.)
2016-09-04 17:38:28	-->	tpolecat (~anonymous@c-76-27-230-159.hsd1.or.comcast.net) has joined #scala
2016-09-04 17:40:49	-->	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has joined #scala
2016-09-04 17:43:43	<--	vili_ (~nick@2605:a000:ffc0:d8:5c8e:e37d:ec73:4299) has quit (Remote host closed the connection)
2016-09-04 17:47:18	-->	plamb_ (~plamb@c-71-237-228-213.hsd1.or.comcast.net) has joined #scala
2016-09-04 17:50:40	-->	allengeorge (~textual@cpe-74-73-18-87.nyc.res.rr.com) has joined #scala
2016-09-04 17:54:16	<--	Hoffman (~Hoffman@unaffiliated/hoffman) has quit (Ping timeout: 265 seconds)
2016-09-04 17:57:56	<--	plamb_ (~plamb@c-71-237-228-213.hsd1.or.comcast.net) has quit (Remote host closed the connection)
2016-09-04 17:59:32	-->	plamb_ (~plamb@c-71-237-228-213.hsd1.or.comcast.net) has joined #scala
2016-09-04 18:00:33	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-09-04 18:01:36	reactormonk	! """$line9.$read$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$Hello"""
2016-09-04 18:01:40	multibot_	 String = Hello
2016-09-04 18:01:52	reactormonk	... I guess that's some string replacement?
2016-09-04 18:02:42	tpolecat	yeah a repl artifact
2016-09-04 18:02:46	tpolecat	hack hack hack
2016-09-04 18:03:11	reactormonk	Know where it is? Need it for tut :D
2016-09-04 18:03:15	<--	nefilim (~Adium@c-71-202-233-36.hsd1.ca.comcast.net) has quit (Quit: Leaving.)
2016-09-04 18:03:32	-->	Hoffman (~Hoffman@unaffiliated/hoffman) has joined #scala
2016-09-04 18:03:54	-->	overlord_tm (~andraz@213.172.234.141) has joined #scala
2016-09-04 18:04:11	tpolecat	i don't, sorry
2016-09-04 18:04:16	tpolecat	start in IMain and see where it leads you
2016-09-04 18:04:17	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-04 18:05:57	-->	adolf_stalin (~adolf_sta@2600:8804:6000:283:10ca:dd02:4e98:c211) has joined #scala
2016-09-04 18:09:11	-->	omefire (~omefire@24.18.128.19) has joined #scala
2016-09-04 18:10:52	<--	trepidacious (~trepidaci@217.155.204.2) has quit (Quit: trepidacious)
2016-09-04 18:15:27	-->	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has joined #scala
2016-09-04 18:15:32	<--	overlord_tm (~andraz@213.172.234.141) has quit (Ping timeout: 265 seconds)
2016-09-04 18:22:29	<--	allengeorge (~textual@cpe-74-73-18-87.nyc.res.rr.com) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-04 18:31:06	-->	zmack (~zmack@188.26.139.255) has joined #scala
2016-09-04 18:32:40	<--	adolf_stalin (~adolf_sta@2600:8804:6000:283:10ca:dd02:4e98:c211) has quit (Remote host closed the connection)
2016-09-04 18:33:46	<--	freemonad (~djang0nub@72.34.102.188) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-04 18:35:32	<--	zmack (~zmack@188.26.139.255) has quit (Ping timeout: 240 seconds)
2016-09-04 18:36:24	<--	firstdayonthejob (~firstdayo@cpc99346-croy26-2-0-cust153.19-2.cable.virginm.net) has quit (Ping timeout: 265 seconds)
2016-09-04 18:36:40	<--	Pulp (~Pulp@63-221-50-195.dyn.estpak.ee) has quit (Read error: Connection reset by peer)
2016-09-04 18:37:27	<--	darkfrog (~mhicks@ip68-97-10-164.ok.ok.cox.net) has quit (Remote host closed the connection)
2016-09-04 18:46:43	<--	Velizar (~DEA7TH@unaffiliated/dea7th) has quit (Quit: Velizar)
2016-09-04 18:50:52	<--	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has quit (Ping timeout: 250 seconds)
2016-09-04 18:52:00	pfn	wut? 
2016-09-04 18:53:45	-->	freemonad (~djang0nub@72.34.102.188) has joined #scala
2016-09-04 18:59:16	<--	Rawriful (~Rawriful@host-2-96-39-227.as13285.net) has quit (Quit: WeeChat 1.3)
2016-09-04 19:00:55	<--	AnarchyAo (~andrew@dhcp.1lakeside.web-pass.com) has quit (Quit: ircN 8.00 for mIRC (20100904) - www.ircN.org)
2016-09-04 19:01:25	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-04 19:02:59	-->	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has joined #scala
2016-09-04 19:04:09	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 244 seconds)
2016-09-04 19:05:47	-->	drumr (~drumr@ip68-225-223-26.ph.ph.cox.net) has joined #scala
2016-09-04 19:07:36	<--	freemonad (~djang0nub@72.34.102.188) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-04 19:08:03	-->	sepp2k (~sepp2k@pD9520884.dip0.t-ipconnect.de) has joined #scala
2016-09-04 19:08:20	-->	mizu_no_oto (~textual@cpe-24-59-62-157.twcny.res.rr.com) has joined #scala
2016-09-04 19:11:24	-->	nevodka (~nevodka@174-31-180-151.tukw.qwest.net) has joined #scala
2016-09-04 19:11:56	-->	jedws (~jedws@c58-109-75-176.randw4.nsw.optusnet.com.au) has joined #scala
2016-09-04 19:14:01	<--	romerocesar (~cesar@2601:602:9300:6000:80ca:7d23:f6ca:a437) has quit (Remote host closed the connection)
2016-09-04 19:16:42	-->	predator217 (~predator1@p4FDC1E0A.dip0.t-ipconnect.de) has joined #scala
2016-09-04 19:16:59	-->	markus1189 (~markus118@p4FDC1E0A.dip0.t-ipconnect.de) has joined #scala
2016-09-04 19:19:31	<--	simplyianm_ (uid132889@gateway/web/irccloud.com/x-ftlabuowiqwpmxgt) has quit (Quit: Connection closed for inactivity)
2016-09-04 19:19:32	<--	GrayArea (~GrayArea@cpc73846-dals21-2-0-cust384.20-2.cable.virginm.net) has quit (Ping timeout: 240 seconds)
2016-09-04 19:20:03	<--	markus1199 (~markus118@p4FDC0BBD.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2016-09-04 19:20:27	<--	predator117 (~predator1@p4FDC0BBD.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2016-09-04 19:25:40	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-04 19:30:07	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-04 19:31:32	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 240 seconds)
2016-09-04 19:31:51	-->	zmack (~zmack@188.26.139.255) has joined #scala
2016-09-04 19:33:34	-->	romerocesar (~cesar@c-73-97-145-30.hsd1.wa.comcast.net) has joined #scala
2016-09-04 19:37:04	<--	zmack (~zmack@188.26.139.255) has quit (Ping timeout: 264 seconds)
2016-09-04 19:37:59	<--	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has quit (Ping timeout: 276 seconds)
2016-09-04 19:38:53	-->	lambda-11235 (~lambda-11@184.63.207.209) has joined #scala
2016-09-04 19:40:35	<--	nevodka (~nevodka@174-31-180-151.tukw.qwest.net) has quit (Quit: . _.)
2016-09-04 19:44:33	-->	shinnya (~shinnya@245.144.137.133.dy.bbexcite.jp) has joined #scala
2016-09-04 19:45:19	-->	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has joined #scala
2016-09-04 19:46:54	<--	mizu_no_oto (~textual@cpe-24-59-62-157.twcny.res.rr.com) has quit (Quit: Computer has gone to sleep.)
2016-09-04 19:48:26	<--	jedws (~jedws@c58-109-75-176.randw4.nsw.optusnet.com.au) has quit (Quit: Computer has gone to sleep.)
2016-09-04 19:51:11	<--	mah454 (~quassel@109.169.49.170) has quit (Ping timeout: 244 seconds)
2016-09-04 19:55:30	<--	sepp2k (~sepp2k@pD9520884.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2016-09-04 19:57:07	-->	Wild_Cat (~Max@163.83.69.91.rev.sfr.net) has joined #scala
2016-09-04 19:57:10	<--	marr (~ccc@159-205-248-26.adsl.inetia.pl) has quit (Ping timeout: 250 seconds)
2016-09-04 19:59:05	-->	AdrianiOS (~adrianios@cpe-68-175-116-122.nyc.res.rr.com) has joined #scala
2016-09-04 20:00:30	<--	griffindy (~textual@216.229.136.31) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-04 20:03:31	<--	atomi (~atomi@71-83-179-177.dhcp.lnbh.ca.charter.com) has quit (Read error: Connection reset by peer)
2016-09-04 20:03:33	<--	AdrianiOS (~adrianios@cpe-68-175-116-122.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-09-04 20:05:52	-->	atomi (~atomi@71-83-179-177.dhcp.lnbh.ca.charter.com) has joined #scala
2016-09-04 20:06:10	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 244 seconds)
2016-09-04 20:20:47	-->	nafg (~naftoli@96.57.169.90) has joined #scala
2016-09-04 20:26:46	-->	jedws (~jedws@eth59-167-133-100.static.internode.on.net) has joined #scala
2016-09-04 20:32:53	-->	zmack (~zmack@188.26.139.255) has joined #scala
2016-09-04 20:33:45	-->	AnarchyAo (~andrew@dhcp.1lakeside.web-pass.com) has joined #scala
2016-09-04 20:37:40	<--	zmack (~zmack@188.26.139.255) has quit (Ping timeout: 250 seconds)
2016-09-04 20:39:01	<--	shinnya (~shinnya@245.144.137.133.dy.bbexcite.jp) has quit (Ping timeout: 255 seconds)
2016-09-04 20:42:36	<--	romerocesar (~cesar@c-73-97-145-30.hsd1.wa.comcast.net) has quit (Remote host closed the connection)
2016-09-04 20:42:58	<--	Wild_Cat (~Max@163.83.69.91.rev.sfr.net) has quit (Quit: Leaving)
2016-09-04 20:43:33	-->	Guest87 (~textual@c47-18.i07-12.onvol.net) has joined #scala
2016-09-04 20:44:48	-->	virtualeyes (~godenji@c-50-138-183-78.hsd1.ma.comcast.net) has joined #scala
2016-09-04 20:45:14	<--	Guest87 (~textual@c47-18.i07-12.onvol.net) has quit (Client Quit)
2016-09-04 20:52:00	-->	darkfrog (~mhicks@ip68-97-10-164.ok.ok.cox.net) has joined #scala
2016-09-04 20:57:39	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-04 21:00:35	<--	plamb_ (~plamb@c-71-237-228-213.hsd1.or.comcast.net) has quit (Remote host closed the connection)
2016-09-04 21:00:57	-->	plamb_ (~plamb@c-71-237-228-213.hsd1.or.comcast.net) has joined #scala
2016-09-04 21:01:58	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 252 seconds)
2016-09-04 21:02:15	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-04 21:02:32	<--	plamb_ (~plamb@c-71-237-228-213.hsd1.or.comcast.net) has quit (Remote host closed the connection)
2016-09-04 21:03:02	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-04 21:03:04	<--	datura (~datura@unaffiliated/datura) has quit (Ping timeout: 252 seconds)
2016-09-04 21:06:50	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 258 seconds)
2016-09-04 21:11:16	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 244 seconds)
2016-09-04 21:14:04	<--	xacktm (xacktm@unaffiliated/xacktm) has quit (Ping timeout: 250 seconds)
2016-09-04 21:17:06	<--	murph (murph@welcome.to.the.darkside.panicbnc.us) has quit (Ping timeout: 250 seconds)
2016-09-04 21:17:54	--	irc: disconnected from server
2016-09-05 21:58:39	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-05 21:58:39	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-05 21:58:39	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-05 21:58:39	--	Channel #scala: 394 nicks (0 ops, 0 voices, 394 normals)
2016-09-05 21:58:39	***	Buffer Playback...
2016-09-05 21:58:39	jackweirdy	[15:28:58] I'm trying to build a scala-graph HyperEdge with known start and end nodes but arbitrary number of middle nodes. I've tried to Fold across the list of middle nodes but I'm having trouble getting the types to line up. Something like `types.foldLeft(start)(_ ~+> _) ~+> end` doesn't work because the type that fold expects to see returned is the type of start, rather than an edge. Is there either a scala-graph way to do
2016-09-05 21:58:39	jackweirdy	[15:28:58]  this, or a variety of foldLeft which allows the type of the initial value to be different from all of the following ones?
2016-09-05 21:58:39	jackweirdy	[15:49:05] Ah, looks like my trouble was because I was using ~+> in the middle of the fold which adds the label at each point. Just doing ~> in the fold and then ~+> when I add the end node is what I needed 
2016-09-05 21:58:39	[poe]jdk	[15:51:28] any suggestions for a book on reactive programming? Preferrably Scala or Javascript, I'm not quite on the level for Haskell yet (but if there's nothing comparable I can deal with Haskell)
2016-09-05 21:58:39	[poe]jdk	[15:51:42] functional reactive programming, I mean.*
2016-09-05 21:58:39	[poe]jdk	[16:02:07] alternatively if there are any good free options to read online I'm game for that too.
2016-09-05 21:58:39	Sord	[16:24:59] Hi... I am trying to getting started with IntelliJ IDEA with SBT.
2016-09-05 21:58:39	Sord	[16:25:32] It seems to be able to get depedencies greatly but I have no idea how to create .jar package with idea plugin
2016-09-05 21:58:39	reactormonk	[16:25:50] I'd just run package from the sbt command line, but that's me.
2016-09-05 21:58:39	Sord	[16:26:39] reactormonk, I tried that too but I get null pointer exception from sbt
2016-09-05 21:58:39	Sord	[16:27:27] plain new SBT project created with idea
2016-09-05 21:58:39	Sord	[16:27:45] I putted "sbt" (or sbt --help) to terminal
2016-09-05 21:58:39	Sord	[16:28:25] [info] Loading project definition from [PROJECT PATH]/project
2016-09-05 21:58:39	Sord	[16:28:25] java.lang.NullPointerException
2016-09-05 21:58:39	Sord	[16:28:25] 	at java.util.regex.Matcher.getTextLength(java.base@9-internal/Matcher.java:1747)
2016-09-05 21:58:39	Sord	[16:28:49] wtf there is happening
2016-09-05 21:58:39	Sord	[16:28:50] :D
2016-09-05 21:58:39	Sord	[16:29:09] (working on ubuntu)
2016-09-05 21:58:39	OlegYch_	[16:32:59] wild guess - your project name/path is fucked up
2016-09-05 21:58:39	OlegYch_	[16:35:33] could you share the build definition?
2016-09-05 21:58:39	Sord	[16:38:13] OlegYch_, technically path should be ok since working folder of terminal was project root already
2016-09-05 21:58:39	Sord	[16:38:39] however there was one folder with space and after renaming I am getting difrent error
2016-09-05 21:58:39	Sord	[16:40:05] now it is: error: error while loading package, Missing dependency 'object java.lang.Object in compiler mirror', required by /home/USERNAME/.sbt/boot/scala-2.10.4/lib/scala-library.jar(scala/package.class)
2016-09-05 21:58:39	OlegYch_	[16:41:10] um dunno
2016-09-05 21:58:39	Sord	[16:41:18] build.sbt include just: name := "sbttestA" version := "1.0" scalaVersion := "2.11.8"
2016-09-05 21:58:39	OlegYch_	[16:41:55] might be something with your jvm setup
2016-09-05 21:58:39	Sord	[16:41:58] good question is that is this going forward or backward...
2016-09-05 21:58:39	OlegYch_	[16:42:19] delete project/target though just to be sure
2016-09-05 21:58:39	Sord	[16:44:01] I deleted all the target folders and same result
2016-09-05 21:58:39	Sord	[16:44:33] is that a good thing that my project is targeting to scala 2.11.8 but scala 2.10.4 is mentioned in sbt error?
2016-09-05 21:58:39	OlegYch_	[16:45:12] yes that's ok
2016-09-05 21:58:39	OlegYch_	[16:45:23] delete ~/.sbt ь
2016-09-05 21:58:39	OlegYch_	[16:45:26] maybe
2016-09-05 21:58:39	OlegYch_	[16:46:43] otherwise it seems like your jvm or sbt package is really borked
2016-09-05 21:58:39	OlegYch_	[16:46:52] happens a lot to linux packages
2016-09-05 21:58:39	OlegYch_	[16:47:26] i'd advise to use oracle jvm and http://www.scala-sbt.org/0.13/docs/Manual-Installation.html
2016-09-05 21:58:39	OlegYch_	[16:50:29] https://github.com/paulp/sbt-extras is also good
2016-09-05 21:58:39	Sord	[16:54:35] OlegYch_, thanks for tips
2016-09-05 21:58:39	Sord	[16:55:37] ok after installing oracle jvm its magically start working
2016-09-05 21:58:39	Sord	[16:59:08] I am little bit out of my comfort zone here
2016-09-05 21:58:39	OlegYch_	[16:59:28] yay
2016-09-05 21:58:39	 *	Sord [16:59:33] is Windows .Net dev
2016-09-05 21:58:39	OlegYch_	[17:01:45] windoes is great
2016-09-05 21:58:39	OlegYch_	[17:01:59] it doesn't have broken linux packages
2016-09-05 21:58:39	nullremains	[17:02:55] well, this is a surprise: https://groups.google.com/forum/#!topic/scala-internals/JslA9u20mow
2016-09-05 21:58:39	OlegYch_	[17:04:10] sneaky
2016-09-05 21:58:39	nullremains	[17:05:02] thought RC1 was going to be delayed due to the 20% slow down wrt to default methods
2016-09-05 21:58:39	manyu4rime	[17:13:57] japhar81 please provide me with mailing list of scala
2016-09-05 21:58:39	manyu4rime	[17:15:38] aupiff please provide  easy bugs regarding scala
2016-09-05 21:58:39	schos	[18:30:40] I'm trying to get parser combinators to work. Anyone can help make http://pastebin.com/JBkxS5g9 compile?
2016-09-05 21:58:39	OlegYch_	[18:32:56] wild guess - def foo = bar.map(FooBar) | baz.map(FooBaz)
2016-09-05 21:58:39	schos	[18:34:47] def foo = bar.map(_.asInstanceOf[Foo]) | baz.map(_.asInstanceOf[Foo]) works
2016-09-05 21:58:39	schos	[18:35:16] kinda weird behaviour though
2016-09-05 21:58:39	schos	[18:36:30] it compiles, but it cannot be cast
2016-09-05 21:58:39	OlegYch_	[18:36:31] um i doubt that works
2016-09-05 21:58:39	OlegYch_	[18:36:36] exactly
2016-09-05 21:58:39	schos	[18:38:14] yours just say "not found: value Foo" :/
2016-09-05 21:58:39	schos	[18:39:53] okay
2016-09-05 21:58:39	schos	[18:40:06] dunno why, but FooBar and FooBaz as regular classes works
2016-09-05 21:58:39	schos	[18:48:12] I'm either not using them right or they are a mess to use
2016-09-05 21:58:39	schos	[18:48:27] scala parser combinators that is
2016-09-05 21:58:39	dibblego	[18:49:56] The scala parser combinator library is very poorly designed. It's not just you.
2016-09-05 21:58:39	OlegYch_	[18:58:17] it is just a collection of pure functions though
2016-09-05 21:58:39	dibblego	[19:08:44] that "try to blend with OO", they are quite a pain to get working, and when you eventually do, the performance is rubbish
2016-09-05 21:58:39	dibblego	[19:13:02] here is the original argonaut, which uses scala parser combinators for prototyping, https://github.com/argonaut-io/argonaut/blob/b6142542f463fa060a325c0e9ab1d3551337e27f/src/main/scala/com/ephox/argonaut/JsonParser.scala
2016-09-05 21:58:39	SJr	[21:31:30] Um, question: "Vector is a collection type (introduced in Scala 2.8) that addresses the inefficiency for random access on lists. Vectors allow accessing any element of the list in effectively constant time".  (http://docs.scala-lang.org/overviews/collections/concrete-immutable-collection-classes.html#vectors) 
2016-09-05 21:58:39	SJr	[21:32:52] From the descripting it gives, where it is a tree, storing up to 32 elements, and then having multiple depths, so that 2^5 elements is 1 access, 2^10 is 2 accesses, 2^15 3,  2^20 = 4... "So for all vectors of reasonable size, an element selection involves up to 5 primitive array selections. This is what we meant when we wrote that element access is effectively constant time."
2016-09-05 21:58:39	SJr	[21:33:07] Does "effectively constant time" mean "logarithmic" then?
2016-09-05 21:58:39	adelbertc	[21:38:22] @SJr log32 or something like that, yeah
2016-09-05 21:58:39	lambdabot	[21:38:22] Yeh scurvy dog...
2016-09-05 21:58:39	SJr	[21:40:15] So when it says "Vectors allow accessing any element of the list in effectively constant time. Its a larger constant than for access to the head of a list or for reading an element of an array, but its a constant nonetheless" that would be incorrect.
2016-09-05 21:58:39	dibblego	[23:19:27] you're right it's not constant-time
2016-09-05 21:58:39	[poe]jdk	[23:31:28] any suggestions for reading up on functional reactive programming? Books or free online materials? Would prefer javascript / Scala if possible, but not adverse to others
2016-09-05 21:58:39	tpolecat	[01:29:06] SJr: it's constant time in that its upper bound is log32(Int.MaxValue) which isn't very big. just call that 1 and sometimes you do better
2016-09-05 21:58:39	SJr	[01:34:30] I guess, I just don't see why you just wouldn't say "very fast" as opposed to spending a paragraph defining "effectively constant" which a book (functional programming in Scala), then drops the effectively and states that Vectors are constant time, which is just incorrect.
2016-09-05 21:58:39	tpolecat	[01:39:32] The argument is that the difference between O(1) and O(log32 n) where n is bounded isn't worth worrying about.
2016-09-05 21:58:39	tpolecat	[01:39:55] You can compute the worst case and call it 1,
2016-09-05 21:58:39	dibblego	[01:44:46] embellishment is trendy
2016-09-05 21:58:39	SJr	[02:11:59] tpolecat, I guess, but that argument just seems equally applicable to an array based heap or self balancing binary tree, since depth will just be log_2(Int.MaxValue).
2016-09-05 21:58:39	tpolecat	[02:14:40] right. log32 just grows much more slowly
2016-09-05 21:58:39	lkso	[05:14:48] how do i play a wav file in a scala/swing program?
2016-09-05 21:58:39	lkso	[05:17:10] i get: Exception in thread "AWT-EventQueue-1" java.lang.IllegalArgumentException: Invalid format
2016-09-05 21:58:39	lkso	[05:17:19] when doing: val audioInputStream = AudioSystem.getAudioInputStream(new java.io.File(s))
2016-09-05 21:58:39	Sord	[06:00:55] lkso, does exception really come from exactly from getAudioInputStream?
2016-09-05 21:58:39	Sord	[06:01:06] and are you sure that file is loaded correctly
2016-09-05 21:58:39	lkso	[06:02:35] Sord: wait let me try again with a minimal code example (do you have an example?)
2016-09-05 21:58:39	lkso	[06:08:56] Sord: http://scastie.org/22166
2016-09-05 21:58:39	lkso	[06:10:55] does anyone one know why the code above returns exception Exception in thread "AWT-EventQueue-1" java.lang.IllegalArgumentException: Invalid format
2016-09-05 21:58:39	lkso	[06:11:01] i'm on linux if this helps 
2016-09-05 21:58:39	Sord	[06:17:22] lkso, if file is good I have no idea
2016-09-05 21:58:39	lkso	[06:17:45] Sord: does the code work for you?
2016-09-05 21:58:39	Sord	[06:18:09] just googled invalid exception but those other cases it was thrown on later phase
2016-09-05 21:58:39	Sord	[06:19:01] lkso, sorry I haven't time to test right now =/ need to leave very soon
2016-09-05 21:58:39	Sord	[06:21:24] Have somebody any idea with OSGI and SBT combo? If soneone can help with converting this simple  project from Maven to SBT I can throw you 50€/$
2016-09-05 21:58:39	Sord	[06:21:25] https://github.com/protegeproject/protege-plugin-examples
2016-09-05 21:58:39	lkso	[06:21:46] np
2016-09-05 21:58:39	Sord	[06:21:49] (Code is already transformed from java to scala, problem is building tools)
2016-09-05 21:58:39	Sord	[06:22:06] will be back later...
2016-09-05 21:58:39	dunkel	[07:42:27] If I have a List[(Int, Int)] and for each item I need to create a subclass of Foo depending on the first int and override a method (inherited from Foo, all have the same arguments) in that subclass depending on the second int. Is there a better way than to use pattern matching and create firstInt*secondInt cases?
2016-09-05 21:58:39	dunkel	[07:44:12] firstInt*secondInt < I meant the possibilities of each, not the values
2016-09-05 21:58:39	funrep	[10:04:24] hey, im using the parsing combinator library in the stdlib, in haskell you can use do-syntax to compose more complex parsers of simpler ones
2016-09-05 21:58:39	funrep	[10:04:40] is there anything similar in the scala library?
2016-09-05 21:58:39	reactormonk	[10:10:25] there's for-yield
2016-09-05 21:58:39	funrep	[10:18:31] oh ~ is used for sequencing
2016-09-05 21:58:39	Sord	[10:54:10] anyone used OSGI with scala?
2016-09-05 21:58:39	[poe]jdk	[11:04:43] Is Scala.Rx worth learning or is there a better alternative? Should I study it and roll my own instead?
2016-09-05 21:58:39	mszczygiel	[11:06:49] [poe]jdk: I think you might want to give a try to Akka Streams
2016-09-05 21:58:39	reactormonk	[11:08:46] [poe]jdk, or fs2
2016-09-05 21:58:39	[poe]jdk	[11:10:14] thanks!
2016-09-05 21:58:39	SJr	[14:03:23] tpolecat, by much more slowly you mean 5 times more slowly? So it just seems odd to call a red black tree, logarithmic in the documentation when it is log_2 , and then call a Vector constant when it is log_32.
2016-09-05 21:58:39	constant	[14:03:36] SJr: I'd never consider that
2016-09-05 21:58:39	constant	[14:03:45] I don't want to be a piece of wood
2016-09-05 21:58:39	tpolecat	[14:03:52] Sord: yes
2016-09-05 21:58:39	tpolecat	[14:06:30] Sord: there is a bnd plugin for sbt (sbt-osgi)
2016-09-05 21:58:39	tpolecat	[14:06:48] as far as assembling applications there is nothing out there that I know of. we have a custom setup
2016-09-05 21:58:39	tpolecat	[14:07:09] but compiling to a bundle jar is fairly straightforward
2016-09-05 21:58:39	 *	constant [14:08:31] feels ignored :(
2016-09-05 21:58:39	tpolecat	[14:09:49] did you have a question?
2016-09-05 21:58:39	constant	[14:10:30] tpolecat: nah. I was just offended that SJr called me a log
2016-09-05 21:58:39	constant	[14:10:31] :)
2016-09-05 21:58:39	tpolecat	[14:10:52] it's log log log
2016-09-05 21:58:39	kueller	[16:51:26] has anyone managed to get tut to work with later versions of sbt-site?
2016-09-05 21:58:39	reactormonk	[18:01:36] ! """$line9.$read$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$Hello"""
2016-09-05 21:58:39	multibot_	[18:01:40]  String = Hello
2016-09-05 21:58:39	reactormonk	[18:01:52] ... I guess that's some string replacement?
2016-09-05 21:58:39	tpolecat	[18:02:42] yeah a repl artifact
2016-09-05 21:58:39	tpolecat	[18:02:46] hack hack hack
2016-09-05 21:58:39	reactormonk	[18:03:11] Know where it is? Need it for tut :D
2016-09-05 21:58:39	tpolecat	[18:04:11] i don't, sorry
2016-09-05 21:58:39	tpolecat	[18:04:16] start in IMain and see where it leads you
2016-09-05 21:58:39	pfn	[18:52:00] wut? 
2016-09-05 21:58:39	absence	[04:19:23] http://scastie.org/22174 <- why doesn't this work?
2016-09-05 21:58:39	mah454	[07:15:34] Hello 
2016-09-05 21:58:39	mah454	[07:15:51] please view this code (This is simple code of my project) : 
2016-09-05 21:58:39	mah454	[07:15:52] http://scastie.org/22176
2016-09-05 21:58:39	mah454	[07:16:02] How can fix line : 22
2016-09-05 21:58:39	mah454	[07:17:24] receive this error : no matching constructor found on class framework.MagicWebService for arguments
2016-09-05 21:58:39	absence	[09:16:58] http://scastie.org/22174 <- why doesn't this work?
2016-09-05 21:58:39	selckin	[09:21:13] why should it work?
2016-09-05 21:58:39	selckin	[09:21:36] you never tell it what T is
2016-09-05 21:58:39	selckin	[09:25:10] i'm very rusty, but doesn't it basicly say something like:  def c: Integer = new Number() {}
2016-09-05 21:58:39	nullremains	[10:40:36] absence: type T <: B is not really necessary given that T <: A already exists in trait F. selckin is right that you haven't yet made T concrete. You could new B{}.asInstanceOf[T] but it depends on what you're use case is.
2016-09-05 21:58:39	gpampara	[10:44:26] and that asInstanceOf is probably gonna break
2016-09-05 21:58:39	nullremains	[10:49:39] gpampara: if B extends A and T <: A then the cast will always work. Definitely not in any way type safe, but when working with abstract type members the compiler won't allow what absence is trying to do without a cast.
2016-09-05 21:58:39	gpampara	[10:50:01] nullremains: sure, in this instance, but I try avoid subverting the type system
2016-09-05 21:58:39	nullremains	[10:56:31] gpampara: likewise, but there are scenarios where a type is only made concrete at a later stage -- I find casting in this case to be actually quite useful as you can provide a default behavior based on the abstract type that is overridable by interface where concrete type is defined.
2016-09-05 21:58:39	circ-user-OBsh3	[11:40:08] How do you call a function which breaks an array into n-neighbour element subarrays? Is there such a collection map function?
2016-09-05 21:58:39	pfn	[11:41:58] sliding? 
2016-09-05 21:58:39	SethTisue	[11:47:46] or `grouped`
2016-09-05 21:58:39	circ-user-OBsh3	[12:07:49] yes, sliding and grouped. Thank you very much :)
2016-09-05 21:58:39	irregular	[12:41:19] http://pastebin.com/wX9SFeSs I have an Iterable Options[Foo] but when I call .toSeq, the type seems to change to only Seq[Foo] losing the Option and then I can't run fooseq:_* on it to input it into a function that takes varargs
2016-09-05 21:58:39	OlegYch|h	[12:48:10] options type is Iterable[Clause]
2016-09-05 21:58:39	irregular	[12:51:48] yes
2016-09-05 21:58:39	irregular	[12:52:44] shouldnt it be Iterable[Option[Clause]] though? I am doing ++ on Some(Clause)'s
2016-09-05 21:58:39	pfn	[12:52:50] no
2016-09-05 21:58:39	pfn	[12:53:21] ! Some(1) ++ None
2016-09-05 21:58:39	multibot_	[12:53:28]  Iterable[Int] = List(1)
2016-09-05 21:58:39	irregular	[12:54:01] my goal is to do :_* to pass into a function taking varargs and :_* seems to need a Seq[Options], what would i do in this case?
2016-09-05 21:58:39	pfn	[12:59:55] ! Seq(Some(1)) ++ Seq(Option.empty[Int])
2016-09-05 21:58:39	multibot_	[12:59:57]  Seq[Option[Int]] = List(Some(1), None)
2016-09-05 21:58:39	pfn	[13:00:12] think of option as a Seq of 0 or 1 value
2016-09-05 21:58:39	irregular	[13:04:30] ah, so each Option needs to be wrapped in a seq
2016-09-05 21:58:39	aupiff	[13:24:23] I am trying to understand what kind of recur
2016-09-05 21:58:39	aupiff	[13:24:31] sive values I can use in scala
2016-09-05 21:58:39	aupiff	[13:24:41] this is something I would write in Haskell: http://lpaste.net/184857
2016-09-05 21:58:39	aupiff	[13:25:18] When I am declaring my own datatype to be an instance of Arbitrary for use with QuickCheck. In scala, however, I can't write this:
2016-09-05 21:58:39	aupiff	[13:26:14] http://lpaste.net/184860
2016-09-05 21:58:39	aupiff	[13:27:22] I'm uneasy writing scala without where / let-in so any feedback about how to idiomatically structure this sort of code would be appreciated.
2016-09-05 21:58:39	tpolecat	[13:28:07] why can't you write it? what's the error?
2016-09-05 21:58:39	OlegYch|h	[13:28:53] probably has to be lazy val
2016-09-05 21:58:39	aupiff	[13:29:57] http://lpaste.net/184862
2016-09-05 21:58:39	aupiff	[13:30:32] that's my error, haven't spent enough time trying to understand it. scala errors are still mysterious to me.
2016-09-05 21:58:39	aupiff	[13:30:52] OlegYch|h: ah! I didn't even remember lazy vals existed, will play around with that
2016-09-05 21:58:39	tpolecat	[13:31:13] I think you probaby don't want .sample there
2016-09-05 21:58:39	aupiff	[13:31:34] tpolecat: oh, duh. thanks
2016-09-05 21:58:39	aupiff	[13:32:18] weird. I didn't have to make genCL a lazy val.
2016-09-05 21:58:39	aupiff	[13:32:45] how does that work? What should I read to understand strictness/laziness in scala?
2016-09-05 21:58:39	aupiff	[13:33:56] and how can I improve this code so taht in case atom is chosen in place of CLApp(appL, appR) that CLApp and its members are never computed? a lazy annotation?
2016-09-05 21:58:39	tpolecat	[13:38:19] i think you would need to gen a boolean higher up and use that to decide whether to gen the L/R/CLapp or not
2016-09-05 21:58:39	aupiff	[13:39:37] tpolecat: mmm, yeah that works. was wondering if there's a way to exploit laziness
2016-09-05 21:58:39	tpolecat	[13:40:10] no, the value passed into flatMap is strict so by the time you get to the final oneOf the L and R are already computed
2016-09-05 21:58:39	tpolecat	[13:40:44] scala is strict; laziness is implemented by lazy val and by-name parameters (thunking really) and it's very easy to get it wrong. so all i can advise is taking care and testing
2016-09-05 21:58:39	aupiff	[13:44:32] I see. thank you!
2016-09-05 21:58:39	tpolecat	[13:47:14] Strict-by-default and lack of general tail call elimination makes FP in Scala challenging.
2016-09-05 21:58:39	tpolecat	[13:47:38] Cats and scalaz have a lot of machinery to work around those limitations.
2016-09-05 21:58:39	aupiff	[13:54:31] do you prefer cats to scalaz?
2016-09-05 21:58:39	tpolecat	[13:56:08] cats is still very unstable so I don't think you can make a fair technical comparison yet
2016-09-05 21:58:39	aupiff	[13:57:41] ah. I just noticed that typelevel seems to be pushing cats more than scalaz on their page
2016-09-05 21:58:39	tpolecat	[13:58:03] scalaz isn't a typelevel project, it's an independent thing
2016-09-05 21:58:39	tpolecat	[13:58:47] cats exists due to disagreements over the code of conduct, which scalaz will not adopt
2016-09-05 21:58:39	tpolecat	[13:59:27] but it's not a fork really, but it incorporates a lot of stuff from scalaz
2016-09-05 21:58:39	aupiff	[13:59:53] what code of conduct?
2016-09-05 21:58:39	tpolecat	[14:00:36] v
2016-09-05 21:58:39	tpolecat	[14:00:37] http://typelevel.org/about
2016-09-05 21:58:39	aupiff	[14:00:43] found it thanks
2016-09-05 21:58:39	tpolecat	[14:03:31] there was an inexcusable attempt to take over scalaz and kick out its founder, which caused a huge blowup
2016-09-05 21:58:39	tpolecat	[14:03:33] huge huge mess
2016-09-05 21:58:39	tpolecat	[14:04:27] i'm a committer to both cats and scalaz but I think I'm the only one
2016-09-05 21:58:39	dibblego	[14:54:52] the code of conduct was a fraud, which was immediately obvious to many, and evidence came about later
2016-09-05 21:58:39	mszczygiel	[15:08:22] dibblego: could you please elaborate on this? (I'm just curious)
2016-09-05 21:58:39	tpolecat	[15:09:57] one of the maintainers installed a code of conduct without consulting the other maintainers, and banned dibblego who was the project's founder
2016-09-05 21:58:39	tpolecat	[15:10:19] this was after affiliating scalaz with typelevel, also without consent of the other maintainers
2016-09-05 21:58:39	tpolecat	[15:10:36] so it was a bad situation
2016-09-05 21:58:39	tpolecat	[15:11:07] my summary anyway
2016-09-05 21:58:39	dibblego	[15:13:19] mszczygiel: one person, who manipulates and bullies people, had a meeting at a conference with another naive and manipulable person and some others, about what to do about removing a person that this manipulative person from the project that this person had been trying to take over since 2007. So they decided that the pretense of a code of conduct was the best way to do that. All the gullible people fell for it (and still have). Others knew 
2016-09-05 21:58:39	dibblego	[15:13:19] immediately it was a hoax. The subsequent behaviour certainly supported that it was hoax (e.g. double standards, etc) and then later was all learned that it was simply a desire to continue a political agenda that had been going on for years, which scalaz was originally created to avoid (and so its premise had been violated anyway).
2016-09-05 21:58:39	tpolecat	[15:17:28] It was more of a toad being boiled situatoin for me, I admit.
2016-09-05 21:58:39	[poe]jdk	[15:18:54] is there a specific way to take a list of monad instances and sequence them so that they're flatmapped in sequential order? ie, Seq(a, b, c) -> a.flatMap(b.flatMap(c)))? Should I just use a fold with flatMap? I'm constructing free DSL objects based on a list of objects received from frontend, and I want to create a program from it (ie Commands ~> Id style interpreter)
2016-09-05 21:58:39	dibblego	[15:19:29] [poe]jdk: .sequence // scalaz
2016-09-05 21:58:39	[poe]jdk	[15:19:48] awesome, thanks dibblego
2016-09-05 21:58:39	[poe]jdk	[15:19:57] scalaz rocks btw :)
2016-09-05 21:58:39	tpolecat	[15:20:24] .sequence would take you List[M[A]] to M[List[A]] ... with any traversable functor like List and applicative functor M
2016-09-05 21:58:39	tpolecat	[15:21:19] you might look at using Free of Command which would give you more structure than a List[Command]
2016-09-05 21:58:39	mszczygiel	[15:31:56] Looks like quite sad situation. As I'm currently learning Cats, by asking above question I created moral dillema in my head. Anyway thanks for explanation
2016-09-05 21:58:39	tpolecat	[15:32:45] you can ask the same question on typelevel/cats on gitter if you like
2016-09-05 21:58:39	tpolecat	[15:33:31] conceptually there's no real difference. there are some implementation differences, and cats is much smaller in scope than scalaz
2016-09-05 21:58:39	tpolecat	[15:34:08] cats is much more volatile so i would not use it until it hits 1.0, although some people are
2016-09-05 21:58:39	dibblego	[15:34:45] mszczygiel: yes, there was a period where the bullying was able to be avoided, and good code could be written, but that is over now. A lot of the good programmers have left scala altogether. Scalaz was well written up to 2013, but then it started to decline. Those same people have now written their own library instead of wrecking scalaz, which is a fancy consolation prize I guess.
2016-09-05 21:58:39	mszczygiel	[15:43:12] So just to be sure I understood it correctly: dibblego is Scalaz founder, and someone removed you from the project (so you're not maintainer anymore), but then I don't understand why Cats were founded.
2016-09-05 21:58:39	dibblego	[15:44:09] mszczygiel: yes, initially, but that theft attempt was rejected, so that is why cats existed (scalaz was unable to be stolen, so just copy/paste from it).
2016-09-05 21:58:39	mszczygiel	[15:45:00] so you still maintain Scalaz? But some programmers left this project to contribute Cats?
2016-09-05 21:58:39	dibblego	[15:45:43] mszczygiel: Correct, although I do my best to not write scala and I have been quite successful at that goal. Other programmers left programming altogether, which is an ultimate goal.
2016-09-05 21:58:39	aupiff	[17:17:25] I am having trouble understanding the scala (cats) equivalent of Haskell's `return`.
2016-09-05 21:58:39	aupiff	[17:17:47] I am working with a Writer monad and all I want to do is `return myVal`
2016-09-05 21:58:39	aupiff	[17:18:49] in order to use `tell`, I had to use WriterT.tell
2016-09-05 21:58:39	aupiff	[17:20:01] and I think the `return` function might be called `value` in WriterT, but I'd like to just keep it simple an use something genereic.
2016-09-05 21:58:39	aupiff	[17:20:21] I've seen some code that looks like `Monad[Option].pure`
2016-09-05 21:58:39	aupiff	[17:21:01] is this necessary with every invocation of `return`? What should the haskeller transitioning to scala know about using the standard functions of a typeclass/
2016-09-05 21:58:39	aupiff	[17:21:04] ?
2016-09-05 21:58:39	tpolecat	[17:21:10] shorthand for Monad.apply[Option].pure
2016-09-05 21:58:39	tpolecat	[17:21:14] there's also syntax
2016-09-05 21:58:39	tpolecat	[17:21:18] ! 42.pure[List]
2016-09-05 21:58:39	multibot_	[17:21:20]  List[Int] = List(42)
2016-09-05 21:58:39	tpolecat	[17:22:13] summoning an instance with Monad[Option] or whatever is fairly infrequent
2016-09-05 21:58:39	aupiff	[17:22:43] how does that .pure[] work?
2016-09-05 21:58:39	aupiff	[17:23:10] in cats could I do 3.pure[Writer[List[String], Int]]?
2016-09-05 21:58:39	adelbertc	[17:23:51] aupiff: it would be 3.pure[Writer[List[String], ?]]
2016-09-05 21:58:39	adelbertc	[17:24:04] where `?` is with the kind-projector plugin
2016-09-05 21:58:39	tpolecat	[17:24:13] ! 42.pure[OptionT[List, ?]]
2016-09-05 21:58:39	multibot_	[17:24:14]  scalaz.OptionT[[+A]List[A],Int] = OptionT(List(Some(42)))
2016-09-05 21:58:39	aupiff	[17:29:47] adelbertc: thanks.
2016-09-05 21:58:39	aupiff	[17:34:10] I am getting stackoverflows with code like http://lpaste.net/184980#line63
2016-09-05 21:58:39	aupiff	[17:34:50] line 63 has a recursive function in the writer monad. should this function be written differently in scala?
2016-09-05 21:58:39	aupiff	[17:36:41] maybe my question really is--how does one write efficient recursive functions in scala? what mechanisms supplied by cats or scalaz aid in this?
2016-09-05 21:58:39	aupiff	[17:37:06] nvm
2016-09-05 21:58:39	aupiff	[17:37:09] I was being dumb
2016-09-05 21:58:39	aupiff	[17:38:00] I am so lost writing scala I make dumb mistakes and think its because I don't no scala and not that I just wrote an obvious infinite loop
2016-09-05 21:58:39	aupiff	[17:38:13] s/no/know/
2016-09-05 21:58:39	aupiff	[17:38:31] s/its/it's/
2016-09-05 21:58:39	***	Playback Complete.
2016-09-05 21:58:53	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-05 21:59:45	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-05 22:02:03	<--	nullremains (~godenji@c-50-138-183-78.hsd1.ma.comcast.net) has quit (Ping timeout: 276 seconds)
2016-09-05 22:02:03	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-05 22:03:16	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-05 22:03:53	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-05 22:04:58	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-05 22:05:27	-->	adolf_stalin (~adolf_sta@2600:8804:6000:283:fcad:45f9:7945:56df) has joined #scala
2016-09-05 22:06:21	-->	DeltaHeavy (~DeltaHeav@unaffiliated/deltaheavy) has joined #scala
2016-09-05 22:07:57	<--	dud (~rk@2a02:1203:ecb5:e1f0:5101:558b:5d1a:5d9e) has quit (Ping timeout: 265 seconds)
2016-09-05 22:08:59	<--	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-05 22:09:07	-->	waqas (~Adium@ec2-52-91-1-253.compute-1.amazonaws.com) has joined #scala
2016-09-05 22:09:54	<--	adolf_stalin (~adolf_sta@2600:8804:6000:283:fcad:45f9:7945:56df) has quit (Ping timeout: 250 seconds)
2016-09-05 22:10:09	-->	adolf_stalin (~adolf_sta@2600:8804:6000:283:4d1d:5317:9aef:96c) has joined #scala
2016-09-05 22:10:11	-->	ganeshraju (~Adium@72.46.219.230) has joined #scala
2016-09-05 22:11:08	<--	hexagoxel (~hexagoxel@p5B29AA6E.dip0.t-ipconnect.de) has quit (Ping timeout: 244 seconds)
2016-09-05 22:12:28	-->	Hoffman (~Hoffman@unaffiliated/hoffman) has joined #scala
2016-09-05 22:14:08	-->	hexagoxel (~hexagoxel@p200300798F1CFE00021E33FFFE2231E9.dip0.t-ipconnect.de) has joined #scala
2016-09-05 22:14:14	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2016-09-05 22:14:48	-->	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has joined #scala
2016-09-05 22:19:59	<--	pfurla (~textual@ool-2f12d419.dyn.optonline.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-05 22:21:12	-->	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has joined #scala
2016-09-05 22:21:12	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-05 22:21:16	-->	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-05 22:21:50	<--	ddere (uid110888@gateway/web/irccloud.com/x-hvtqjzxogcihfdgb) has quit (Quit: Connection closed for inactivity)
2016-09-05 22:22:20	<--	Hink (~Hink@45.32.3.47) has quit (Quit: quit from client)
2016-09-05 22:23:23	-->	Hink (~Hink@45.32.3.47) has joined #scala
2016-09-05 22:26:47	--	irc: disconnected from server
2016-09-06 11:21:04	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-06 11:21:04	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-06 11:21:04	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-06 11:21:04	--	Channel #scala: 422 nicks (0 ops, 0 voices, 422 normals)
2016-09-06 11:21:04	***	Buffer Playback...
2016-09-06 11:21:04	jackweirdy	[15:28:58] I'm trying to build a scala-graph HyperEdge with known start and end nodes but arbitrary number of middle nodes. I've tried to Fold across the list of middle nodes but I'm having trouble getting the types to line up. Something like `types.foldLeft(start)(_ ~+> _) ~+> end` doesn't work because the type that fold expects to see returned is the type of start, rather than an edge. Is there either a scala-graph way to do
2016-09-06 11:21:04	jackweirdy	[15:28:58]  this, or a variety of foldLeft which allows the type of the initial value to be different from all of the following ones?
2016-09-06 11:21:04	jackweirdy	[15:49:05] Ah, looks like my trouble was because I was using ~+> in the middle of the fold which adds the label at each point. Just doing ~> in the fold and then ~+> when I add the end node is what I needed 
2016-09-06 11:21:04	[poe]jdk	[15:51:28] any suggestions for a book on reactive programming? Preferrably Scala or Javascript, I'm not quite on the level for Haskell yet (but if there's nothing comparable I can deal with Haskell)
2016-09-06 11:21:04	[poe]jdk	[15:51:42] functional reactive programming, I mean.*
2016-09-06 11:21:04	[poe]jdk	[16:02:07] alternatively if there are any good free options to read online I'm game for that too.
2016-09-06 11:21:04	Sord	[16:24:59] Hi... I am trying to getting started with IntelliJ IDEA with SBT.
2016-09-06 11:21:04	Sord	[16:25:32] It seems to be able to get depedencies greatly but I have no idea how to create .jar package with idea plugin
2016-09-06 11:21:04	reactormonk	[16:25:50] I'd just run package from the sbt command line, but that's me.
2016-09-06 11:21:04	Sord	[16:26:39] reactormonk, I tried that too but I get null pointer exception from sbt
2016-09-06 11:21:04	Sord	[16:27:27] plain new SBT project created with idea
2016-09-06 11:21:04	Sord	[16:27:45] I putted "sbt" (or sbt --help) to terminal
2016-09-06 11:21:04	Sord	[16:28:25] [info] Loading project definition from [PROJECT PATH]/project
2016-09-06 11:21:04	Sord	[16:28:25] java.lang.NullPointerException
2016-09-06 11:21:04	Sord	[16:28:25] 	at java.util.regex.Matcher.getTextLength(java.base@9-internal/Matcher.java:1747)
2016-09-06 11:21:04	Sord	[16:28:49] wtf there is happening
2016-09-06 11:21:04	Sord	[16:28:50] :D
2016-09-06 11:21:04	Sord	[16:29:09] (working on ubuntu)
2016-09-06 11:21:04	OlegYch_	[16:32:59] wild guess - your project name/path is fucked up
2016-09-06 11:21:04	OlegYch_	[16:35:33] could you share the build definition?
2016-09-06 11:21:04	Sord	[16:38:13] OlegYch_, technically path should be ok since working folder of terminal was project root already
2016-09-06 11:21:04	Sord	[16:38:39] however there was one folder with space and after renaming I am getting difrent error
2016-09-06 11:21:04	Sord	[16:40:05] now it is: error: error while loading package, Missing dependency 'object java.lang.Object in compiler mirror', required by /home/USERNAME/.sbt/boot/scala-2.10.4/lib/scala-library.jar(scala/package.class)
2016-09-06 11:21:04	OlegYch_	[16:41:10] um dunno
2016-09-06 11:21:04	Sord	[16:41:18] build.sbt include just: name := "sbttestA" version := "1.0" scalaVersion := "2.11.8"
2016-09-06 11:21:04	OlegYch_	[16:41:55] might be something with your jvm setup
2016-09-06 11:21:04	Sord	[16:41:58] good question is that is this going forward or backward...
2016-09-06 11:21:04	OlegYch_	[16:42:19] delete project/target though just to be sure
2016-09-06 11:21:04	Sord	[16:44:01] I deleted all the target folders and same result
2016-09-06 11:21:04	Sord	[16:44:33] is that a good thing that my project is targeting to scala 2.11.8 but scala 2.10.4 is mentioned in sbt error?
2016-09-06 11:21:04	OlegYch_	[16:45:12] yes that's ok
2016-09-06 11:21:04	OlegYch_	[16:45:23] delete ~/.sbt ь
2016-09-06 11:21:04	OlegYch_	[16:45:26] maybe
2016-09-06 11:21:04	OlegYch_	[16:46:43] otherwise it seems like your jvm or sbt package is really borked
2016-09-06 11:21:04	OlegYch_	[16:46:52] happens a lot to linux packages
2016-09-06 11:21:04	OlegYch_	[16:47:26] i'd advise to use oracle jvm and http://www.scala-sbt.org/0.13/docs/Manual-Installation.html
2016-09-06 11:21:04	OlegYch_	[16:50:29] https://github.com/paulp/sbt-extras is also good
2016-09-06 11:21:04	Sord	[16:54:35] OlegYch_, thanks for tips
2016-09-06 11:21:04	Sord	[16:55:37] ok after installing oracle jvm its magically start working
2016-09-06 11:21:04	Sord	[16:59:08] I am little bit out of my comfort zone here
2016-09-06 11:21:04	OlegYch_	[16:59:28] yay
2016-09-06 11:21:04	 *	Sord [16:59:33] is Windows .Net dev
2016-09-06 11:21:04	OlegYch_	[17:01:45] windoes is great
2016-09-06 11:21:04	OlegYch_	[17:01:59] it doesn't have broken linux packages
2016-09-06 11:21:04	nullremains	[17:02:55] well, this is a surprise: https://groups.google.com/forum/#!topic/scala-internals/JslA9u20mow
2016-09-06 11:21:04	OlegYch_	[17:04:10] sneaky
2016-09-06 11:21:04	nullremains	[17:05:02] thought RC1 was going to be delayed due to the 20% slow down wrt to default methods
2016-09-06 11:21:04	manyu4rime	[17:13:57] japhar81 please provide me with mailing list of scala
2016-09-06 11:21:04	manyu4rime	[17:15:38] aupiff please provide  easy bugs regarding scala
2016-09-06 11:21:04	schos	[18:30:40] I'm trying to get parser combinators to work. Anyone can help make http://pastebin.com/JBkxS5g9 compile?
2016-09-06 11:21:04	OlegYch_	[18:32:56] wild guess - def foo = bar.map(FooBar) | baz.map(FooBaz)
2016-09-06 11:21:04	schos	[18:34:47] def foo = bar.map(_.asInstanceOf[Foo]) | baz.map(_.asInstanceOf[Foo]) works
2016-09-06 11:21:04	schos	[18:35:16] kinda weird behaviour though
2016-09-06 11:21:04	schos	[18:36:30] it compiles, but it cannot be cast
2016-09-06 11:21:04	OlegYch_	[18:36:31] um i doubt that works
2016-09-06 11:21:04	OlegYch_	[18:36:36] exactly
2016-09-06 11:21:04	schos	[18:38:14] yours just say "not found: value Foo" :/
2016-09-06 11:21:04	schos	[18:39:53] okay
2016-09-06 11:21:04	schos	[18:40:06] dunno why, but FooBar and FooBaz as regular classes works
2016-09-06 11:21:04	schos	[18:48:12] I'm either not using them right or they are a mess to use
2016-09-06 11:21:04	schos	[18:48:27] scala parser combinators that is
2016-09-06 11:21:04	dibblego	[18:49:56] The scala parser combinator library is very poorly designed. It's not just you.
2016-09-06 11:21:04	OlegYch_	[18:58:17] it is just a collection of pure functions though
2016-09-06 11:21:04	dibblego	[19:08:44] that "try to blend with OO", they are quite a pain to get working, and when you eventually do, the performance is rubbish
2016-09-06 11:21:04	dibblego	[19:13:02] here is the original argonaut, which uses scala parser combinators for prototyping, https://github.com/argonaut-io/argonaut/blob/b6142542f463fa060a325c0e9ab1d3551337e27f/src/main/scala/com/ephox/argonaut/JsonParser.scala
2016-09-06 11:21:04	SJr	[21:31:30] Um, question: "Vector is a collection type (introduced in Scala 2.8) that addresses the inefficiency for random access on lists. Vectors allow accessing any element of the list in effectively constant time".  (http://docs.scala-lang.org/overviews/collections/concrete-immutable-collection-classes.html#vectors) 
2016-09-06 11:21:04	SJr	[21:32:52] From the descripting it gives, where it is a tree, storing up to 32 elements, and then having multiple depths, so that 2^5 elements is 1 access, 2^10 is 2 accesses, 2^15 3,  2^20 = 4... "So for all vectors of reasonable size, an element selection involves up to 5 primitive array selections. This is what we meant when we wrote that element access is effectively constant time."
2016-09-06 11:21:04	SJr	[21:33:07] Does "effectively constant time" mean "logarithmic" then?
2016-09-06 11:21:04	adelbertc	[21:38:22] @SJr log32 or something like that, yeah
2016-09-06 11:21:04	lambdabot	[21:38:22] Yeh scurvy dog...
2016-09-06 11:21:04	SJr	[21:40:15] So when it says "Vectors allow accessing any element of the list in effectively constant time. Its a larger constant than for access to the head of a list or for reading an element of an array, but its a constant nonetheless" that would be incorrect.
2016-09-06 11:21:04	dibblego	[23:19:27] you're right it's not constant-time
2016-09-06 11:21:04	[poe]jdk	[23:31:28] any suggestions for reading up on functional reactive programming? Books or free online materials? Would prefer javascript / Scala if possible, but not adverse to others
2016-09-06 11:21:04	tpolecat	[01:29:06] SJr: it's constant time in that its upper bound is log32(Int.MaxValue) which isn't very big. just call that 1 and sometimes you do better
2016-09-06 11:21:04	SJr	[01:34:30] I guess, I just don't see why you just wouldn't say "very fast" as opposed to spending a paragraph defining "effectively constant" which a book (functional programming in Scala), then drops the effectively and states that Vectors are constant time, which is just incorrect.
2016-09-06 11:21:04	tpolecat	[01:39:32] The argument is that the difference between O(1) and O(log32 n) where n is bounded isn't worth worrying about.
2016-09-06 11:21:04	tpolecat	[01:39:55] You can compute the worst case and call it 1,
2016-09-06 11:21:04	dibblego	[01:44:46] embellishment is trendy
2016-09-06 11:21:04	SJr	[02:11:59] tpolecat, I guess, but that argument just seems equally applicable to an array based heap or self balancing binary tree, since depth will just be log_2(Int.MaxValue).
2016-09-06 11:21:04	tpolecat	[02:14:40] right. log32 just grows much more slowly
2016-09-06 11:21:04	lkso	[05:14:48] how do i play a wav file in a scala/swing program?
2016-09-06 11:21:04	lkso	[05:17:10] i get: Exception in thread "AWT-EventQueue-1" java.lang.IllegalArgumentException: Invalid format
2016-09-06 11:21:04	lkso	[05:17:19] when doing: val audioInputStream = AudioSystem.getAudioInputStream(new java.io.File(s))
2016-09-06 11:21:04	Sord	[06:00:55] lkso, does exception really come from exactly from getAudioInputStream?
2016-09-06 11:21:04	Sord	[06:01:06] and are you sure that file is loaded correctly
2016-09-06 11:21:04	lkso	[06:02:35] Sord: wait let me try again with a minimal code example (do you have an example?)
2016-09-06 11:21:04	lkso	[06:08:56] Sord: http://scastie.org/22166
2016-09-06 11:21:04	lkso	[06:10:55] does anyone one know why the code above returns exception Exception in thread "AWT-EventQueue-1" java.lang.IllegalArgumentException: Invalid format
2016-09-06 11:21:04	lkso	[06:11:01] i'm on linux if this helps 
2016-09-06 11:21:04	Sord	[06:17:22] lkso, if file is good I have no idea
2016-09-06 11:21:04	lkso	[06:17:45] Sord: does the code work for you?
2016-09-06 11:21:04	Sord	[06:18:09] just googled invalid exception but those other cases it was thrown on later phase
2016-09-06 11:21:04	Sord	[06:19:01] lkso, sorry I haven't time to test right now =/ need to leave very soon
2016-09-06 11:21:04	Sord	[06:21:24] Have somebody any idea with OSGI and SBT combo? If soneone can help with converting this simple  project from Maven to SBT I can throw you 50€/$
2016-09-06 11:21:04	Sord	[06:21:25] https://github.com/protegeproject/protege-plugin-examples
2016-09-06 11:21:04	lkso	[06:21:46] np
2016-09-06 11:21:04	Sord	[06:21:49] (Code is already transformed from java to scala, problem is building tools)
2016-09-06 11:21:04	Sord	[06:22:06] will be back later...
2016-09-06 11:21:04	dunkel	[07:42:27] If I have a List[(Int, Int)] and for each item I need to create a subclass of Foo depending on the first int and override a method (inherited from Foo, all have the same arguments) in that subclass depending on the second int. Is there a better way than to use pattern matching and create firstInt*secondInt cases?
2016-09-06 11:21:04	dunkel	[07:44:12] firstInt*secondInt < I meant the possibilities of each, not the values
2016-09-06 11:21:04	funrep	[10:04:24] hey, im using the parsing combinator library in the stdlib, in haskell you can use do-syntax to compose more complex parsers of simpler ones
2016-09-06 11:21:04	funrep	[10:04:40] is there anything similar in the scala library?
2016-09-06 11:21:04	reactormonk	[10:10:25] there's for-yield
2016-09-06 11:21:04	funrep	[10:18:31] oh ~ is used for sequencing
2016-09-06 11:21:04	Sord	[10:54:10] anyone used OSGI with scala?
2016-09-06 11:21:04	[poe]jdk	[11:04:43] Is Scala.Rx worth learning or is there a better alternative? Should I study it and roll my own instead?
2016-09-06 11:21:04	mszczygiel	[11:06:49] [poe]jdk: I think you might want to give a try to Akka Streams
2016-09-06 11:21:04	reactormonk	[11:08:46] [poe]jdk, or fs2
2016-09-06 11:21:04	[poe]jdk	[11:10:14] thanks!
2016-09-06 11:21:04	SJr	[14:03:23] tpolecat, by much more slowly you mean 5 times more slowly? So it just seems odd to call a red black tree, logarithmic in the documentation when it is log_2 , and then call a Vector constant when it is log_32.
2016-09-06 11:21:04	constant	[14:03:36] SJr: I'd never consider that
2016-09-06 11:21:04	constant	[14:03:45] I don't want to be a piece of wood
2016-09-06 11:21:04	tpolecat	[14:03:52] Sord: yes
2016-09-06 11:21:04	tpolecat	[14:06:30] Sord: there is a bnd plugin for sbt (sbt-osgi)
2016-09-06 11:21:04	tpolecat	[14:06:48] as far as assembling applications there is nothing out there that I know of. we have a custom setup
2016-09-06 11:21:04	tpolecat	[14:07:09] but compiling to a bundle jar is fairly straightforward
2016-09-06 11:21:04	 *	constant [14:08:31] feels ignored :(
2016-09-06 11:21:04	tpolecat	[14:09:49] did you have a question?
2016-09-06 11:21:04	constant	[14:10:30] tpolecat: nah. I was just offended that SJr called me a log
2016-09-06 11:21:04	constant	[14:10:31] :)
2016-09-06 11:21:04	tpolecat	[14:10:52] it's log log log
2016-09-06 11:21:04	kueller	[16:51:26] has anyone managed to get tut to work with later versions of sbt-site?
2016-09-06 11:21:04	reactormonk	[18:01:36] ! """$line9.$read$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$Hello"""
2016-09-06 11:21:04	multibot_	[18:01:40]  String = Hello
2016-09-06 11:21:04	reactormonk	[18:01:52] ... I guess that's some string replacement?
2016-09-06 11:21:04	tpolecat	[18:02:42] yeah a repl artifact
2016-09-06 11:21:04	tpolecat	[18:02:46] hack hack hack
2016-09-06 11:21:04	reactormonk	[18:03:11] Know where it is? Need it for tut :D
2016-09-06 11:21:04	tpolecat	[18:04:11] i don't, sorry
2016-09-06 11:21:04	tpolecat	[18:04:16] start in IMain and see where it leads you
2016-09-06 11:21:04	pfn	[18:52:00] wut? 
2016-09-06 11:21:04	absence	[04:19:23] http://scastie.org/22174 <- why doesn't this work?
2016-09-06 11:21:04	mah454	[07:15:34] Hello 
2016-09-06 11:21:04	mah454	[07:15:51] please view this code (This is simple code of my project) : 
2016-09-06 11:21:04	mah454	[07:15:52] http://scastie.org/22176
2016-09-06 11:21:04	mah454	[07:16:02] How can fix line : 22
2016-09-06 11:21:04	mah454	[07:17:24] receive this error : no matching constructor found on class framework.MagicWebService for arguments
2016-09-06 11:21:04	absence	[09:16:58] http://scastie.org/22174 <- why doesn't this work?
2016-09-06 11:21:04	selckin	[09:21:13] why should it work?
2016-09-06 11:21:04	selckin	[09:21:36] you never tell it what T is
2016-09-06 11:21:04	selckin	[09:25:10] i'm very rusty, but doesn't it basicly say something like:  def c: Integer = new Number() {}
2016-09-06 11:21:04	nullremains	[10:40:36] absence: type T <: B is not really necessary given that T <: A already exists in trait F. selckin is right that you haven't yet made T concrete. You could new B{}.asInstanceOf[T] but it depends on what you're use case is.
2016-09-06 11:21:04	gpampara	[10:44:26] and that asInstanceOf is probably gonna break
2016-09-06 11:21:04	nullremains	[10:49:39] gpampara: if B extends A and T <: A then the cast will always work. Definitely not in any way type safe, but when working with abstract type members the compiler won't allow what absence is trying to do without a cast.
2016-09-06 11:21:04	gpampara	[10:50:01] nullremains: sure, in this instance, but I try avoid subverting the type system
2016-09-06 11:21:04	nullremains	[10:56:31] gpampara: likewise, but there are scenarios where a type is only made concrete at a later stage -- I find casting in this case to be actually quite useful as you can provide a default behavior based on the abstract type that is overridable by interface where concrete type is defined.
2016-09-06 11:21:04	circ-user-OBsh3	[11:40:08] How do you call a function which breaks an array into n-neighbour element subarrays? Is there such a collection map function?
2016-09-06 11:21:04	pfn	[11:41:58] sliding? 
2016-09-06 11:21:04	SethTisue	[11:47:46] or `grouped`
2016-09-06 11:21:04	circ-user-OBsh3	[12:07:49] yes, sliding and grouped. Thank you very much :)
2016-09-06 11:21:04	irregular	[12:41:19] http://pastebin.com/wX9SFeSs I have an Iterable Options[Foo] but when I call .toSeq, the type seems to change to only Seq[Foo] losing the Option and then I can't run fooseq:_* on it to input it into a function that takes varargs
2016-09-06 11:21:04	OlegYch|h	[12:48:10] options type is Iterable[Clause]
2016-09-06 11:21:04	irregular	[12:51:48] yes
2016-09-06 11:21:04	irregular	[12:52:44] shouldnt it be Iterable[Option[Clause]] though? I am doing ++ on Some(Clause)'s
2016-09-06 11:21:04	pfn	[12:52:50] no
2016-09-06 11:21:04	pfn	[12:53:21] ! Some(1) ++ None
2016-09-06 11:21:04	multibot_	[12:53:28]  Iterable[Int] = List(1)
2016-09-06 11:21:04	irregular	[12:54:01] my goal is to do :_* to pass into a function taking varargs and :_* seems to need a Seq[Options], what would i do in this case?
2016-09-06 11:21:04	pfn	[12:59:55] ! Seq(Some(1)) ++ Seq(Option.empty[Int])
2016-09-06 11:21:04	multibot_	[12:59:57]  Seq[Option[Int]] = List(Some(1), None)
2016-09-06 11:21:04	pfn	[13:00:12] think of option as a Seq of 0 or 1 value
2016-09-06 11:21:04	irregular	[13:04:30] ah, so each Option needs to be wrapped in a seq
2016-09-06 11:21:04	aupiff	[13:24:23] I am trying to understand what kind of recur
2016-09-06 11:21:04	aupiff	[13:24:31] sive values I can use in scala
2016-09-06 11:21:04	aupiff	[13:24:41] this is something I would write in Haskell: http://lpaste.net/184857
2016-09-06 11:21:04	aupiff	[13:25:18] When I am declaring my own datatype to be an instance of Arbitrary for use with QuickCheck. In scala, however, I can't write this:
2016-09-06 11:21:04	aupiff	[13:26:14] http://lpaste.net/184860
2016-09-06 11:21:04	aupiff	[13:27:22] I'm uneasy writing scala without where / let-in so any feedback about how to idiomatically structure this sort of code would be appreciated.
2016-09-06 11:21:04	tpolecat	[13:28:07] why can't you write it? what's the error?
2016-09-06 11:21:04	OlegYch|h	[13:28:53] probably has to be lazy val
2016-09-06 11:21:04	aupiff	[13:29:57] http://lpaste.net/184862
2016-09-06 11:21:04	aupiff	[13:30:32] that's my error, haven't spent enough time trying to understand it. scala errors are still mysterious to me.
2016-09-06 11:21:04	aupiff	[13:30:52] OlegYch|h: ah! I didn't even remember lazy vals existed, will play around with that
2016-09-06 11:21:04	tpolecat	[13:31:13] I think you probaby don't want .sample there
2016-09-06 11:21:04	aupiff	[13:31:34] tpolecat: oh, duh. thanks
2016-09-06 11:21:04	aupiff	[13:32:18] weird. I didn't have to make genCL a lazy val.
2016-09-06 11:21:04	aupiff	[13:32:45] how does that work? What should I read to understand strictness/laziness in scala?
2016-09-06 11:21:04	aupiff	[13:33:56] and how can I improve this code so taht in case atom is chosen in place of CLApp(appL, appR) that CLApp and its members are never computed? a lazy annotation?
2016-09-06 11:21:04	tpolecat	[13:38:19] i think you would need to gen a boolean higher up and use that to decide whether to gen the L/R/CLapp or not
2016-09-06 11:21:04	aupiff	[13:39:37] tpolecat: mmm, yeah that works. was wondering if there's a way to exploit laziness
2016-09-06 11:21:04	tpolecat	[13:40:10] no, the value passed into flatMap is strict so by the time you get to the final oneOf the L and R are already computed
2016-09-06 11:21:04	tpolecat	[13:40:44] scala is strict; laziness is implemented by lazy val and by-name parameters (thunking really) and it's very easy to get it wrong. so all i can advise is taking care and testing
2016-09-06 11:21:04	aupiff	[13:44:32] I see. thank you!
2016-09-06 11:21:04	tpolecat	[13:47:14] Strict-by-default and lack of general tail call elimination makes FP in Scala challenging.
2016-09-06 11:21:04	tpolecat	[13:47:38] Cats and scalaz have a lot of machinery to work around those limitations.
2016-09-06 11:21:04	aupiff	[13:54:31] do you prefer cats to scalaz?
2016-09-06 11:21:04	tpolecat	[13:56:08] cats is still very unstable so I don't think you can make a fair technical comparison yet
2016-09-06 11:21:04	aupiff	[13:57:41] ah. I just noticed that typelevel seems to be pushing cats more than scalaz on their page
2016-09-06 11:21:04	tpolecat	[13:58:03] scalaz isn't a typelevel project, it's an independent thing
2016-09-06 11:21:04	tpolecat	[13:58:47] cats exists due to disagreements over the code of conduct, which scalaz will not adopt
2016-09-06 11:21:04	tpolecat	[13:59:27] but it's not a fork really, but it incorporates a lot of stuff from scalaz
2016-09-06 11:21:04	aupiff	[13:59:53] what code of conduct?
2016-09-06 11:21:04	tpolecat	[14:00:36] v
2016-09-06 11:21:04	tpolecat	[14:00:37] http://typelevel.org/about
2016-09-06 11:21:04	aupiff	[14:00:43] found it thanks
2016-09-06 11:21:04	tpolecat	[14:03:31] there was an inexcusable attempt to take over scalaz and kick out its founder, which caused a huge blowup
2016-09-06 11:21:04	tpolecat	[14:03:33] huge huge mess
2016-09-06 11:21:04	tpolecat	[14:04:27] i'm a committer to both cats and scalaz but I think I'm the only one
2016-09-06 11:21:04	dibblego	[14:54:52] the code of conduct was a fraud, which was immediately obvious to many, and evidence came about later
2016-09-06 11:21:04	mszczygiel	[15:08:22] dibblego: could you please elaborate on this? (I'm just curious)
2016-09-06 11:21:04	tpolecat	[15:09:57] one of the maintainers installed a code of conduct without consulting the other maintainers, and banned dibblego who was the project's founder
2016-09-06 11:21:04	tpolecat	[15:10:19] this was after affiliating scalaz with typelevel, also without consent of the other maintainers
2016-09-06 11:21:04	tpolecat	[15:10:36] so it was a bad situation
2016-09-06 11:21:04	tpolecat	[15:11:07] my summary anyway
2016-09-06 11:21:04	dibblego	[15:13:19] mszczygiel: one person, who manipulates and bullies people, had a meeting at a conference with another naive and manipulable person and some others, about what to do about removing a person that this manipulative person from the project that this person had been trying to take over since 2007. So they decided that the pretense of a code of conduct was the best way to do that. All the gullible people fell for it (and still have). Others knew 
2016-09-06 11:21:04	dibblego	[15:13:19] immediately it was a hoax. The subsequent behaviour certainly supported that it was hoax (e.g. double standards, etc) and then later was all learned that it was simply a desire to continue a political agenda that had been going on for years, which scalaz was originally created to avoid (and so its premise had been violated anyway).
2016-09-06 11:21:04	tpolecat	[15:17:28] It was more of a toad being boiled situatoin for me, I admit.
2016-09-06 11:21:04	[poe]jdk	[15:18:54] is there a specific way to take a list of monad instances and sequence them so that they're flatmapped in sequential order? ie, Seq(a, b, c) -> a.flatMap(b.flatMap(c)))? Should I just use a fold with flatMap? I'm constructing free DSL objects based on a list of objects received from frontend, and I want to create a program from it (ie Commands ~> Id style interpreter)
2016-09-06 11:21:04	dibblego	[15:19:29] [poe]jdk: .sequence // scalaz
2016-09-06 11:21:04	[poe]jdk	[15:19:48] awesome, thanks dibblego
2016-09-06 11:21:04	[poe]jdk	[15:19:57] scalaz rocks btw :)
2016-09-06 11:21:04	tpolecat	[15:20:24] .sequence would take you List[M[A]] to M[List[A]] ... with any traversable functor like List and applicative functor M
2016-09-06 11:21:04	tpolecat	[15:21:19] you might look at using Free of Command which would give you more structure than a List[Command]
2016-09-06 11:21:04	mszczygiel	[15:31:56] Looks like quite sad situation. As I'm currently learning Cats, by asking above question I created moral dillema in my head. Anyway thanks for explanation
2016-09-06 11:21:04	tpolecat	[15:32:45] you can ask the same question on typelevel/cats on gitter if you like
2016-09-06 11:21:04	tpolecat	[15:33:31] conceptually there's no real difference. there are some implementation differences, and cats is much smaller in scope than scalaz
2016-09-06 11:21:04	tpolecat	[15:34:08] cats is much more volatile so i would not use it until it hits 1.0, although some people are
2016-09-06 11:21:04	dibblego	[15:34:45] mszczygiel: yes, there was a period where the bullying was able to be avoided, and good code could be written, but that is over now. A lot of the good programmers have left scala altogether. Scalaz was well written up to 2013, but then it started to decline. Those same people have now written their own library instead of wrecking scalaz, which is a fancy consolation prize I guess.
2016-09-06 11:21:04	mszczygiel	[15:43:12] So just to be sure I understood it correctly: dibblego is Scalaz founder, and someone removed you from the project (so you're not maintainer anymore), but then I don't understand why Cats were founded.
2016-09-06 11:21:04	dibblego	[15:44:09] mszczygiel: yes, initially, but that theft attempt was rejected, so that is why cats existed (scalaz was unable to be stolen, so just copy/paste from it).
2016-09-06 11:21:04	mszczygiel	[15:45:00] so you still maintain Scalaz? But some programmers left this project to contribute Cats?
2016-09-06 11:21:04	dibblego	[15:45:43] mszczygiel: Correct, although I do my best to not write scala and I have been quite successful at that goal. Other programmers left programming altogether, which is an ultimate goal.
2016-09-06 11:21:04	aupiff	[17:17:25] I am having trouble understanding the scala (cats) equivalent of Haskell's `return`.
2016-09-06 11:21:04	aupiff	[17:17:47] I am working with a Writer monad and all I want to do is `return myVal`
2016-09-06 11:21:04	aupiff	[17:18:49] in order to use `tell`, I had to use WriterT.tell
2016-09-06 11:21:04	aupiff	[17:20:01] and I think the `return` function might be called `value` in WriterT, but I'd like to just keep it simple an use something genereic.
2016-09-06 11:21:04	aupiff	[17:20:21] I've seen some code that looks like `Monad[Option].pure`
2016-09-06 11:21:04	aupiff	[17:21:01] is this necessary with every invocation of `return`? What should the haskeller transitioning to scala know about using the standard functions of a typeclass/
2016-09-06 11:21:04	aupiff	[17:21:04] ?
2016-09-06 11:21:04	tpolecat	[17:21:10] shorthand for Monad.apply[Option].pure
2016-09-06 11:21:04	tpolecat	[17:21:14] there's also syntax
2016-09-06 11:21:04	tpolecat	[17:21:18] ! 42.pure[List]
2016-09-06 11:21:04	multibot_	[17:21:20]  List[Int] = List(42)
2016-09-06 11:21:04	tpolecat	[17:22:13] summoning an instance with Monad[Option] or whatever is fairly infrequent
2016-09-06 11:21:04	aupiff	[17:22:43] how does that .pure[] work?
2016-09-06 11:21:04	aupiff	[17:23:10] in cats could I do 3.pure[Writer[List[String], Int]]?
2016-09-06 11:21:04	adelbertc	[17:23:51] aupiff: it would be 3.pure[Writer[List[String], ?]]
2016-09-06 11:21:04	adelbertc	[17:24:04] where `?` is with the kind-projector plugin
2016-09-06 11:21:04	tpolecat	[17:24:13] ! 42.pure[OptionT[List, ?]]
2016-09-06 11:21:04	multibot_	[17:24:14]  scalaz.OptionT[[+A]List[A],Int] = OptionT(List(Some(42)))
2016-09-06 11:21:04	aupiff	[17:29:47] adelbertc: thanks.
2016-09-06 11:21:04	aupiff	[17:34:10] I am getting stackoverflows with code like http://lpaste.net/184980#line63
2016-09-06 11:21:04	aupiff	[17:34:50] line 63 has a recursive function in the writer monad. should this function be written differently in scala?
2016-09-06 11:21:04	aupiff	[17:36:41] maybe my question really is--how does one write efficient recursive functions in scala? what mechanisms supplied by cats or scalaz aid in this?
2016-09-06 11:21:04	aupiff	[17:37:06] nvm
2016-09-06 11:21:04	aupiff	[17:37:09] I was being dumb
2016-09-06 11:21:04	aupiff	[17:38:00] I am so lost writing scala I make dumb mistakes and think its because I don't no scala and not that I just wrote an obvious infinite loop
2016-09-06 11:21:04	aupiff	[17:38:13] s/no/know/
2016-09-06 11:21:04	aupiff	[17:38:31] s/its/it's/
2016-09-06 11:21:04	ztaylor54	[23:07:06] Can someone help me with sbt on IntelliJ?
2016-09-06 11:21:04	aloiscochard	[05:19:15] did anyone got some classnotfoundexception when using spark? it feel like cross compilation issue (saying scala.Some is not found), does that ring a bell?
2016-09-06 11:21:04	aloiscochard	[05:19:25] we checked the deps, and they are all define with double %
2016-09-06 11:21:04	gothos	[05:21:09] aloiscochard: what version(s) are you using? to compile and to run?
2016-09-06 11:21:04	aloiscochard	[05:21:40] gothos: initially 1.6.1, but we tried upgrading to 2.0.0, same issue
2016-09-06 11:21:04	gothos	[05:22:27] the weird thing is scala.Some never moved, can you reproduce with a small example?
2016-09-06 11:21:04	aloiscochard	[05:27:14] gothos: unsure yet, we are trying to isolate. I'll double check the classnotfoundexception.
2016-09-06 11:21:04	 *	aloiscochard [05:29:19] I'm getting:
2016-09-06 11:21:04	aloiscochard	[05:29:24] 11:27:45.367 ERROR org.apache.spark.executor.Executor - Exception in task 0.0 in stage 0.0 (TID 0)
2016-09-06 11:21:04	aloiscochard	[05:29:24] java.io.IOException: java.lang.ClassNotFoundException: scala.Some
2016-09-06 11:21:04	aloiscochard	[05:29:24]     at org.apache.spark.util.Utils$.tryOrIOException(Utils.scala:1207) ~[spark-core_2.11-1.6.1.jar:1.6.1]
2016-09-06 11:21:04	gothos	[05:33:10] Only thing that makes sense to me is a difference in scala versions 2.10 vs 2.11
2016-09-06 11:21:04	aloiscochard	[05:34:38] gothos: yeah indeed, that's what my intuition was telling me... but I can't find a dep with an explicit scala version :-(
2016-09-06 11:21:04	aloiscochard	[05:34:44] thanks for helping anyway, appreciated
2016-09-06 11:21:04	aloiscochard	[05:35:15] I have also "Could not deserialize TaskEndReason: ClassNotFound with classloader" after
2016-09-06 11:21:04	aloiscochard	[05:35:20] fucking reflection
2016-09-06 11:21:04	gothos	[05:36:01] spark is full of that, writing some generic methods for spark api is a nightmare
2016-09-06 11:21:04	[poe]jdk	[09:41:48] I hear a lot about Apache Spark in here, what would I use that for if I were to learn it? 
2016-09-06 11:21:04	reactormonk	[09:42:49] [poe]jdk, frameless
2016-09-06 11:21:04	[poe]jdk	[09:45:31] ah, cool. I don't know much about it, guess I'll dive in head first and have a look. Thanks :)
2016-09-06 11:21:04	gothos	[09:47:22] reactormonk: why? Especially with the Dataset API? I know a few things missing from the Spark API, but frameless doesn't help one bit there
2016-09-06 11:21:04	reactormonk	[09:49:50] gothos, like?
2016-09-06 11:21:04	gothos	[09:50:20] reactormonk: fold, some operations for typed columns
2016-09-06 11:21:04	gothos	[09:50:24] for instance
2016-09-06 11:21:04	gothos	[09:52:00] that also reminds me that Dataset do not have a isEmpty, rdds do, but all that should be implemented for efficiently. rdd.isEmpty always goes through all of my data for some reason, super annoying
2016-09-06 11:21:04	andreoss	[10:44:18] i keep getting errors like this with sbt `org.ensime#sbt-ensime;1.9.1-SNAPSHOT: not found`
2016-09-06 11:21:04	andreoss	[10:45:32] it happens only when i try to run some of ensime commands
2016-09-06 11:21:04	OlegYch_	[10:57:24] probably missing snapshot resolver for sbt-ensime
2016-09-06 11:21:04	andreoss	[10:59:21] OlegYch_: it's there, also the same error with stable version of ensime
2016-09-06 11:21:04	andreoss	[11:06:16] it tries to access  https://repo1.maven.org/maven2/org/ensime/sbt-ensime_2.11_0.13/1.0.0/sbt-ensime-1.0.0.pom, but it's 404
2016-09-06 11:21:04	andreoss	[11:06:19] should it be?
2016-09-06 11:21:04	OlegYch_	[11:08:08] why 1.0.0?
2016-09-06 11:21:04	andreoss	[11:09:05] copied from ensime site
2016-09-06 11:21:04	andreoss	[11:16:24] it worked but only with 0.4.0
2016-09-06 11:21:04	***	Playback Complete.
2016-09-06 11:21:21	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-06 11:22:41	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 11:23:42	-->	Jacoby6000 (~Jacoby600@199.20.32.21) has joined #scala
2016-09-06 11:23:43	<--	overlord_tm (~andraz@5-255-217-91.xlab.si) has quit (Ping timeout: 252 seconds)
2016-09-06 11:24:11	<--	xnavor (~xnavor@2001:67c:22e0:1001::18f8) has quit (Ping timeout: 250 seconds)
2016-09-06 11:24:13	<--	andreoss (~user@109.188.125.7) has left #scala ("ERC (IRC client for Emacs 25.1.50.1)")
2016-09-06 11:24:23	-->	andreoss (~user@109.188.125.7) has joined #scala
2016-09-06 11:28:19	-->	skeet70 (~skeet70@host-72-174-224-178.static.bresnan.net) has joined #scala
2016-09-06 11:29:16	<--	zmack (~zmack@188.26.249.27) has quit (Remote host closed the connection)
2016-09-06 11:29:23	<--	mszczygiel (~m.szczygi@157.25.96.26) has quit (Ping timeout: 250 seconds)
2016-09-06 11:32:04	<--	omefire (~omefire@24.18.128.19) has quit (Ping timeout: 240 seconds)
2016-09-06 11:34:28	<--	wds (~wds@cpe-72-227-132-127.nyc.res.rr.com) has quit (Quit: Leaving)
2016-09-06 11:35:17	<--	Guest41 (~textual@pool-173-68-57-92.nycmny.fios.verizon.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-06 11:36:53	-->	mberndt (~mberndt@2a02:8108:4a40:4130:c3d7:d151:86d9:621f) has joined #scala
2016-09-06 11:38:01	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-06 11:40:17	mberndt	I don't get path dependent types. Take the following: trait X { type T }; trait Y { val x: X; val t: x.T }
2016-09-06 11:40:35	mberndt	now I can create a Y: new Y { val x = new X { type T = Int }; val t = 42 }
2016-09-06 11:40:54	mberndt	that compiles. But this doesn't: def makeY(xx: X)(tt: x.T) = new Y { val x = xx; val t = tt }
2016-09-06 11:41:30	mberndt	err, typo, I meant def makeY(xx: X)(tt: xx.T) = new Y { val x = xx; val t = tt }
2016-09-06 11:42:12	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2016-09-06 11:42:20	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-06 11:42:33	<--	ghounds (~gabriel@69.74.59.115) has quit (Ping timeout: 240 seconds)
2016-09-06 11:48:44	-->	TheVoid (~void@unaffiliated/thevoid) has joined #scala
2016-09-06 11:49:08	<--	pfurla (~textual@65.206.95.146) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-06 11:50:43	-->	wds (~wds@cpe-72-227-132-127.nyc.res.rr.com) has joined #scala
2016-09-06 11:52:43	-->	jaana (jaana@nat/yahoo/x-mbusvbazsjmfagmp) has joined #scala
2016-09-06 11:55:02	<--	wds (~wds@cpe-72-227-132-127.nyc.res.rr.com) has quit (Client Quit)
2016-09-06 11:55:28	-->	wds (~wds@cpe-72-227-132-127.nyc.res.rr.com) has joined #scala
2016-09-06 11:55:39	<--	mortenie (mortenie@nat/ibm/x-kntzmawlrpwnctnx) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-06 11:57:25	-->	red1ynx__ (~dzmitry@178.124.163.67) has joined #scala
2016-09-06 11:58:19	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 244 seconds)
2016-09-06 11:58:30	-->	qrvpzvb (~qrvpzvb@ppp089210001174.access.hol.gr) has joined #scala
2016-09-06 12:00:20	<--	Iskarlar (~Iskarlar@D9641F32.static.ziggozakelijk.nl) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-06 12:04:19	-->	synthroid (~synthroid@gateway/vpn/privateinternetaccess/synthroid) has joined #scala
2016-09-06 12:05:06	<--	synthroid (~synthroid@gateway/vpn/privateinternetaccess/synthroid) has quit (Remote host closed the connection)
2016-09-06 12:05:15	-->	synthroid (~synthroid@gateway/vpn/privateinternetaccess/synthroid) has joined #scala
2016-09-06 12:06:00	--	AMDPhenomX4Q is now known as Meanirelli
2016-09-06 12:08:24	tpolecat	yeah scala doesn't know that xx.T and x.T are the same type .. you can say val x: xx.type = xx to preserve the narrower type
2016-09-06 12:08:29	tpolecat	scala likes to forget about refinements
2016-09-06 12:09:52	mberndt	Oh, cool
2016-09-06 12:09:53	mberndt	thanks!
2016-09-06 12:10:50	mberndt	Ok, next question: I'd actually like to have those in a simple case class, i. e. something like case class Y(x: X, t: x.T). Is that possible somehow? 
2016-09-06 12:11:00	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-06 12:12:00	tpolecat	No, you can't have dependent method types in constructors. It's a huge and awful limitation.
2016-09-06 12:12:16	mberndt	What a shame…
2016-09-06 12:12:22	mberndt	Ok, thanks though. 
2016-09-06 12:13:36	mberndt	So I would guess the workaround is to use a factory method that does the new Y{ /* stuff */ } dance, right? 
2016-09-06 12:15:08	tpolecat	That's correct, yes.
2016-09-06 12:15:36	-->	pfurla (~textual@65.206.95.146) has joined #scala
2016-09-06 12:15:54	<--	Leon (~Leon@81-94-171-47.customer.itmastaren.net) has quit (Quit: Time to sleep)
2016-09-06 12:18:49	mberndt	cool, thanks for answering :-)
2016-09-06 12:20:17	-->	henriknj (~hnj@84.238.125.62) has joined #scala
2016-09-06 12:20:56	-->	red1ynx_ (~dzmitry@178.124.163.67) has joined #scala
2016-09-06 12:21:09	<--	mberndt (~mberndt@2a02:8108:4a40:4130:c3d7:d151:86d9:621f) has quit (Quit: Konversation terminated!)
2016-09-06 12:21:11	-->	mberndt_ (~mberndt@ip1f1298ae.dynamic.kabel-deutschland.de) has joined #scala
2016-09-06 12:22:29	<--	red1ynx__ (~dzmitry@178.124.163.67) has quit (Ping timeout: 260 seconds)
2016-09-06 12:23:27	<--	kueller (~kueller@88.191.110.74) has quit (Ping timeout: 265 seconds)
2016-09-06 12:24:16	-->	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has joined #scala
2016-09-06 12:25:49	-->	Ir1sh (~Ir1sh@12.228.115.34) has joined #scala
2016-09-06 12:26:33	<--	przl (~przlrkt@37.44.2.174) has quit (Ping timeout: 276 seconds)
2016-09-06 12:27:49	<--	shellac (~pldms@it061813.ilrt.bris.ac.uk) has quit (Quit: Leaving)
2016-09-06 12:28:12	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 265 seconds)
2016-09-06 12:28:28	<--	betandr (~betandr@132.185.153.6) has quit (Remote host closed the connection)
2016-09-06 12:28:55	-->	betandr (~betandr@132.185.153.6) has joined #scala
2016-09-06 12:29:55	-->	ghounds (~gabriel@69.74.59.115) has joined #scala
2016-09-06 12:32:10	<--	pfurla (~textual@65.206.95.146) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-06 12:32:25	<--	mberndt_ (~mberndt@ip1f1298ae.dynamic.kabel-deutschland.de) has quit (Ping timeout: 244 seconds)
2016-09-06 12:33:34	<--	betandr (~betandr@132.185.153.6) has quit (Ping timeout: 260 seconds)
2016-09-06 12:33:45	tpolecat	@tell mberndt you might also want to look at this serial novel by S11001001 http://typelevel.org/blog/2015/07/13/type-members-parameters.html
2016-09-06 12:33:45	lambdabot	Consider it noted.
2016-09-06 12:34:10	<--	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-06 12:34:20	<--	tpolecat (~anonymous@c-76-27-230-159.hsd1.or.comcast.net) has quit (Quit: tpolecat)
2016-09-06 12:35:04	-->	red1ynx__ (~dzmitry@178.124.163.67) has joined #scala
2016-09-06 12:35:08	-->	Hoffman (~Hoffman@unaffiliated/hoffman) has joined #scala
2016-09-06 12:37:26	<--	red1ynx_ (~dzmitry@178.124.163.67) has quit (Ping timeout: 244 seconds)
2016-09-06 12:38:41	<--	AzureStigma (~AzureStig@unaffiliated/azurestigma) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-06 12:39:46	<--	Velizar (~DEA7TH@unaffiliated/dea7th) has quit (Quit: Velizar)
2016-09-06 12:41:13	-->	randomstatistic (~randomsta@64.124.61.198) has joined #scala
2016-09-06 12:41:30	<--	ptx (~ptx@5.186.53.38) has quit (Ping timeout: 276 seconds)
2016-09-06 12:42:19	S11001001	tpolecat: I'm not sure if I want to finish with all the path-dependent/DMT stuff I wanted originally; I don't like the next part draft at all anymore
2016-09-06 12:42:32	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-09-06 12:43:44	-->	ptx (~ptx@5.186.53.38) has joined #scala
2016-09-06 12:44:07	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-06 12:44:52	<--	erguven (uid171385@gateway/web/irccloud.com/x-hhsqavfxsabcimal) has quit (Quit: Connection closed for inactivity)
2016-09-06 12:45:52	<--	ptx (~ptx@5.186.53.38) has quit (Read error: Connection reset by peer)
2016-09-06 12:46:14	-->	AzureStigma (~AzureStig@unaffiliated/azurestigma) has joined #scala
2016-09-06 12:46:38	-->	adelbertc (uid26183@gateway/web/irccloud.com/x-nofdbderjtpzagvl) has joined #scala
2016-09-06 12:48:00	-->	hlysig (~hlysig@178.19.53.141) has joined #scala
2016-09-06 12:49:25	<--	red1ynx__ (~dzmitry@178.124.163.67) has quit (Quit: This computer has gone to sleep)
2016-09-06 12:50:32	<--	sepp2k (~sepp2k@pD952093F.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2016-09-06 12:50:52	-->	circ-user-OBsh3 (~circuser-@82.131.32.35.cable.starman.ee) has joined #scala
2016-09-06 12:51:15	-->	tpolecat (~anonymous@c-67-160-172-16.hsd1.or.comcast.net) has joined #scala
2016-09-06 12:51:27	-->	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has joined #scala
2016-09-06 12:51:49	-->	Velizar (~DEA7TH@unaffiliated/dea7th) has joined #scala
2016-09-06 12:52:20	-->	mszczygiel (~mszczygie@dynamic-78-10-106-188.ssp.dialog.net.pl) has joined #scala
2016-09-06 12:52:46	-->	Dolu (~Dolu@81.13.149.179) has joined #scala
2016-09-06 12:53:06	<--	Dolu (~Dolu@81.13.149.179) has left #scala ("Leaving")
2016-09-06 12:53:13	-->	Dolu (~Dolu@81.13.149.179) has joined #scala
2016-09-06 12:53:22	-->	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has joined #scala
2016-09-06 12:53:53	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 12:53:55	-->	red1ynx (~dzmitry@178.124.163.67) has joined #scala
2016-09-06 12:55:04	<--	randomstatistic (~randomsta@64.124.61.198) has quit (Ping timeout: 255 seconds)
2016-09-06 12:55:04	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-06 12:56:51	Dolu	Hi, there is a little System-on-Chip fully implemented in Scala and working in FPGA. The toplevel is documented there : http://spinalhdl.github.io/SpinalDoc/spinal/lib/pinsec/hardware_toplevel/
2016-09-06 12:57:24	<--	andreoss (~user@109.188.125.7) has left #scala ("ERC (IRC client for Emacs 25.1.50.1)")
2016-09-06 12:57:41	tpolecat	!
2016-09-06 12:57:51	adelbertc	that's tpolecat 's specialty
2016-09-06 12:58:37	<--	Hoffman (~Hoffman@unaffiliated/hoffman) has quit (Ping timeout: 244 seconds)
2016-09-06 12:58:38	<--	hlysig (~hlysig@178.19.53.141) has quit (Remote host closed the connection)
2016-09-06 12:59:00	-->	randomstatistic (~randomsta@205.207.255.196) has joined #scala
2016-09-06 12:59:50	<--	pandaadb (~pandaadb@94.198.186.66) has quit (Quit: Leaving)
2016-09-06 12:59:55	-->	Dolu2 (~Dolu@81.13.149.179) has joined #scala
2016-09-06 13:00:03	<--	Dolu (~Dolu@81.13.149.179) has quit (Read error: Connection reset by peer)
2016-09-06 13:00:28	Dolu2	Sorry, disconnected
2016-09-06 13:01:04	-->	ptx (~ptx@5.186.53.38) has joined #scala
2016-09-06 13:03:01	-->	streblo (~streblo@8.25.197.27) has joined #scala
2016-09-06 13:04:50	-->	Hoffman (~Hoffman@unaffiliated/hoffman) has joined #scala
2016-09-06 13:05:14	-->	hlysig (~hlysig@178.19.53.141) has joined #scala
2016-09-06 13:05:14	-->	sepp2k (~sepp2k@pD9520E51.dip0.t-ipconnect.de) has joined #scala
2016-09-06 13:07:41	-->	AnarchyAo (~andrew@8.18.217.202) has joined #scala
2016-09-06 13:07:47	<--	iref (~ferko@81.30.229.109) has quit (Remote host closed the connection)
2016-09-06 13:08:09	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 276 seconds)
2016-09-06 13:12:08	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-06 13:14:14	<--	red1ynx (~dzmitry@178.124.163.67) has quit (Quit: This computer has gone to sleep)
2016-09-06 13:15:08	-->	cotalinux (~cota@79.112.81.176) has joined #scala
2016-09-06 13:17:17	-->	lcfrs (~lcfrs@173.247.202.130) has joined #scala
2016-09-06 13:20:13	-->	Dimitriy_ (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-06 13:20:13	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2016-09-06 13:20:40	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-06 13:21:18	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 13:23:43	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-06 13:23:43	<--	Dimitriy_ (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Read error: Connection reset by peer)
2016-09-06 13:24:16	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-06 13:24:35	-->	pfurla (~textual@65.206.95.146) has joined #scala
2016-09-06 13:26:21	<--	AzureStigma (~AzureStig@unaffiliated/azurestigma) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-06 13:28:08	-->	cannibalbob (~cannibalb@207.242.55.25) has joined #scala
2016-09-06 13:30:08	<--	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-06 13:30:43	<--	hlysig (~hlysig@178.19.53.141) has quit (Remote host closed the connection)
2016-09-06 13:31:11	-->	hlysig (~hlysig@178.19.53.141) has joined #scala
2016-09-06 13:31:45	<--	plamb_ (~plamb@2601:1c0:5202:c400:8cc8:9749:70dd:3580) has quit (Read error: Connection reset by peer)
2016-09-06 13:32:17	-->	plamb_ (~plamb@2601:1c0:5202:c400:8cc8:9749:70dd:3580) has joined #scala
2016-09-06 13:32:21	-->	Sasazuka (~Sasazuka@unaffiliated/sasazuka) has joined #scala
2016-09-06 13:32:40	-->	overlord_tm (~andraz@213.172.234.141) has joined #scala
2016-09-06 13:32:57	-->	firstdayonthejob (~firstdayo@cpc99346-croy26-2-0-cust153.19-2.cable.virginm.net) has joined #scala
2016-09-06 13:34:55	<--	hlysig (~hlysig@178.19.53.141) has quit (Client Quit)
2016-09-06 13:34:58	-->	asteve (~asteve@unaffiliated/kxsteve) has joined #scala
2016-09-06 13:36:01	-->	replay (~replay@pdpc/supporter/student/replay) has joined #scala
2016-09-06 13:36:10	<--	asteve (~asteve@unaffiliated/kxsteve) has quit (Client Quit)
2016-09-06 13:37:09	<--	flugsio (~fluzios@201.47.211.139.dynamic.adsl.gvt.net.br) has quit (Ping timeout: 260 seconds)
2016-09-06 13:37:47	-->	red1ynx (~dzmitry@178.124.163.67) has joined #scala
2016-09-06 13:38:22	<--	marr (~ccc@87-205-171-18.adsl.inetia.pl) has quit (Ping timeout: 265 seconds)
2016-09-06 13:38:33	<--	streblo (~streblo@8.25.197.27) has quit (Ping timeout: 244 seconds)
2016-09-06 13:38:48	-->	Agro (~Agro@108-79-22-150.lightspeed.hstntx.sbcglobal.net) has joined #scala
2016-09-06 13:39:40	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-06 13:40:43	-->	jade-shan (~jade@101.80.207.29) has joined #scala
2016-09-06 13:43:05	<--	red1ynx (~dzmitry@178.124.163.67) has quit (Quit: This computer has gone to sleep)
2016-09-06 13:43:28	-->	AzureStigma (~AzureStig@unaffiliated/azurestigma) has joined #scala
2016-09-06 13:43:49	-->	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has joined #scala
2016-09-06 13:43:55	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 13:44:40	<--	jfg9 (~josh@80.87.25.194) has quit (Quit: jfg9)
2016-09-06 13:45:47	<--	pfurla (~textual@65.206.95.146) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-06 13:46:02	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-06 13:46:35	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 13:48:47	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-06 13:49:00	-->	asteve (~asteve@unaffiliated/kxsteve) has joined #scala
2016-09-06 13:50:22	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-09-06 13:50:35	<--	jmv_ (~jmv@37.160.114.156) has quit (Ping timeout: 258 seconds)
2016-09-06 13:51:07	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-06 13:51:10	-->	pfurla (~textual@65.206.95.146) has joined #scala
2016-09-06 13:54:25	<--	ghounds (~gabriel@69.74.59.115) has quit (Ping timeout: 252 seconds)
2016-09-06 13:55:02	-->	Osho (~irc@unaffiliated/osho) has joined #scala
2016-09-06 13:55:53	--	irc: disconnected from server
2016-09-06 13:56:54	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-06 13:56:54	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-06 13:56:54	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-06 13:56:54	--	Channel #scala: 430 nicks (0 ops, 0 voices, 430 normals)
2016-09-06 13:56:54	***	Buffer Playback...
2016-09-06 13:56:54	aloiscochard	[05:27:14] gothos: unsure yet, we are trying to isolate. I'll double check the classnotfoundexception.
2016-09-06 13:56:54	 *	aloiscochard [05:29:19] I'm getting:
2016-09-06 13:56:54	aloiscochard	[05:29:24] 11:27:45.367 ERROR org.apache.spark.executor.Executor - Exception in task 0.0 in stage 0.0 (TID 0)
2016-09-06 13:56:54	aloiscochard	[05:29:24] java.io.IOException: java.lang.ClassNotFoundException: scala.Some
2016-09-06 13:56:54	aloiscochard	[05:29:24]     at org.apache.spark.util.Utils$.tryOrIOException(Utils.scala:1207) ~[spark-core_2.11-1.6.1.jar:1.6.1]
2016-09-06 13:56:54	gothos	[05:33:10] Only thing that makes sense to me is a difference in scala versions 2.10 vs 2.11
2016-09-06 13:56:54	aloiscochard	[05:34:38] gothos: yeah indeed, that's what my intuition was telling me... but I can't find a dep with an explicit scala version :-(
2016-09-06 13:56:54	aloiscochard	[05:34:44] thanks for helping anyway, appreciated
2016-09-06 13:56:54	aloiscochard	[05:35:15] I have also "Could not deserialize TaskEndReason: ClassNotFound with classloader" after
2016-09-06 13:56:54	aloiscochard	[05:35:20] fucking reflection
2016-09-06 13:56:54	gothos	[05:36:01] spark is full of that, writing some generic methods for spark api is a nightmare
2016-09-06 13:56:54	[poe]jdk	[09:41:48] I hear a lot about Apache Spark in here, what would I use that for if I were to learn it? 
2016-09-06 13:56:54	reactormonk	[09:42:49] [poe]jdk, frameless
2016-09-06 13:56:54	[poe]jdk	[09:45:31] ah, cool. I don't know much about it, guess I'll dive in head first and have a look. Thanks :)
2016-09-06 13:56:54	gothos	[09:47:22] reactormonk: why? Especially with the Dataset API? I know a few things missing from the Spark API, but frameless doesn't help one bit there
2016-09-06 13:56:54	reactormonk	[09:49:50] gothos, like?
2016-09-06 13:56:54	gothos	[09:50:20] reactormonk: fold, some operations for typed columns
2016-09-06 13:56:54	gothos	[09:50:24] for instance
2016-09-06 13:56:54	gothos	[09:52:00] that also reminds me that Dataset do not have a isEmpty, rdds do, but all that should be implemented for efficiently. rdd.isEmpty always goes through all of my data for some reason, super annoying
2016-09-06 13:56:54	andreoss	[10:44:18] i keep getting errors like this with sbt `org.ensime#sbt-ensime;1.9.1-SNAPSHOT: not found`
2016-09-06 13:56:54	andreoss	[10:45:32] it happens only when i try to run some of ensime commands
2016-09-06 13:56:54	OlegYch_	[10:57:24] probably missing snapshot resolver for sbt-ensime
2016-09-06 13:56:54	andreoss	[10:59:21] OlegYch_: it's there, also the same error with stable version of ensime
2016-09-06 13:56:54	andreoss	[11:06:16] it tries to access  https://repo1.maven.org/maven2/org/ensime/sbt-ensime_2.11_0.13/1.0.0/sbt-ensime-1.0.0.pom, but it's 404
2016-09-06 13:56:54	andreoss	[11:06:19] should it be?
2016-09-06 13:56:54	OlegYch_	[11:08:08] why 1.0.0?
2016-09-06 13:56:54	andreoss	[11:09:05] copied from ensime site
2016-09-06 13:56:54	andreoss	[11:16:24] it worked but only with 0.4.0
2016-09-06 13:56:54	mberndt	[11:40:17] I don't get path dependent types. Take the following: trait X { type T }; trait Y { val x: X; val t: x.T }
2016-09-06 13:56:54	mberndt	[11:40:35] now I can create a Y: new Y { val x = new X { type T = Int }; val t = 42 }
2016-09-06 13:56:54	mberndt	[11:40:54] that compiles. But this doesn't: def makeY(xx: X)(tt: x.T) = new Y { val x = xx; val t = tt }
2016-09-06 13:56:54	mberndt	[11:41:30] err, typo, I meant def makeY(xx: X)(tt: xx.T) = new Y { val x = xx; val t = tt }
2016-09-06 13:56:54	tpolecat	[12:08:24] yeah scala doesn't know that xx.T and x.T are the same type .. you can say val x: xx.type = xx to preserve the narrower type
2016-09-06 13:56:54	tpolecat	[12:08:29] scala likes to forget about refinements
2016-09-06 13:56:54	mberndt	[12:09:52] Oh, cool
2016-09-06 13:56:54	mberndt	[12:09:53] thanks!
2016-09-06 13:56:54	mberndt	[12:10:50] Ok, next question: I'd actually like to have those in a simple case class, i. e. something like case class Y(x: X, t: x.T). Is that possible somehow? 
2016-09-06 13:56:54	tpolecat	[12:12:00] No, you can't have dependent method types in constructors. It's a huge and awful limitation.
2016-09-06 13:56:54	mberndt	[12:12:16] What a shame…
2016-09-06 13:56:54	mberndt	[12:12:22] Ok, thanks though. 
2016-09-06 13:56:54	mberndt	[12:13:36] So I would guess the workaround is to use a factory method that does the new Y{ /* stuff */ } dance, right? 
2016-09-06 13:56:54	tpolecat	[12:15:08] That's correct, yes.
2016-09-06 13:56:54	mberndt	[12:18:49] cool, thanks for answering :-)
2016-09-06 13:56:54	tpolecat	[12:33:45] @tell mberndt you might also want to look at this serial novel by S11001001 http://typelevel.org/blog/2015/07/13/type-members-parameters.html
2016-09-06 13:56:54	lambdabot	[12:33:45] Consider it noted.
2016-09-06 13:56:54	S11001001	[12:42:19] tpolecat: I'm not sure if I want to finish with all the path-dependent/DMT stuff I wanted originally; I don't like the next part draft at all anymore
2016-09-06 13:56:54	Dolu	[12:56:51] Hi, there is a little System-on-Chip fully implemented in Scala and working in FPGA. The toplevel is documented there : http://spinalhdl.github.io/SpinalDoc/spinal/lib/pinsec/hardware_toplevel/
2016-09-06 13:56:54	tpolecat	[12:57:41] !
2016-09-06 13:56:54	adelbertc	[12:57:51] that's tpolecat 's specialty
2016-09-06 13:56:54	Dolu2	[13:00:28] Sorry, disconnected
2016-09-06 13:56:54	***	Playback Complete.
2016-09-06 13:57:05	<--	jade-shan (~jade@101.80.207.29) has quit (Remote host closed the connection)
2016-09-06 13:57:06	--	irc: disconnected from server
2016-09-06 14:03:24	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-06 14:03:24	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-06 14:03:24	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-06 14:03:24	--	Channel #scala: 429 nicks (0 ops, 0 voices, 429 normals)
2016-09-06 14:03:24	***	Buffer Playback...
2016-09-06 14:03:24	aloiscochard	[05:27:14] gothos: unsure yet, we are trying to isolate. I'll double check the classnotfoundexception.
2016-09-06 14:03:24	 *	aloiscochard [05:29:19] I'm getting:
2016-09-06 14:03:24	aloiscochard	[05:29:24] 11:27:45.367 ERROR org.apache.spark.executor.Executor - Exception in task 0.0 in stage 0.0 (TID 0)
2016-09-06 14:03:24	aloiscochard	[05:29:24] java.io.IOException: java.lang.ClassNotFoundException: scala.Some
2016-09-06 14:03:24	aloiscochard	[05:29:24]     at org.apache.spark.util.Utils$.tryOrIOException(Utils.scala:1207) ~[spark-core_2.11-1.6.1.jar:1.6.1]
2016-09-06 14:03:24	gothos	[05:33:10] Only thing that makes sense to me is a difference in scala versions 2.10 vs 2.11
2016-09-06 14:03:24	aloiscochard	[05:34:38] gothos: yeah indeed, that's what my intuition was telling me... but I can't find a dep with an explicit scala version :-(
2016-09-06 14:03:24	aloiscochard	[05:34:44] thanks for helping anyway, appreciated
2016-09-06 14:03:24	aloiscochard	[05:35:15] I have also "Could not deserialize TaskEndReason: ClassNotFound with classloader" after
2016-09-06 14:03:24	aloiscochard	[05:35:20] fucking reflection
2016-09-06 14:03:24	gothos	[05:36:01] spark is full of that, writing some generic methods for spark api is a nightmare
2016-09-06 14:03:24	[poe]jdk	[09:41:48] I hear a lot about Apache Spark in here, what would I use that for if I were to learn it? 
2016-09-06 14:03:24	reactormonk	[09:42:49] [poe]jdk, frameless
2016-09-06 14:03:24	[poe]jdk	[09:45:31] ah, cool. I don't know much about it, guess I'll dive in head first and have a look. Thanks :)
2016-09-06 14:03:24	gothos	[09:47:22] reactormonk: why? Especially with the Dataset API? I know a few things missing from the Spark API, but frameless doesn't help one bit there
2016-09-06 14:03:24	reactormonk	[09:49:50] gothos, like?
2016-09-06 14:03:24	gothos	[09:50:20] reactormonk: fold, some operations for typed columns
2016-09-06 14:03:24	gothos	[09:50:24] for instance
2016-09-06 14:03:24	gothos	[09:52:00] that also reminds me that Dataset do not have a isEmpty, rdds do, but all that should be implemented for efficiently. rdd.isEmpty always goes through all of my data for some reason, super annoying
2016-09-06 14:03:24	andreoss	[10:44:18] i keep getting errors like this with sbt `org.ensime#sbt-ensime;1.9.1-SNAPSHOT: not found`
2016-09-06 14:03:24	andreoss	[10:45:32] it happens only when i try to run some of ensime commands
2016-09-06 14:03:24	OlegYch_	[10:57:24] probably missing snapshot resolver for sbt-ensime
2016-09-06 14:03:24	andreoss	[10:59:21] OlegYch_: it's there, also the same error with stable version of ensime
2016-09-06 14:03:24	andreoss	[11:06:16] it tries to access  https://repo1.maven.org/maven2/org/ensime/sbt-ensime_2.11_0.13/1.0.0/sbt-ensime-1.0.0.pom, but it's 404
2016-09-06 14:03:24	andreoss	[11:06:19] should it be?
2016-09-06 14:03:24	OlegYch_	[11:08:08] why 1.0.0?
2016-09-06 14:03:24	andreoss	[11:09:05] copied from ensime site
2016-09-06 14:03:24	andreoss	[11:16:24] it worked but only with 0.4.0
2016-09-06 14:03:24	mberndt	[11:40:17] I don't get path dependent types. Take the following: trait X { type T }; trait Y { val x: X; val t: x.T }
2016-09-06 14:03:24	mberndt	[11:40:35] now I can create a Y: new Y { val x = new X { type T = Int }; val t = 42 }
2016-09-06 14:03:24	mberndt	[11:40:54] that compiles. But this doesn't: def makeY(xx: X)(tt: x.T) = new Y { val x = xx; val t = tt }
2016-09-06 14:03:24	mberndt	[11:41:30] err, typo, I meant def makeY(xx: X)(tt: xx.T) = new Y { val x = xx; val t = tt }
2016-09-06 14:03:24	tpolecat	[12:08:24] yeah scala doesn't know that xx.T and x.T are the same type .. you can say val x: xx.type = xx to preserve the narrower type
2016-09-06 14:03:24	tpolecat	[12:08:29] scala likes to forget about refinements
2016-09-06 14:03:24	mberndt	[12:09:52] Oh, cool
2016-09-06 14:03:24	mberndt	[12:09:53] thanks!
2016-09-06 14:03:24	mberndt	[12:10:50] Ok, next question: I'd actually like to have those in a simple case class, i. e. something like case class Y(x: X, t: x.T). Is that possible somehow? 
2016-09-06 14:03:24	tpolecat	[12:12:00] No, you can't have dependent method types in constructors. It's a huge and awful limitation.
2016-09-06 14:03:24	mberndt	[12:12:16] What a shame…
2016-09-06 14:03:24	mberndt	[12:12:22] Ok, thanks though. 
2016-09-06 14:03:24	mberndt	[12:13:36] So I would guess the workaround is to use a factory method that does the new Y{ /* stuff */ } dance, right? 
2016-09-06 14:03:24	tpolecat	[12:15:08] That's correct, yes.
2016-09-06 14:03:24	mberndt	[12:18:49] cool, thanks for answering :-)
2016-09-06 14:03:24	tpolecat	[12:33:45] @tell mberndt you might also want to look at this serial novel by S11001001 http://typelevel.org/blog/2015/07/13/type-members-parameters.html
2016-09-06 14:03:24	lambdabot	[12:33:45] Consider it noted.
2016-09-06 14:03:24	S11001001	[12:42:19] tpolecat: I'm not sure if I want to finish with all the path-dependent/DMT stuff I wanted originally; I don't like the next part draft at all anymore
2016-09-06 14:03:24	Dolu	[12:56:51] Hi, there is a little System-on-Chip fully implemented in Scala and working in FPGA. The toplevel is documented there : http://spinalhdl.github.io/SpinalDoc/spinal/lib/pinsec/hardware_toplevel/
2016-09-06 14:03:24	tpolecat	[12:57:41] !
2016-09-06 14:03:24	adelbertc	[12:57:51] that's tpolecat 's specialty
2016-09-06 14:03:24	Dolu2	[13:00:28] Sorry, disconnected
2016-09-06 14:03:24	***	Playback Complete.
2016-09-06 14:03:37	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-06 14:03:52	-->	AlexBul (~user@5.3.139.11) has joined #scala
2016-09-06 14:05:55	<--	lcfrs (~lcfrs@173.247.202.130) has quit (Remote host closed the connection)
2016-09-06 14:06:32	-->	lcfrs (~lcfrs@173.247.202.130) has joined #scala
2016-09-06 14:09:03	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 244 seconds)
2016-09-06 14:09:15	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-06 14:09:16	<--	shinnya (~shinnya@245.144.137.133.dy.bbexcite.jp) has quit (Ping timeout: 252 seconds)
2016-09-06 14:11:12	<--	lcfrs (~lcfrs@173.247.202.130) has quit (Ping timeout: 276 seconds)
2016-09-06 14:11:54	<--	randomstatistic (~randomsta@205.207.255.196) has quit
2016-09-06 14:13:37	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 250 seconds)
2016-09-06 14:13:45	-->	randomstatistic (~randomsta@64.124.61.198) has joined #scala
2016-09-06 14:15:06	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-06 14:17:27	<--	vili_ (~nick@cpe-173-91-55-5.neo.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-06 14:17:36	-->	Dimitriy_ (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-06 14:19:25	-->	ixxie (~ixxie@82-181-162-226.bb.dnainternet.fi) has joined #scala
2016-09-06 14:20:59	-->	theBlackDragon (~dragon@213.219.167.118) has joined #scala
2016-09-06 14:21:17	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 244 seconds)
2016-09-06 14:22:03	<--	Dimitriy_ (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2016-09-06 14:22:12	<--	bocaneri (~bocaneri@about/linux/staff/sauvin) has quit (Read error: Connection reset by peer)
2016-09-06 14:22:45	-->	Spockz (~spockz@109-97-132-5.ftth.glasoperator.nl) has joined #scala
2016-09-06 14:23:20	--	atomi_ is now known as atomi
2016-09-06 14:23:26	-->	nafg (~naftoli@96.57.169.90) has joined #scala
2016-09-06 14:23:43	-->	lcfrs (~lcfrs@173.247.202.130) has joined #scala
2016-09-06 14:24:19	-->	xnavor (~xnavor@78-70-4-240-no171.business.telia.com) has joined #scala
2016-09-06 14:30:03	<--	randomstatistic (~randomsta@64.124.61.198) has quit
2016-09-06 14:32:22	<--	OOPMan (~OOPMan@154.66.249.84) has quit (Quit: Konversation terminated!)
2016-09-06 14:32:35	-->	randomstatistic (~randomsta@64.124.61.198) has joined #scala
2016-09-06 14:36:00	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 14:36:51	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-06 14:37:07	-->	red1ynx (~dzmitry@178.124.163.67) has joined #scala
2016-09-06 14:37:24	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 14:37:36	<--	waqas (~Adium@216.174.114.140) has quit (Quit: Leaving.)
2016-09-06 14:41:43	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-06 14:42:00	<--	randomstatistic (~randomsta@64.124.61.198) has quit
2016-09-06 14:43:27	-->	uglyfigurine (~redpunch@c-67-162-80-70.hsd1.il.comcast.net) has joined #scala
2016-09-06 14:43:41	-->	randomstatistic (~randomsta@64.124.61.198) has joined #scala
2016-09-06 14:45:33	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 265 seconds)
2016-09-06 14:45:45	<--	firstdayonthejob (~firstdayo@cpc99346-croy26-2-0-cust153.19-2.cable.virginm.net) has quit (Quit: WeeChat 1.5)
2016-09-06 14:46:08	<--	red1ynx (~dzmitry@178.124.163.67) has quit (Quit: This computer has gone to sleep)
2016-09-06 14:47:35	<--	Neo-- (~neo@193.189.168.74) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-06 14:49:19	-->	Rawriful (~Rawriful@host-2-96-45-237.as13285.net) has joined #scala
2016-09-06 14:50:13	-->	Arrgh (~alex@70.36.63.98) has joined #scala
2016-09-06 14:50:53	<--	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has quit (Ping timeout: 244 seconds)
2016-09-06 14:52:23	<--	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has quit (Quit: Leaving.)
2016-09-06 14:52:42	<--	xnavor (~xnavor@78-70-4-240-no171.business.telia.com) has quit (Quit: This computer has gone to sleep)
2016-09-06 14:53:53	<--	uglyfigurine (~redpunch@c-67-162-80-70.hsd1.il.comcast.net) has quit (Remote host closed the connection)
2016-09-06 14:53:56	-->	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has joined #scala
2016-09-06 14:54:32	-->	firstdayonthejob (~firstdayo@cpc99346-croy26-2-0-cust153.19-2.cable.virginm.net) has joined #scala
2016-09-06 14:55:25	-->	red1ynx (~dzmitry@178.124.163.67) has joined #scala
2016-09-06 14:58:38	<--	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has quit (Ping timeout: 244 seconds)
2016-09-06 14:59:13	-->	Ven_ (~textual@133.249.29.93.rev.sfr.net) has joined #scala
2016-09-06 14:59:47	<--	tpolecat (~anonymous@c-67-160-172-16.hsd1.or.comcast.net) has quit (Quit: tpolecat)
2016-09-06 15:01:17	<--	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has quit (Ping timeout: 250 seconds)
2016-09-06 15:02:21	-->	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has joined #scala
2016-09-06 15:07:12	<--	Ven_ (~textual@133.249.29.93.rev.sfr.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-09-06 15:07:56	<--	lcfrs (~lcfrs@173.247.202.130) has quit (Remote host closed the connection)
2016-09-06 15:08:31	-->	lcfrs (~lcfrs@173.247.202.130) has joined #scala
2016-09-06 15:11:36	-->	Pulp (~Pulp@63-221-50-195.dyn.estpak.ee) has joined #scala
2016-09-06 15:12:49	<--	lcfrs (~lcfrs@173.247.202.130) has quit (Ping timeout: 260 seconds)
2016-09-06 15:13:07	-->	ewanas (~foocraft@unaffiliated/foocraft) has joined #scala
2016-09-06 15:13:49	<--	AlexBul (~user@5.3.139.11) has quit (Quit: Miranda NG! Smaller, Faster, Easier. http://miranda-ng.org/)
2016-09-06 15:14:15	-->	uglyfigurine (~uglyfigur@c-67-162-80-70.hsd1.il.comcast.net) has joined #scala
2016-09-06 15:14:40	-->	mberndt_ (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has joined #scala
2016-09-06 15:15:00	<--	uglyfigurine (~uglyfigur@c-67-162-80-70.hsd1.il.comcast.net) has quit (Client Quit)
2016-09-06 15:15:27	-->	uglyfigurine (~uglyfigur@c-67-162-80-70.hsd1.il.comcast.net) has joined #scala
2016-09-06 15:17:02	ewanas	Is there any way to avoid using the Any type without having to recreate/wrap pre-existing types in scala? I mean, is there an idiomatic way to avoid Any in cases like dynamically returning a different value type
2016-09-06 15:20:50	uglyfigurine	ewanas: you can use generics if these depend on the input type to the function
2016-09-06 15:21:12	uglyfigurine	def identity[T](s: T): T = s
2016-09-06 15:21:44	tnks	ewanas: typically you either use records of functions, or well defined algebra (ADT)
2016-09-06 15:22:08	tnks	records of functions are just OO-style interfaces, which allows you to make one extensibly for whatever types you need to support.
2016-09-06 15:22:32	tnks	ADTs come into play more when you have a finite set of types to support.
2016-09-06 15:23:14	ewanas	uglyfigurine, That one works when the type is somehow known at calling time. The specific case that triggers my question is, given some string, I can evaluate it as either a List[Int], List[String], Map[String, String], for example.
2016-09-06 15:24:38	-->	pfurla (~textual@65.206.95.146) has joined #scala
2016-09-06 15:25:10	-->	solutron (~solutron@172.56.39.235) has joined #scala
2016-09-06 15:26:00	reactormonk	ewanas, with ADTs, you don't need to know the type at call time
2016-09-06 15:26:17	reactormonk	s/call/compile&
2016-09-06 15:26:37	tnks	ewanas: that would just be a parser to an ADT, I think.
2016-09-06 15:26:57	tnks	ewanas: are you familiar with ADTs and what people call "sum types"?
2016-09-06 15:27:11	tnks	Scala encodes them as "case classes"
2016-09-06 15:28:18	ewanas	So, have one base, many cases and use those to wrap the data.. that works. So this is not considered noisy or too verbose I guess
2016-09-06 15:28:37	tnks	ewanas: Scala is always a little bit verbose.
2016-09-06 15:28:46	tnks	we just luck out when it's less verbose than Java.
2016-09-06 15:29:16	tnks	also, if you code with lots of FP combinators, you can get some wins with conciseness.
2016-09-06 15:30:37	ewanas	My FP is mostly map/fold/flatMap.. and case classes of course, but I haven't gotten around to needing to compose functions yet. (Also my team is heavily object-oriented, they get scared too easily :p)
2016-09-06 15:30:59	tnks	FP can be heavily object-oriented.
2016-09-06 15:31:00	uglyfigurine	ewanas: im in the same boat as u
2016-09-06 15:31:10	tnks	OO is just all product types, no sum types.
2016-09-06 15:31:39	-->	tag (~tag@fw03.sfoffice.quantcast.com) has joined #scala
2016-09-06 15:32:17	-->	zacharypch (~zak@pool-108-45-116-57.washdc.fios.verizon.net) has joined #scala
2016-09-06 15:33:17	-->	flugsio (~fluzios@201.47.211.139.dynamic.adsl.gvt.net.br) has joined #scala
2016-09-06 15:33:33	<--	jaana (jaana@nat/yahoo/x-mbusvbazsjmfagmp) has quit (Ping timeout: 240 seconds)
2016-09-06 15:34:00	ewanas	Isn't usage of abstract classes a, albeit blown up, usage of sum types?
2016-09-06 15:34:08	-->	jaana (jaana@nat/yahoo/x-lzmlboclvodilzzh) has joined #scala
2016-09-06 15:35:01	-->	banandana (~banandana@107.170.201.163) has joined #scala
2016-09-06 15:35:34	<--	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has quit (Ping timeout: 260 seconds)
2016-09-06 15:36:10	<--	solutron (~solutron@172.56.39.235) has quit (Remote host closed the connection)
2016-09-06 15:36:19	tnks	ewanas: not really, because abstract classes are not sealed by default.
2016-09-06 15:36:26	tnks	that's one thing that Scala brings to the encoding.
2016-09-06 15:36:41	tnks	so when you pattern match, the compiler can check you hit all cases.
2016-09-06 15:36:55	tnks	another way to go (which is more traditional OO) is to make a visitor pattern.
2016-09-06 15:37:26	-->	texasmynsted (~texasmyns@172.56.20.223) has joined #scala
2016-09-06 15:37:33	tnks	the visitor pattern is just an interface-encoding of the pattern match, what FP often calls a catamorphism or a "fold" function.
2016-09-06 15:38:16	tnks	ewanas: if you're really coming from a traditional OO background, I found pointing people to the sidebar writeup of this project helpful:  http://jamesiry.github.io/jADT/index.html
2016-09-06 15:38:38	tnks	I don't recommend Java, or using this project.  I just like the writeup in the documentation.
2016-09-06 15:38:46	ewanas	I came from SML actually, but I approach scala as a syntax sugar over java :D
2016-09-06 15:38:50	-->	tpolecat (~anonymous@c-76-27-230-159.hsd1.or.comcast.net) has joined #scala
2016-09-06 15:38:56	ewanas	sometimes that sugar is brown though..
2016-09-06 15:39:01	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-06 15:39:11	tnks	ewanas: oh, then ADTs should be old hat for you.
2016-09-06 15:39:30	tnks	for the OO person, they come at it barely from the visitor pattern, which most people don't even know.
2016-09-06 15:40:07	tnks	Scala's ADT encoding is crazy verbose (and broken/wonky) relative to Haskell's.
2016-09-06 15:40:19	tnks	but it's still better than Java.
2016-09-06 15:41:23	pfurla	I need to make a presentation about ADTs to bunch of data scients, not sure where I will start exactly
2016-09-06 15:41:54	uglyfigurine	wikipedie :P
2016-09-06 15:41:57	tnks	pfurla: what's the context of why they are attending?
2016-09-06 15:42:02	ewanas	JADT looks pretty cool. but just to be clear, it's the "sealed" constraint that makes this type-checking actually useful, that's what you're saying, right, tnks?
2016-09-06 15:42:35	<--	IstiCusi (~phonon@84-75-175-159.dclient.hispeed.ch) has quit (Ping timeout: 265 seconds)
2016-09-06 15:42:50	uglyfigurine	sealed makes the pattern check be exhaustive
2016-09-06 15:42:52	pfurla	tnks: they are a bit rough on FP concepts and our main language is Scala
2016-09-06 15:43:45	tnks	ewanas: jADT code-gen's the visitor pattern from a Haskell-like ADT syntax.  Scala gives us a subtype encoding building on abstract classes, but augmented with sealing (for compiler checking, as you said) and also a pattern matching syntax.
2016-09-06 15:43:47	ewanas	pfurla, be thankful. the data scientists I work with love, adore and worship SQL and hold no regrets towards its large scale use
2016-09-06 15:44:05	tnks	pfurla: if they're just learning ADTs, I'd just start from the beginning.
2016-09-06 15:44:07	pfurla	I can trace a bunch of paralles, like sets, BNF grammars, arithmethics/algebra 
2016-09-06 15:44:19	tnks	pfurla: with a new programmer I'm mentoring, I started with a simple Boolean.
2016-09-06 15:44:37	pfurla	ewanas: most of our DSers don't even know SQL
2016-09-06 15:45:33	tnks	but with this new programmer, I have an agenda.
2016-09-06 15:45:59	tnks	I walked through a church-encoding, to show the similarity with a fold function, and lead to visitors.
2016-09-06 15:46:01	pfurla	tnks: they consume adts daily, what I want it to make sure then understand the concepts behinds and maybe reasons to avoid OO data modeling 
2016-09-06 15:46:03	ewanas	http://stackoverflow.com/questions/26689951/writing-algebraic-data-type-in-scala#26690131 looks a bit like SML with a few more typing, but still good enough
2016-09-06 15:46:05	-->	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has joined #scala
2016-09-06 15:46:10	tnks	so when she asks "what is OO" she's got a good answer.
2016-09-06 15:46:16	ewanas	pfurla, they are "hip"
2016-09-06 15:46:40	tnks	pfurla: if we have a product type of functions, that seems "OO" to me.
2016-09-06 15:46:50	tnks	I think discouraging OO might be a distraction.
2016-09-06 15:46:57	uglyfigurine	I am reading a bunch of binary files over the network. These are then converted into a list of Foo's using a library. Each Foo is then transformed into a Bar. Multiple Foo's may tranform to a Bar with the same identifier, in which case, the data from these Foo's has to be merged. Lastly, the Bar's are written over the network.
2016-09-06 15:47:17	uglyfigurine	1. read binary files from network and optionally write them to disk for caching
2016-09-06 15:47:17	uglyfigurine	2. pass each file to a library to get a list of Foo's
2016-09-06 15:47:17	uglyfigurine	3. process each list of Foo's to Bar's. 
2016-09-06 15:47:17	uglyfigurine	  3.1 If multiple Foo's (from current list or others) convert to a Bar with same id, merge the data.
2016-09-06 15:47:17	uglyfigurine	4. Write Bar's back over the network
2016-09-06 15:47:26	uglyfigurine	Current implementation - 
2016-09-06 15:47:26	uglyfigurine	Steps 1, 2 and 3 are wrapped in a Future.
2016-09-06 15:47:26	uglyfigurine	Step 3.1 is wrapped in a synchronize block.
2016-09-06 15:47:26	uglyfigurine	Await is called on the Futures before Step 4 is executed
2016-09-06 15:47:35	pfurla	tnks: OO data modiling as in not final not sealed and other inheritance crazyness
2016-09-06 15:47:38	tnks	ewanas: yeah, that writeup is covering the syntax we'd show here.
2016-09-06 15:48:00	pfurla	motivating ADTs vs open inheritance/subtyping
2016-09-06 15:48:01	tnks	pfurla: I know some people that would say OO has nothing to do with inheritance.
2016-09-06 15:48:05	tnks	just interface design.
2016-09-06 15:48:10	tnks	(though they aren't in the majority)
2016-09-06 15:48:25	tpolecat	OO is a syndrome. If you have enough symptoms it's OO.
2016-09-06 15:48:30	<--	cannibalbob (~cannibalb@207.242.55.25) has quit
2016-09-06 15:48:32	pfurla	ehhe
2016-09-06 15:48:36	tnks	if we passed type class dictionaries around as values, I think they'd just call that OO.
2016-09-06 15:49:01	tnks	so it's hard for me to say that that's intrinsically wrong.
2016-09-06 15:49:53	pfurla	tnks: heard that before, but a lot of early OO literature put a lot of emphasis on inheritance
2016-09-06 15:49:59	uglyfigurine	Problems with this implementation -
2016-09-06 15:49:59	uglyfigurine	Number of threads for downloading files is the same as threads processing.
2016-09-06 15:50:00	uglyfigurine	Same thread downloads and processes a file (essentially blocking).
2016-09-06 15:50:00	uglyfigurine	Need to do synchronization manually when merging data
2016-09-06 15:50:12	uglyfigurine	Can someone recommend a better approach?
2016-09-06 15:50:45	tnks	pfurla: I'd just be clear on terms.  Say things like "inheritance" "subtyping" "encapsulated mutable state" and "interfaces"
2016-09-06 15:50:54	tnks	and try to not sit too much on "OO"
2016-09-06 15:51:37	ewanas	those data scientists are hardcore, IMHO
2016-09-06 15:52:05	pfurla	ewanas: we have one of the guys that found the Higg's Boson here :)
2016-09-06 15:52:45	pfurla	ok, one in a thousand :)
2016-09-06 15:52:48	ewanas	Surely Oracle wasn't used to find that
2016-09-06 15:53:29	tpolecat	big science software is always a teetering pile of whatever seems to work
2016-09-06 15:53:42	tpolecat	so who knows
2016-09-06 15:53:44	adelbertc	tpolecat: Spark is coming for you
2016-09-06 15:53:59	adelbertc	big data telescopes
2016-09-06 15:54:01	plamb_	lol
2016-09-06 15:54:04	 *	tpolecat puts a sparkproof bucket over his head
2016-09-06 15:54:17	adelbertc	hope you like ClassTags
2016-09-06 15:54:27	zeryx	spark is still shit, it might be less shit later
2016-09-06 15:54:30	pfurla	actually never asked him what was the tech stack there, but I bet he only work on a tiny bit of what was a very heterogeneous maze 
2016-09-06 15:54:45	tpolecat	adelbertc: actually the data group just replaced the old fortran stuff with <drum roll> python
2016-09-06 15:54:47	adelbertc	pfurla: are you going to be at scala by the bay
2016-09-06 15:54:53	uglyfigurine	My question link, if you find it harder to read dispersed in the chats - http://hastebin.com/exigifeciw.vhdl
2016-09-06 15:55:02	adelbertc	tpolecat: \o/
2016-09-06 15:55:03	pfurla	adelbertc: unlikely, when is it?
2016-09-06 15:55:19	adelbertc	mid-november
2016-09-06 15:55:21	adelbertc	11-13 i think
2016-09-06 15:55:25	pfurla	is spark necessary? can we make something simpler?
2016-09-06 15:55:43	adelbertc	i would like to think yes. but its a huge project
2016-09-06 15:55:51	pfurla	omg vhdl
2016-09-06 15:55:59	<--	texasmynsted (~texasmyns@172.56.20.223) has quit (Ping timeout: 260 seconds)
2016-09-06 15:56:09	zeryx	what ar eyou looking for pfurla? if just matrix operations then https://github.com/scalanlp/breeze
2016-09-06 15:56:09	plamb_	thats what spark was to hadoop
2016-09-06 15:56:11	zeryx	breeze is great
2016-09-06 15:56:11	plamb_	something simpler
2016-09-06 15:56:47	pfurla	zeryx: distribution, map-reduce
2016-09-06 15:56:55	pfurla	distributed map-reduce
2016-09-06 15:57:09	<--	circ-user-OBsh3 (~circuser-@82.131.32.35.cable.starman.ee) has quit (Ping timeout: 260 seconds)
2016-09-06 15:57:13	-->	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has joined #scala
2016-09-06 15:57:18	-->	veegee (~textual@206-169-144-162.static.twtelecom.net) has joined #scala
2016-09-06 15:57:19	plamb_	yeah but it feels like scala
2016-09-06 15:57:20	zeryx	yeah probably want spark then, although my companies platform is an alternative
2016-09-06 15:57:32	zeryx	it's not quite the same though
2016-09-06 15:58:32	pfurla	adelbertc: unlikely to be there, would like to spend a bit of time with east coast hackers though
2016-09-06 15:58:37	pfurla	adelbertc: is alois going?
2016-09-06 15:58:41	<--	AnarchyAo (~andrew@8.18.217.202) has quit (Excess Flood)
2016-09-06 15:58:41	pfurla	*if you know
2016-09-06 15:58:43	<--	Dolu2 (~Dolu@81.13.149.179) has left #scala ("Leaving")
2016-09-06 15:58:46	<--	replay (~replay@pdpc/supporter/student/replay) has quit (Ping timeout: 250 seconds)
2016-09-06 15:58:49	adelbertc	dont know :-) youll have to ask him
2016-09-06 15:59:16	pfurla	how is Randall doing?
2016-09-06 15:59:29	adelbertc	hm has he stopped showing up in IRC?
2016-09-06 15:59:32	adelbertc	i only recently got back on IRC
2016-09-06 15:59:47	tpolecat	haven't seen him in a while
2016-09-06 16:00:05	adelbertc	might be because he used to connect through Adium which was also used for internal company chat
2016-09-06 16:00:05	pfurla	me neither
2016-09-06 16:00:12	adelbertc	but now we've switched to SLACK
2016-09-06 16:00:35	adelbertc	i will let him know he is missed
2016-09-06 16:00:53	<--	jaana (jaana@nat/yahoo/x-lzmlboclvodilzzh) has quit (Quit: jaana)
2016-09-06 16:01:00	tpolecat	"congratulations, you're not using hipchat!"
2016-09-06 16:01:01	pfurla	"What are you doing?", ask a boos a to a employee, who answer "Slacking"
2016-09-06 16:01:38	pfurla	i think i used hipchat for a little but, slack feels a lot better
2016-09-06 16:01:55	-->	jaana (jaana@nat/yahoo/x-swwcubpivoygdflb) has joined #scala
2016-09-06 16:01:55	tpolecat	hipchat is the jira of chat apps
2016-09-06 16:01:57	pfurla	actually slack is like irc on a lot of steroids
2016-09-06 16:02:18	zeryx	I'm on slack & irc
2016-09-06 16:02:20	zeryx	super hip
2016-09-06 16:02:38	-->	lcfrs (~lcfrs@173.247.202.130) has joined #scala
2016-09-06 16:02:45	plamb_	same
2016-09-06 16:02:51	plamb_	slack, irc and discord
2016-09-06 16:02:57	zeryx	slack is a fanastic tool and I'm happy its available, really useful for when you're a remote worker like me
2016-09-06 16:03:01	--	Guest49871 is now known as woky_
2016-09-06 16:03:33	adelbertc	good news folks, Randy says he'll check in
2016-09-06 16:03:37	adelbertc	he just walked by me with a plate of salad
2016-09-06 16:04:15	pfurla	wow, jADT look quite useful if you are stuck in java
2016-09-06 16:04:42	pfurla	so Randy if going to check in by the salad bar
2016-09-06 16:05:39	-->	AnarchyAo (~andrew@8.18.217.202) has joined #scala
2016-09-06 16:05:47	pfurla	tnks: back to what was saying about showing oo modeling vs fp modeling
2016-09-06 16:06:36	pfurla	tnks: is like modeling xml with bnf vs modeling xml with oo type hierarchies
2016-09-06 16:06:53	pfurla	but noway I am getting into that with my DS team
2016-09-06 16:07:42	-->	shinnya (~shinnya@245.144.137.133.dy.bbexcite.jp) has joined #scala
2016-09-06 16:07:53	tpolecat	I found that since I started doing FP I no longer draw boxes and arrows. I just write down types on the board.
2016-09-06 16:08:07	tpolecat	My way of thinking about modeling is totally different.
2016-09-06 16:08:59	pfurla	i still like relational data modeling and still do it and somewhat mapped to atds
2016-09-06 16:09:01	pfurla	adts
2016-09-06 16:09:14	pfurla	*still do
2016-09-06 16:10:39	<--	pfurla (~textual@65.206.95.146) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-06 16:11:40	-->	pfurla (~textual@65.206.95.146) has joined #scala
2016-09-06 16:14:07	<--	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has quit (Ping timeout: 252 seconds)
2016-09-06 16:18:04	<--	nullremain (~godenji@c-50-138-183-78.hsd1.ma.comcast.net) has quit (Read error: Connection reset by peer)
2016-09-06 16:18:22	-->	RSchulzB (~Adium@67.218.117.86) has joined #scala
2016-09-06 16:18:50	RSchulzB	Rumors of my death are greatly exaggerated…
2016-09-06 16:18:58	-->	replay (~replay@pdpc/supporter/student/replay) has joined #scala
2016-09-06 16:19:30	tpolecat	how do we know you're not a ghost
2016-09-06 16:19:42	RSchulzB	Some sort of Turing test?
2016-09-06 16:19:53	bizarrefish	My diagrams would make UML people cry
2016-09-06 16:20:23	bizarrefish	Architecture and intent are most important to convey, UML conveys implementation
2016-09-06 16:23:12	-->	virtualeyes (~godenji@c-50-138-183-78.hsd1.ma.comcast.net) has joined #scala
2016-09-06 16:24:17	pfurla	hey Randall! How are you?
2016-09-06 16:26:27	-->	bluezone (uid104970@gateway/web/irccloud.com/x-cmqzogvcqcihytff) has joined #scala
2016-09-06 16:28:12	<--	ixxie (~ixxie@82-181-162-226.bb.dnainternet.fi) has quit (Remote host closed the connection)
2016-09-06 16:28:30	pfurla	RSchulzB ^
2016-09-06 16:30:53	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-06 16:32:36	<--	ewanas (~foocraft@unaffiliated/foocraft) has quit (Quit: Leaving)
2016-09-06 16:33:27	-->	jfg9 (~josh@80.87.25.194) has joined #scala
2016-09-06 16:33:30	-->	datura_ (~datura@unaffiliated/datura) has joined #scala
2016-09-06 16:33:38	-->	waqas (~Adium@216.174.114.140) has joined #scala
2016-09-06 16:34:38	-->	mortenie (~mortenie@78.19.224.107) has joined #scala
2016-09-06 16:36:40	-->	steinn (~user@163-60-19-178.xdsl.simafelagid.is) has joined #scala
2016-09-06 16:37:03	<--	datura (~datura@unaffiliated/datura) has quit (Ping timeout: 250 seconds)
2016-09-06 16:37:21	<--	sovreign (~sovreign@cpe-172-73-52-179.carolina.res.rr.com) has quit (Quit: Leaving)
2016-09-06 16:38:11	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Remote host closed the connection)
2016-09-06 16:38:48	-->	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has joined #scala
2016-09-06 16:39:33	<--	steinn (~user@163-60-19-178.xdsl.simafelagid.is) has left #scala ("Killed buffer")
2016-09-06 16:39:47	RSchulzB	Pretty good. My company switched from Jabber to Slack and I haven’t launched Adium (where I get IRC access) since.
2016-09-06 16:40:08	RSchulzB	pfurla: How about you?
2016-09-06 16:41:54	-->	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has joined #scala
2016-09-06 16:42:12	-->	linoge (~user@186.167.248.233) has joined #scala
2016-09-06 16:42:33	linoge	Where should I go for scala on android discussion? Specifically Macroid?
2016-09-06 16:43:50	<--	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2016-09-06 16:43:57	pfurla	Doing great, RSchulzB, slowly becoming a New Yorker (a polite one) :) Is Box still treating you well?
2016-09-06 16:44:22	-->	clarkkampfe (~no6@4.15.83.131) has joined #scala
2016-09-06 16:44:25	<--	synthroid (~synthroid@gateway/vpn/privateinternetaccess/synthroid) has quit
2016-09-06 16:46:38	<--	mortenie (~mortenie@78.19.224.107) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-06 16:51:32	felher	Hey folks. Any recommend talk on why I would want a free monad? I think I undestand how it works and I think I could build `Free[F, A]` myself without looking anything up, but I'm lost as to why I would want one.
2016-09-06 16:51:34	felher	A talk like "here is the problem solved with a simple recursive ADT and an interpreter" to "here is the problem solved much nicer with a free monad and an interpreter" would really help, I guess. :)
2016-09-06 16:52:42	dibblego	felher: referential transparency is preserved in the latter case.
2016-09-06 16:53:30	RSchulzB	pfurla: A New Yorker, eh? Culture shock?? … Anyway, yes, I’m still really liking working at Box!
2016-09-06 16:53:37	adelbertc	felher: you could jsut use an ADT and an interpreter, but you wont get as much power. you end up reinventing parts of Free if you want, say, stack safety, monadic combinators, being able to compose them, etc.
2016-09-06 16:53:59	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-06 16:55:10	-->	adibsaad (~ed@2607:fea8:4e0:17b:b5af:678f:8588:593) has joined #scala
2016-09-06 16:57:10	-->	mortenie (~mortenie@78.19.224.107) has joined #scala
2016-09-06 16:57:24	<--	cotalinux (~cota@79.112.81.176) has quit (Read error: Connection reset by peer)
2016-09-06 16:58:58	-->	vili_ (~nick@cpe-173-91-55-5.neo.res.rr.com) has joined #scala
2016-09-06 17:00:24	pfurla	RSchulzB: not really, here is a lot like Rio, only cleaner and the cops don't give the creeps 
2016-09-06 17:00:40	pfurla	oh and colder most of the time
2016-09-06 17:00:49	RSchulzB	Have you been through a winter there yet?
2016-09-06 17:01:05	felher	dibblego: I dont see why an recursive ADT with an interpreter wouldn't be referentially transparent? Maybe I'm missing something here?
2016-09-06 17:01:07	felher	adelbertc: Yeah, okay, I can see that. Turning my `List[Free[F, A]]` into a `Free[F, List[A]]` via sequence certainly seems useful, for example. The stack safety part I don't get yet, because the ADT would live on the heap anyway and the interpreter could be build stack unsafe in both cases, I gues. 
2016-09-06 17:01:24	pfurla	yep I have, last one, first time ever to expeirence snow
2016-09-06 17:01:45	dibblego	felher: Then what might you mean by a recursive ADT other than Free? Maybe try writing the code?
2016-09-06 17:02:54	felher	dibblego: will do, thanks. Maybe I have a thinko somewhere and will stumble upon it as soon as I try to type it. :)
2016-09-06 17:02:58	dibblego	ok
2016-09-06 17:04:15	<--	Jacoby6000 (~Jacoby600@199.20.32.21) has quit (Quit: WeeChat 1.5)
2016-09-06 17:05:31	-->	hamid (~nithp@unaffiliated/hamid) has joined #scala
2016-09-06 17:05:37	<--	linoge (~user@186.167.248.233) has quit (Quit: ERC (IRC client for Emacs 24.5.1))
2016-09-06 17:06:18	-->	lefou (~lefou@p578bdab3.dip0.t-ipconnect.de) has joined #scala
2016-09-06 17:06:59	dibblego	to be clear, you typically use Free against a legacy API where referential transparency is not preserved, otherwise yeah, just use a regular ADT
2016-09-06 17:08:12	<--	Hoffman (~Hoffman@unaffiliated/hoffman) has quit (Ping timeout: 240 seconds)
2016-09-06 17:09:28	-->	Hoffman (~Hoffman@unaffiliated/hoffman) has joined #scala
2016-09-06 17:10:52	felher	Oh, didn't know that. That actually helps me quite a bit to put things into perspective. Thanks
2016-09-06 17:11:32	dibblego	ok
2016-09-06 17:16:39	<--	clarkkampfe (~no6@4.15.83.131) has quit (Ping timeout: 264 seconds)
2016-09-06 17:21:20	-->	kembrek (~kembrek@05473c1c.skybroadband.com) has joined #scala
2016-09-06 17:22:36	<--	plamb_ (~plamb@2601:1c0:5202:c400:8cc8:9749:70dd:3580) has quit (Read error: Connection reset by peer)
2016-09-06 17:23:10	-->	plamb_ (~plamb@2601:1c0:5202:c400:8cc8:9749:70dd:3580) has joined #scala
2016-09-06 17:23:34	-->	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has joined #scala
2016-09-06 17:23:44	<--	lefou (~lefou@p578bdab3.dip0.t-ipconnect.de) has quit (Read error: Connection reset by peer)
2016-09-06 17:25:03	-->	lefou (~lefou@p578bdab3.dip0.t-ipconnect.de) has joined #scala
2016-09-06 17:26:24	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-06 17:28:06	<--	Hink (~Hink@45.32.3.47) has quit (Quit: quit from client)
2016-09-06 17:28:07	<--	Ir1sh (~Ir1sh@12.228.115.34) has quit (Remote host closed the connection)
2016-09-06 17:28:21	-->	yazirian (~user@ec2-54-172-2-1.compute-1.amazonaws.com) has joined #scala
2016-09-06 17:28:28	<--	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2016-09-06 17:29:06	-->	Hink (~Hink@hink.me) has joined #scala
2016-09-06 17:29:38	<--	jaana (jaana@nat/yahoo/x-swwcubpivoygdflb) has quit (Quit: jaana)
2016-09-06 17:32:00	<--	Hink (~Hink@hink.me) has quit (Client Quit)
2016-09-06 17:33:01	-->	Hink (~Hink@hink.me) has joined #scala
2016-09-06 17:33:55	-->	jaana (jaana@nat/yahoo/x-ockgzkjfaxhmwzco) has joined #scala
2016-09-06 17:35:15	<--	paws_ (uid89121@gateway/web/irccloud.com/x-focbmegprbirisht) has quit (Quit: Connection closed for inactivity)
2016-09-06 17:36:07	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-09-06 17:38:02	-->	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has joined #scala
2016-09-06 17:38:09	<--	ghounds (~gabriel@69.74.59.115) has quit (Ping timeout: 250 seconds)
2016-09-06 17:38:14	<--	herenow (~znc@162.243.65.147) has quit (Quit: ZNC - http://znc.in)
2016-09-06 17:39:06	<--	AzureStigma (~AzureStig@unaffiliated/azurestigma) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-06 17:41:45	<--	zeryx (~james@hlfxns017vw-142177093185.dhcp-dynamic.FibreOp.ns.bellaliant.net) has quit (Quit: zeryx)
2016-09-06 17:42:47	<--	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has quit (Ping timeout: 244 seconds)
2016-09-06 17:43:45	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 276 seconds)
2016-09-06 17:44:18	-->	herenow (~znc@162.243.65.147) has joined #scala
2016-09-06 17:44:55	<--	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has quit (Quit: Leaving.)
2016-09-06 17:45:55	<--	skeet70 (~skeet70@host-72-174-224-178.static.bresnan.net) has quit (Quit: My computer has gone to sleep. ZZZzzz…)
2016-09-06 17:46:41	<--	Velizar (~DEA7TH@unaffiliated/dea7th) has quit (Quit: Velizar)
2016-09-06 17:46:43	<--	hecliunyx (~h@45.63.97.181) has quit (Ping timeout: 265 seconds)
2016-09-06 17:48:01	<--	henriknj (~hnj@84.238.125.62) has quit (Ping timeout: 255 seconds)
2016-09-06 17:48:19	-->	hecliunyx (~h@45.63.97.181) has joined #scala
2016-09-06 17:48:41	-->	Neo-- (~neo@BSN-143-173-231.dynamic.siol.net) has joined #scala
2016-09-06 17:49:49	<--	adolf_stalin (~adolf_sta@205.157.178.143) has quit (Quit: Leaving...)
2016-09-06 17:49:58	-->	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has joined #scala
2016-09-06 17:50:57	-->	andywhite37 (~textual@50-206-169-202-static.hfc.comcastbusiness.net) has joined #scala
2016-09-06 17:51:22	<--	jfg9 (~josh@80.87.25.194) has quit (Quit: jfg9)
2016-09-06 17:51:56	<--	Hoffman (~Hoffman@unaffiliated/hoffman) has quit (Quit: quit)
2016-09-06 17:52:38	<--	mszczygiel (~mszczygie@dynamic-78-10-106-188.ssp.dialog.net.pl) has quit (Quit: Lost terminal)
2016-09-06 17:52:39	-->	Hoffman (~Hoffman@unaffiliated/hoffman) has joined #scala
2016-09-06 17:53:52	<--	rosten (~rosten@cpe-45-48-9-161.socal.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-09-06 17:54:21	tpolecat	felher: i did a talk on doobie that explains a useful application https://www.youtube.com/watch?v=M5MF6M7FHPo
2016-09-06 17:54:59	tpolecat	you can also use Free to represent things other than computations
2016-09-06 17:55:19	tpolecat	Free[List,A] for arbitrary nested lists of A
2016-09-06 17:55:22	tpolecat	for instance
2016-09-06 17:56:09	<--	mberndt_ (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has quit (Ping timeout: 260 seconds)
2016-09-06 17:56:42	<--	lefou (~lefou@p578bdab3.dip0.t-ipconnect.de) has quit (Read error: Connection reset by peer)
2016-09-06 17:57:48	-->	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has joined #scala
2016-09-06 18:00:05	tpolecat	but the most common application is probably little DSLs and it's great for that
2016-09-06 18:00:07	-->	lefou (~lefou@p578bdab3.dip0.t-ipconnect.de) has joined #scala
2016-09-06 18:00:30	<--	lenstr (~lenstr@unaffiliated/lenstr) has quit (Ping timeout: 244 seconds)
2016-09-06 18:00:55	<--	lobotomy (~lobotomy@li447-127.members.linode.com) has quit (Remote host closed the connection)
2016-09-06 18:01:40	<--	atomi (~atomi@71-83-179-177.dhcp.lnbh.ca.charter.com) has quit (Ping timeout: 264 seconds)
2016-09-06 18:01:48	<--	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has quit (Client Quit)
2016-09-06 18:02:46	-->	LeNsTR (~lenstr@messer.qs.biz) has joined #scala
2016-09-06 18:04:04	-->	PSoBI (~latner@host66.minutemantransport.com) has joined #scala
2016-09-06 18:04:05	<--	squeaky-clean (~squeaky-c@162.213.148.250) has quit (Quit: Leaving)
2016-09-06 18:04:26	tpolecat	and this just appeard on the tweeter http://perevillega.com/understanding-free-monads
2016-09-06 18:05:09	<--	wds (~wds@cpe-72-227-132-127.nyc.res.rr.com) has quit (Ping timeout: 244 seconds)
2016-09-06 18:05:52	-->	randomstatistic_ (~randomsta@205.207.255.196) has joined #scala
2016-09-06 18:06:49	-->	skeet70 (~skeet70@host-69-145-18-110.static.bresnan.net) has joined #scala
2016-09-06 18:07:37	<--	randomstatistic (~randomsta@64.124.61.198) has quit (Ping timeout: 250 seconds)
2016-09-06 18:08:40	-->	atomi (~atomi@71-83-179-177.dhcp.lnbh.ca.charter.com) has joined #scala
2016-09-06 18:11:51	<--	Hoffman (~Hoffman@unaffiliated/hoffman) has quit (Ping timeout: 264 seconds)
2016-09-06 18:13:42	<--	griffindy (~textual@192.133.79.17) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-06 18:14:08	-->	marr (~ccc@159-205-253-124.adsl.inetia.pl) has joined #scala
2016-09-06 18:18:12	<--	SebastianFlyte (~sebf@pool-108-48-93-213.washdc.fios.verizon.net) has quit (Quit: Leaving)
2016-09-06 18:18:23	-->	ghounds (~gabriel@NYUFWA-WLESSAUTHCLIENTS-06.NATPOOL.NYU.EDU) has joined #scala
2016-09-06 18:19:06	<--	atomi (~atomi@71-83-179-177.dhcp.lnbh.ca.charter.com) has quit (Ping timeout: 244 seconds)
2016-09-06 18:20:12	<--	overlord_tm (~andraz@213.172.234.141) has quit (Ping timeout: 240 seconds)
2016-09-06 18:20:15	<--	firstdayonthejob (~firstdayo@cpc99346-croy26-2-0-cust153.19-2.cable.virginm.net) has quit (Ping timeout: 264 seconds)
2016-09-06 18:21:07	-->	coltfred (~coltfred@host-72-174-224-178.static.bresnan.net) has joined #scala
2016-09-06 18:25:44	<--	skeet70 (~skeet70@host-69-145-18-110.static.bresnan.net) has quit (Quit: My computer has gone to sleep. ZZZzzz…)
2016-09-06 18:31:03	-->	atomi (~atomi@71-83-179-177.dhcp.lnbh.ca.charter.com) has joined #scala
2016-09-06 18:33:40	<--	jaana (jaana@nat/yahoo/x-ockgzkjfaxhmwzco) has quit (Quit: jaana)
2016-09-06 18:35:17	-->	jfg9 (~josh@host-92-24-87-11.ppp.as43234.net) has joined #scala
2016-09-06 18:36:11	-->	lobotomy (~lobotomy@li447-127.members.linode.com) has joined #scala
2016-09-06 18:38:43	-->	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has joined #scala
2016-09-06 18:39:06	--	codingro1ot is now known as codingrobot
2016-09-06 18:43:04	<--	andywhite37 (~textual@50-206-169-202-static.hfc.comcastbusiness.net) has quit (Read error: Connection reset by peer)
2016-09-06 18:44:25	<--	lefou (~lefou@p578bdab3.dip0.t-ipconnect.de) has quit (Ping timeout: 244 seconds)
2016-09-06 18:45:30	<--	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2016-09-06 18:45:59	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 244 seconds)
2016-09-06 18:49:49	<--	ghounds (~gabriel@NYUFWA-WLESSAUTHCLIENTS-06.NATPOOL.NYU.EDU) has quit (Read error: Connection reset by peer)
2016-09-06 18:50:05	-->	ghounds (~gabriel@NYUFWA-WLESSAUTHCLIENTS-06.NATPOOL.NYU.EDU) has joined #scala
2016-09-06 18:51:38	<--	mortenie (~mortenie@78.19.224.107) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-06 18:52:08	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-06 18:58:46	<--	bluezone (uid104970@gateway/web/irccloud.com/x-cmqzogvcqcihytff) has quit (Quit: Connection closed for inactivity)
2016-09-06 18:59:51	<--	ghounds (~gabriel@NYUFWA-WLESSAUTHCLIENTS-06.NATPOOL.NYU.EDU) has quit (Ping timeout: 264 seconds)
2016-09-06 19:01:18	<--	al-damiri (uid142631@gateway/web/irccloud.com/x-icirazkopjxcnwdd) has quit (Quit: Connection closed for inactivity)
2016-09-06 19:04:43	-->	al-damiri (uid142631@gateway/web/irccloud.com/x-wfvksvzaohdndhrv) has joined #scala
2016-09-06 19:10:35	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-06 19:10:41	-->	jaana (~jaana@c-71-198-4-58.hsd1.ca.comcast.net) has joined #scala
2016-09-06 19:12:54	<--	datura_ (~datura@unaffiliated/datura) has quit (Ping timeout: 250 seconds)
2016-09-06 19:14:07	-->	predator217 (~predator1@p4FDC1F95.dip0.t-ipconnect.de) has joined #scala
2016-09-06 19:14:38	-->	markus1189 (~markus118@p4FDC1F95.dip0.t-ipconnect.de) has joined #scala
2016-09-06 19:15:37	<--	Pulp (~Pulp@63-221-50-195.dyn.estpak.ee) has quit (Ping timeout: 252 seconds)
2016-09-06 19:16:36	<--	ztaylor54 (~ztaylor54@131.194.172.148) has quit (Quit: Leaving)
2016-09-06 19:17:31	-->	Pulp (~Pulp@63-221-50-195.dyn.estpak.ee) has joined #scala
2016-09-06 19:17:51	<--	markus1199 (~markus118@p4FDC1E23.dip0.t-ipconnect.de) has quit (Ping timeout: 244 seconds)
2016-09-06 19:17:51	<--	predator117 (~predator1@p4FDC1E23.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2016-09-06 19:20:09	<--	nafg (~naftoli@96.57.169.90) has quit (Ping timeout: 260 seconds)
2016-09-06 19:21:38	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-06 19:24:43	<--	patchwork (~patchwork@137.53.241.254) has quit (Remote host closed the connection)
2016-09-06 19:25:12	<--	jedws (~jedws@eth59-167-133-100.static.internode.on.net) has quit (Ping timeout: 240 seconds)
2016-09-06 19:26:52	<--	Rawriful (~Rawriful@host-2-96-45-237.as13285.net) has quit (Quit: WeeChat 1.3)
2016-09-06 19:27:08	-->	ghounds (~gabriel@NYUFWA-WLESSAUTHCLIENTS-06.NATPOOL.NYU.EDU) has joined #scala
2016-09-06 19:27:14	<--	pfurla (~textual@65.206.95.146) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-06 19:29:56	<--	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has quit (Quit: Leaving.)
2016-09-06 19:34:57	<--	atomi (~atomi@71-83-179-177.dhcp.lnbh.ca.charter.com) has quit (Remote host closed the connection)
2016-09-06 19:35:08	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 250 seconds)
2016-09-06 19:36:01	-->	atomi (~atomi@71-83-179-177.dhcp.lnbh.ca.charter.com) has joined #scala
2016-09-06 19:37:19	<--	jfg9 (~josh@host-92-24-87-11.ppp.as43234.net) has quit (Quit: jfg9)
2016-09-06 19:37:30	<--	PSoBI (~latner@host66.minutemantransport.com) has quit (Ping timeout: 276 seconds)
2016-09-06 19:37:39	<--	ghounds (~gabriel@NYUFWA-WLESSAUTHCLIENTS-06.NATPOOL.NYU.EDU) has quit (Ping timeout: 260 seconds)
2016-09-06 19:40:35	<--	tag (~tag@fw03.sfoffice.quantcast.com) has quit (Ping timeout: 244 seconds)
2016-09-06 19:41:17	-->	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has joined #scala
2016-09-06 19:43:33	<--	Neo-- (~neo@BSN-143-173-231.dynamic.siol.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-06 19:46:00	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-06 19:46:16	<--	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2016-09-06 19:47:50	<--	sepp2k (~sepp2k@pD9520E51.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2016-09-06 19:53:08	-->	Insolsence (~Insolsenc@46.166.190.144) has joined #scala
2016-09-06 19:55:25	<--	lcfrs (~lcfrs@173.247.202.130) has quit (Remote host closed the connection)
2016-09-06 19:59:22	<--	red1ynx (~dzmitry@178.124.163.67) has quit (Quit: This computer has gone to sleep)
2016-09-06 20:00:21	-->	lambda-11235 (~lambda-11@184.63.207.209) has joined #scala
2016-09-06 20:01:39	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 264 seconds)
2016-09-06 20:02:52	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 250 seconds)
2016-09-06 20:03:19	<--	coltfred (~coltfred@host-72-174-224-178.static.bresnan.net) has quit (Ping timeout: 244 seconds)
2016-09-06 20:05:54	<--	AnarchyAo (~andrew@8.18.217.202) has quit (Ping timeout: 250 seconds)
2016-09-06 20:06:10	<--	randomstatistic_ (~randomsta@205.207.255.196) has quit
2016-09-06 20:32:51	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-06 20:32:51	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-06 20:32:51	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-06 20:32:51	--	Channel #scala: 410 nicks (0 ops, 0 voices, 410 normals)
2016-09-06 20:32:51	***	Buffer Playback...
2016-09-06 20:32:51	zeryx	[16:02:20] super hip
2016-09-06 20:32:51	plamb_	[16:02:45] same
2016-09-06 20:32:51	plamb_	[16:02:51] slack, irc and discord
2016-09-06 20:32:51	zeryx	[16:02:57] slack is a fanastic tool and I'm happy its available, really useful for when you're a remote worker like me
2016-09-06 20:32:51	adelbertc	[16:03:33] good news folks, Randy says he'll check in
2016-09-06 20:32:51	adelbertc	[16:03:37] he just walked by me with a plate of salad
2016-09-06 20:32:51	pfurla	[16:04:15] wow, jADT look quite useful if you are stuck in java
2016-09-06 20:32:51	pfurla	[16:04:42] so Randy if going to check in by the salad bar
2016-09-06 20:32:51	pfurla	[16:05:47] tnks: back to what was saying about showing oo modeling vs fp modeling
2016-09-06 20:32:51	pfurla	[16:06:36] tnks: is like modeling xml with bnf vs modeling xml with oo type hierarchies
2016-09-06 20:32:51	pfurla	[16:06:53] but noway I am getting into that with my DS team
2016-09-06 20:32:51	tpolecat	[16:07:53] I found that since I started doing FP I no longer draw boxes and arrows. I just write down types on the board.
2016-09-06 20:32:51	tpolecat	[16:08:07] My way of thinking about modeling is totally different.
2016-09-06 20:32:51	pfurla	[16:08:59] i still like relational data modeling and still do it and somewhat mapped to atds
2016-09-06 20:32:51	pfurla	[16:09:01] adts
2016-09-06 20:32:51	pfurla	[16:09:14] *still do
2016-09-06 20:32:51	RSchulzB	[16:18:50] Rumors of my death are greatly exaggerated…
2016-09-06 20:32:51	tpolecat	[16:19:30] how do we know you're not a ghost
2016-09-06 20:32:51	RSchulzB	[16:19:42] Some sort of Turing test?
2016-09-06 20:32:51	bizarrefish	[16:19:53] My diagrams would make UML people cry
2016-09-06 20:32:51	bizarrefish	[16:20:23] Architecture and intent are most important to convey, UML conveys implementation
2016-09-06 20:32:51	pfurla	[16:24:17] hey Randall! How are you?
2016-09-06 20:32:51	pfurla	[16:28:30] RSchulzB ^
2016-09-06 20:32:51	RSchulzB	[16:39:47] Pretty good. My company switched from Jabber to Slack and I haven’t launched Adium (where I get IRC access) since.
2016-09-06 20:32:51	RSchulzB	[16:40:08] pfurla: How about you?
2016-09-06 20:32:51	linoge	[16:42:33] Where should I go for scala on android discussion? Specifically Macroid?
2016-09-06 20:32:51	pfurla	[16:43:57] Doing great, RSchulzB, slowly becoming a New Yorker (a polite one) :) Is Box still treating you well?
2016-09-06 20:32:51	felher	[16:51:32] Hey folks. Any recommend talk on why I would want a free monad? I think I undestand how it works and I think I could build `Free[F, A]` myself without looking anything up, but I'm lost as to why I would want one.
2016-09-06 20:32:51	felher	[16:51:34] A talk like "here is the problem solved with a simple recursive ADT and an interpreter" to "here is the problem solved much nicer with a free monad and an interpreter" would really help, I guess. :)
2016-09-06 20:32:51	dibblego	[16:52:42] felher: referential transparency is preserved in the latter case.
2016-09-06 20:32:51	RSchulzB	[16:53:30] pfurla: A New Yorker, eh? Culture shock?? … Anyway, yes, I’m still really liking working at Box!
2016-09-06 20:32:51	adelbertc	[16:53:37] felher: you could jsut use an ADT and an interpreter, but you wont get as much power. you end up reinventing parts of Free if you want, say, stack safety, monadic combinators, being able to compose them, etc.
2016-09-06 20:32:51	pfurla	[17:00:24] RSchulzB: not really, here is a lot like Rio, only cleaner and the cops don't give the creeps 
2016-09-06 20:32:51	pfurla	[17:00:40] oh and colder most of the time
2016-09-06 20:32:51	RSchulzB	[17:00:49] Have you been through a winter there yet?
2016-09-06 20:32:51	felher	[17:01:05] dibblego: I dont see why an recursive ADT with an interpreter wouldn't be referentially transparent? Maybe I'm missing something here?
2016-09-06 20:32:51	felher	[17:01:07] adelbertc: Yeah, okay, I can see that. Turning my `List[Free[F, A]]` into a `Free[F, List[A]]` via sequence certainly seems useful, for example. The stack safety part I don't get yet, because the ADT would live on the heap anyway and the interpreter could be build stack unsafe in both cases, I gues. 
2016-09-06 20:32:51	pfurla	[17:01:24] yep I have, last one, first time ever to expeirence snow
2016-09-06 20:32:51	dibblego	[17:01:45] felher: Then what might you mean by a recursive ADT other than Free? Maybe try writing the code?
2016-09-06 20:32:51	felher	[17:02:54] dibblego: will do, thanks. Maybe I have a thinko somewhere and will stumble upon it as soon as I try to type it. :)
2016-09-06 20:32:51	dibblego	[17:02:58] ok
2016-09-06 20:32:51	dibblego	[17:06:59] to be clear, you typically use Free against a legacy API where referential transparency is not preserved, otherwise yeah, just use a regular ADT
2016-09-06 20:32:51	felher	[17:10:52] Oh, didn't know that. That actually helps me quite a bit to put things into perspective. Thanks
2016-09-06 20:32:51	dibblego	[17:11:32] ok
2016-09-06 20:32:51	tpolecat	[17:54:21] felher: i did a talk on doobie that explains a useful application https://www.youtube.com/watch?v=M5MF6M7FHPo
2016-09-06 20:32:51	tpolecat	[17:54:59] you can also use Free to represent things other than computations
2016-09-06 20:32:51	tpolecat	[17:55:19] Free[List,A] for arbitrary nested lists of A
2016-09-06 20:32:51	tpolecat	[17:55:22] for instance
2016-09-06 20:32:51	tpolecat	[18:00:05] but the most common application is probably little DSLs and it's great for that
2016-09-06 20:32:51	tpolecat	[18:04:26] and this just appeard on the tweeter http://perevillega.com/understanding-free-monads
2016-09-06 20:32:51	***	Playback Complete.
2016-09-06 20:33:04	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-06 20:34:14	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 260 seconds)
2016-09-06 20:37:47	<--	replay (~replay@pdpc/supporter/student/replay) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-06 20:39:31	--	vili_ is now known as vili
2016-09-06 20:39:50	apes	Any recommendations on how to use a secret value in a build.sbt? I'm trying to use flyway, and it requires a db password.
2016-09-06 20:40:12	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 20:40:33	pfn	add a secret.sbt that you don't check in
2016-09-06 20:41:59	-->	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has joined #scala
2016-09-06 20:42:01	felher	tpolecat: thanks, i'll take a look at that :)
2016-09-06 20:42:20	--	irc: disconnected from server
2016-09-06 20:42:23	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-06 20:42:23	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-06 20:42:23	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-06 20:42:23	--	Channel #scala: 410 nicks (0 ops, 0 voices, 410 normals)
2016-09-06 20:42:23	***	Buffer Playback...
2016-09-06 20:42:23	zeryx	[16:02:57] slack is a fanastic tool and I'm happy its available, really useful for when you're a remote worker like me
2016-09-06 20:42:23	adelbertc	[16:03:33] good news folks, Randy says he'll check in
2016-09-06 20:42:23	adelbertc	[16:03:37] he just walked by me with a plate of salad
2016-09-06 20:42:23	pfurla	[16:04:15] wow, jADT look quite useful if you are stuck in java
2016-09-06 20:42:23	pfurla	[16:04:42] so Randy if going to check in by the salad bar
2016-09-06 20:42:23	pfurla	[16:05:47] tnks: back to what was saying about showing oo modeling vs fp modeling
2016-09-06 20:42:23	pfurla	[16:06:36] tnks: is like modeling xml with bnf vs modeling xml with oo type hierarchies
2016-09-06 20:42:23	pfurla	[16:06:53] but noway I am getting into that with my DS team
2016-09-06 20:42:23	tpolecat	[16:07:53] I found that since I started doing FP I no longer draw boxes and arrows. I just write down types on the board.
2016-09-06 20:42:23	tpolecat	[16:08:07] My way of thinking about modeling is totally different.
2016-09-06 20:42:23	pfurla	[16:08:59] i still like relational data modeling and still do it and somewhat mapped to atds
2016-09-06 20:42:23	pfurla	[16:09:01] adts
2016-09-06 20:42:23	pfurla	[16:09:14] *still do
2016-09-06 20:42:23	RSchulzB	[16:18:50] Rumors of my death are greatly exaggerated…
2016-09-06 20:42:23	tpolecat	[16:19:30] how do we know you're not a ghost
2016-09-06 20:42:23	RSchulzB	[16:19:42] Some sort of Turing test?
2016-09-06 20:42:23	bizarrefish	[16:19:53] My diagrams would make UML people cry
2016-09-06 20:42:23	bizarrefish	[16:20:23] Architecture and intent are most important to convey, UML conveys implementation
2016-09-06 20:42:23	pfurla	[16:24:17] hey Randall! How are you?
2016-09-06 20:42:23	pfurla	[16:28:30] RSchulzB ^
2016-09-06 20:42:23	RSchulzB	[16:39:47] Pretty good. My company switched from Jabber to Slack and I haven’t launched Adium (where I get IRC access) since.
2016-09-06 20:42:23	RSchulzB	[16:40:08] pfurla: How about you?
2016-09-06 20:42:23	linoge	[16:42:33] Where should I go for scala on android discussion? Specifically Macroid?
2016-09-06 20:42:23	pfurla	[16:43:57] Doing great, RSchulzB, slowly becoming a New Yorker (a polite one) :) Is Box still treating you well?
2016-09-06 20:42:23	felher	[16:51:32] Hey folks. Any recommend talk on why I would want a free monad? I think I undestand how it works and I think I could build `Free[F, A]` myself without looking anything up, but I'm lost as to why I would want one.
2016-09-06 20:42:23	felher	[16:51:34] A talk like "here is the problem solved with a simple recursive ADT and an interpreter" to "here is the problem solved much nicer with a free monad and an interpreter" would really help, I guess. :)
2016-09-06 20:42:23	dibblego	[16:52:42] felher: referential transparency is preserved in the latter case.
2016-09-06 20:42:23	RSchulzB	[16:53:30] pfurla: A New Yorker, eh? Culture shock?? … Anyway, yes, I’m still really liking working at Box!
2016-09-06 20:42:23	adelbertc	[16:53:37] felher: you could jsut use an ADT and an interpreter, but you wont get as much power. you end up reinventing parts of Free if you want, say, stack safety, monadic combinators, being able to compose them, etc.
2016-09-06 20:42:23	pfurla	[17:00:24] RSchulzB: not really, here is a lot like Rio, only cleaner and the cops don't give the creeps 
2016-09-06 20:42:23	pfurla	[17:00:40] oh and colder most of the time
2016-09-06 20:42:23	RSchulzB	[17:00:49] Have you been through a winter there yet?
2016-09-06 20:42:23	felher	[17:01:05] dibblego: I dont see why an recursive ADT with an interpreter wouldn't be referentially transparent? Maybe I'm missing something here?
2016-09-06 20:42:23	felher	[17:01:07] adelbertc: Yeah, okay, I can see that. Turning my `List[Free[F, A]]` into a `Free[F, List[A]]` via sequence certainly seems useful, for example. The stack safety part I don't get yet, because the ADT would live on the heap anyway and the interpreter could be build stack unsafe in both cases, I gues. 
2016-09-06 20:42:23	pfurla	[17:01:24] yep I have, last one, first time ever to expeirence snow
2016-09-06 20:42:23	dibblego	[17:01:45] felher: Then what might you mean by a recursive ADT other than Free? Maybe try writing the code?
2016-09-06 20:42:23	felher	[17:02:54] dibblego: will do, thanks. Maybe I have a thinko somewhere and will stumble upon it as soon as I try to type it. :)
2016-09-06 20:42:23	dibblego	[17:02:58] ok
2016-09-06 20:42:23	dibblego	[17:06:59] to be clear, you typically use Free against a legacy API where referential transparency is not preserved, otherwise yeah, just use a regular ADT
2016-09-06 20:42:23	felher	[17:10:52] Oh, didn't know that. That actually helps me quite a bit to put things into perspective. Thanks
2016-09-06 20:42:23	dibblego	[17:11:32] ok
2016-09-06 20:42:23	tpolecat	[17:54:21] felher: i did a talk on doobie that explains a useful application https://www.youtube.com/watch?v=M5MF6M7FHPo
2016-09-06 20:42:23	tpolecat	[17:54:59] you can also use Free to represent things other than computations
2016-09-06 20:42:23	tpolecat	[17:55:19] Free[List,A] for arbitrary nested lists of A
2016-09-06 20:42:23	tpolecat	[17:55:22] for instance
2016-09-06 20:42:23	tpolecat	[18:00:05] but the most common application is probably little DSLs and it's great for that
2016-09-06 20:42:23	tpolecat	[18:04:26] and this just appeard on the tweeter http://perevillega.com/understanding-free-monads
2016-09-06 20:42:23	apes	[20:39:50] Any recommendations on how to use a secret value in a build.sbt? I'm trying to use flyway, and it requires a db password.
2016-09-06 20:42:23	pfn	[20:40:33] add a secret.sbt that you don't check in
2016-09-06 20:42:23	felher	[20:42:01] tpolecat: thanks, i'll take a look at that :)
2016-09-06 20:42:23	***	Playback Complete.
2016-09-06 20:42:33	--	irc: disconnected from server
2016-09-06 20:43:27	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-06 20:43:27	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-06 20:43:27	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-06 20:43:27	--	Channel #scala: 410 nicks (0 ops, 0 voices, 410 normals)
2016-09-06 20:43:27	***	Buffer Playback...
2016-09-06 20:43:27	pfurla	[16:04:15] wow, jADT look quite useful if you are stuck in java
2016-09-06 20:43:27	pfurla	[16:04:42] so Randy if going to check in by the salad bar
2016-09-06 20:43:27	pfurla	[16:05:47] tnks: back to what was saying about showing oo modeling vs fp modeling
2016-09-06 20:43:27	pfurla	[16:06:36] tnks: is like modeling xml with bnf vs modeling xml with oo type hierarchies
2016-09-06 20:43:27	pfurla	[16:06:53] but noway I am getting into that with my DS team
2016-09-06 20:43:27	tpolecat	[16:07:53] I found that since I started doing FP I no longer draw boxes and arrows. I just write down types on the board.
2016-09-06 20:43:27	tpolecat	[16:08:07] My way of thinking about modeling is totally different.
2016-09-06 20:43:27	pfurla	[16:08:59] i still like relational data modeling and still do it and somewhat mapped to atds
2016-09-06 20:43:27	pfurla	[16:09:01] adts
2016-09-06 20:43:27	pfurla	[16:09:14] *still do
2016-09-06 20:43:27	RSchulzB	[16:18:50] Rumors of my death are greatly exaggerated…
2016-09-06 20:43:27	tpolecat	[16:19:30] how do we know you're not a ghost
2016-09-06 20:43:27	RSchulzB	[16:19:42] Some sort of Turing test?
2016-09-06 20:43:27	bizarrefish	[16:19:53] My diagrams would make UML people cry
2016-09-06 20:43:27	bizarrefish	[16:20:23] Architecture and intent are most important to convey, UML conveys implementation
2016-09-06 20:43:27	pfurla	[16:24:17] hey Randall! How are you?
2016-09-06 20:43:27	pfurla	[16:28:30] RSchulzB ^
2016-09-06 20:43:27	RSchulzB	[16:39:47] Pretty good. My company switched from Jabber to Slack and I haven’t launched Adium (where I get IRC access) since.
2016-09-06 20:43:27	RSchulzB	[16:40:08] pfurla: How about you?
2016-09-06 20:43:27	linoge	[16:42:33] Where should I go for scala on android discussion? Specifically Macroid?
2016-09-06 20:43:27	pfurla	[16:43:57] Doing great, RSchulzB, slowly becoming a New Yorker (a polite one) :) Is Box still treating you well?
2016-09-06 20:43:27	felher	[16:51:32] Hey folks. Any recommend talk on why I would want a free monad? I think I undestand how it works and I think I could build `Free[F, A]` myself without looking anything up, but I'm lost as to why I would want one.
2016-09-06 20:43:27	felher	[16:51:34] A talk like "here is the problem solved with a simple recursive ADT and an interpreter" to "here is the problem solved much nicer with a free monad and an interpreter" would really help, I guess. :)
2016-09-06 20:43:27	dibblego	[16:52:42] felher: referential transparency is preserved in the latter case.
2016-09-06 20:43:27	RSchulzB	[16:53:30] pfurla: A New Yorker, eh? Culture shock?? … Anyway, yes, I’m still really liking working at Box!
2016-09-06 20:43:27	adelbertc	[16:53:37] felher: you could jsut use an ADT and an interpreter, but you wont get as much power. you end up reinventing parts of Free if you want, say, stack safety, monadic combinators, being able to compose them, etc.
2016-09-06 20:43:27	pfurla	[17:00:24] RSchulzB: not really, here is a lot like Rio, only cleaner and the cops don't give the creeps 
2016-09-06 20:43:27	pfurla	[17:00:40] oh and colder most of the time
2016-09-06 20:43:27	RSchulzB	[17:00:49] Have you been through a winter there yet?
2016-09-06 20:43:27	felher	[17:01:05] dibblego: I dont see why an recursive ADT with an interpreter wouldn't be referentially transparent? Maybe I'm missing something here?
2016-09-06 20:43:27	felher	[17:01:07] adelbertc: Yeah, okay, I can see that. Turning my `List[Free[F, A]]` into a `Free[F, List[A]]` via sequence certainly seems useful, for example. The stack safety part I don't get yet, because the ADT would live on the heap anyway and the interpreter could be build stack unsafe in both cases, I gues. 
2016-09-06 20:43:27	pfurla	[17:01:24] yep I have, last one, first time ever to expeirence snow
2016-09-06 20:43:27	dibblego	[17:01:45] felher: Then what might you mean by a recursive ADT other than Free? Maybe try writing the code?
2016-09-06 20:43:27	felher	[17:02:54] dibblego: will do, thanks. Maybe I have a thinko somewhere and will stumble upon it as soon as I try to type it. :)
2016-09-06 20:43:27	dibblego	[17:02:58] ok
2016-09-06 20:43:27	dibblego	[17:06:59] to be clear, you typically use Free against a legacy API where referential transparency is not preserved, otherwise yeah, just use a regular ADT
2016-09-06 20:43:27	felher	[17:10:52] Oh, didn't know that. That actually helps me quite a bit to put things into perspective. Thanks
2016-09-06 20:43:27	dibblego	[17:11:32] ok
2016-09-06 20:43:27	tpolecat	[17:54:21] felher: i did a talk on doobie that explains a useful application https://www.youtube.com/watch?v=M5MF6M7FHPo
2016-09-06 20:43:27	tpolecat	[17:54:59] you can also use Free to represent things other than computations
2016-09-06 20:43:27	tpolecat	[17:55:19] Free[List,A] for arbitrary nested lists of A
2016-09-06 20:43:27	tpolecat	[17:55:22] for instance
2016-09-06 20:43:27	tpolecat	[18:00:05] but the most common application is probably little DSLs and it's great for that
2016-09-06 20:43:27	tpolecat	[18:04:26] and this just appeard on the tweeter http://perevillega.com/understanding-free-monads
2016-09-06 20:43:27	apes	[20:39:50] Any recommendations on how to use a secret value in a build.sbt? I'm trying to use flyway, and it requires a db password.
2016-09-06 20:43:27	pfn	[20:40:33] add a secret.sbt that you don't check in
2016-09-06 20:43:27	felher	[20:42:01] tpolecat: thanks, i'll take a look at that :)
2016-09-06 20:43:27	apes	[20:43:01] pfn: Put it under project/ ?
2016-09-06 20:43:27	pfn	[20:43:07] no
2016-09-06 20:43:27	pfn	[20:43:19] project/ is for metabuild only
2016-09-06 20:43:27	***	Playback Complete.
2016-09-06 20:43:40	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-06 20:44:38	apes	Next to the build.sbt then? How would you load values from it?
2016-09-06 20:44:52	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 255 seconds)
2016-09-06 20:46:06	felher	(And with "at that" I mean at both things, the talk as well as the blog post)
2016-09-06 20:46:12	-->	pamplemousse (~pamplemou@70.48.137.39) has joined #scala
2016-09-06 20:46:13	-->	PSoBI (~latner@172.56.16.57) has joined #scala
2016-09-06 20:46:33	-->	Big_G (Big_G@c.24.56.239.123.static.broadstripe.net) has joined #scala
2016-09-06 20:47:04	<--	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has quit (Ping timeout: 249 seconds)
2016-09-06 20:47:33	<--	kembrek (~kembrek@05473c1c.skybroadband.com) has quit (Quit: leaving)
2016-09-06 20:48:11	pfn	apes, it's automatic
2016-09-06 20:48:22	pfn	apes, all sbt files are evaluated
2016-09-06 20:48:38	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-06 20:49:43	pfn	so set your password setting in the secret.sbt
2016-09-06 20:50:11	pfn	alternatively, you can just read a local file from the setting definition 
2016-09-06 20:50:44	pfn	passwordSetting := IO.readLines(passwordfile).head.trim
2016-09-06 20:51:46	apes	pfn: Wouldn't the order matter for how sbt reads the files?
2016-09-06 20:51:59	<--	avocado (~avocado@unaffiliated/avocado) has quit (Quit: WeeChat 1.4)
2016-09-06 20:52:08	apes	I can't seem to get it to work by just moving the secrets to the new file
2016-09-06 20:53:08	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 250 seconds)
2016-09-06 20:55:20	-->	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has joined #scala
2016-09-06 20:58:39	<--	shinnya (~shinnya@245.144.137.133.dy.bbexcite.jp) has quit (Ping timeout: 264 seconds)
2016-09-06 21:00:39	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-06 21:01:32	pfn	sbt reads in order alphabetically
2016-09-06 21:01:53	pfn	you can't get it to work. because of. doing it wrong :p
2016-09-06 21:02:52	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 21:04:31	<--	ghounds (~gabriel@NYUFWA-WLESSAUTHCLIENTS-06.NATPOOL.NYU.EDU) has quit (Quit: Lost terminal)
2016-09-06 21:05:04	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 252 seconds)
2016-09-06 21:08:05	-->	omefire (~omefire@24.18.128.19) has joined #scala
2016-09-06 21:11:04	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-06 21:12:44	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-06 21:15:49	<--	isdf (~df@unaffiliated/isdf) has quit (Ping timeout: 244 seconds)
2016-09-06 21:16:44	apes	:(  http://www.design.caltech.edu/erik/Misc/balloon.html 
2016-09-06 21:16:50	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 250 seconds)
2016-09-06 21:19:31	<--	nbg (~nbg@5.146.51.114) has quit (Ping timeout: 255 seconds)
2016-09-06 21:20:43	-->	nbg (~nbg@5.146.51.114) has joined #scala
2016-09-06 21:21:54	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-06 21:22:08	pfn	you describe yourself well
2016-09-06 21:22:17	<--	veegee (~textual@206-169-144-162.static.twtelecom.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-06 21:22:24	pfn	"it doesn't work" is the most useless request for help
2016-09-06 21:22:26	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 21:22:40	pfn	I'm not. going to. play 20 questions to guide you to an answer
2016-09-06 21:22:55	pfn	I will only help you as much as you are willing to help yourself
2016-09-06 21:23:52	<--	PSoBI (~latner@172.56.16.57) has quit (Ping timeout: 240 seconds)
2016-09-06 21:24:40	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-06 21:25:05	-->	veegee (~textual@206-169-144-162.static.twtelecom.net) has joined #scala
2016-09-06 21:27:19	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 260 seconds)
2016-09-06 21:29:16	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 252 seconds)
2016-09-06 21:29:34	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-06 21:29:51	<--	veegee (~textual@206-169-144-162.static.twtelecom.net) has quit (Ping timeout: 264 seconds)
2016-09-06 21:34:39	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2016-09-06 21:34:51	<--	jedws (~jedws@eth59-167-133-100.static.internode.on.net) has quit (Read error: Connection reset by peer)
2016-09-06 21:35:00	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 21:35:02	-->	jedws (~jedws@eth59-167-133-100.static.internode.on.net) has joined #scala
2016-09-06 21:35:56	<--	vili (~nick@cpe-173-91-55-5.neo.res.rr.com) has quit (Remote host closed the connection)
2016-09-06 21:36:16	-->	Sasazuka__ (~Sasazuka@unaffiliated/sasazuka) has joined #scala
2016-09-06 21:36:32	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-06 21:37:04	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 21:37:13	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-06 21:37:29	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 21:39:10	<--	Sasazuka (~Sasazuka@unaffiliated/sasazuka) has quit (Ping timeout: 252 seconds)
2016-09-06 21:40:43	-->	||1 (~bot@173-13-139-237-sfba.hfc.comcastbusiness.net) has joined #scala
2016-09-06 21:41:31	<--	Insolsence (~Insolsenc@46.166.190.144) has quit (Quit: Leaving)
2016-09-06 21:42:45	-->	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has joined #scala
2016-09-06 21:43:01	<--	|| (~bot@173-13-139-237-sfba.hfc.comcastbusiness.net) has quit (Ping timeout: 252 seconds)
2016-09-06 21:45:39	-->	gorbulas (~gorbulas@unaffiliated/gorbulas) has joined #scala
2016-09-06 21:47:51	<--	przl (~przlrkt@p5DD1445B.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2016-09-06 21:54:11	pfn	apparently, not very willing
2016-09-06 21:57:15	<--	Sasazuka__ (~Sasazuka@unaffiliated/sasazuka) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-06 22:00:41	-->	jade-shan (~jade@101.81.254.222) has joined #scala
2016-09-06 22:02:26	<--	Arrgh (~alex@70.36.63.98) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-06 22:03:31	<--	asteve (~asteve@unaffiliated/kxsteve) has quit (Quit: .)
2016-09-06 22:05:38	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2016-09-06 22:07:36	-->	asteve (~asteve@unaffiliated/kxsteve) has joined #scala
2016-09-06 22:10:04	<--	virtualeyes (~godenji@c-50-138-183-78.hsd1.ma.comcast.net) has quit (Ping timeout: 264 seconds)
2016-09-06 22:12:10	<--	hexagoxel (~hexagoxel@p200300798F1CFE00021E33FFFE2231E9.dip0.t-ipconnect.de) has quit (Ping timeout: 255 seconds)
2016-09-06 22:14:09	<--	waqas (~Adium@216.174.114.140) has quit (Quit: Leaving.)
2016-09-06 22:14:28	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-06 22:15:03	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 22:15:32	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-06 22:15:44	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 22:17:09	-->	hexagoxel (~hexagoxel@p4FCCC599.dip0.t-ipconnect.de) has joined #scala
2016-09-06 22:17:17	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-06 22:17:51	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 22:18:52	-->	zmack (~zmack@86.127.155.248) has joined #scala
2016-09-06 22:22:04	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-06 22:23:16	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 22:23:41	<--	smendenh (~textual@162-229-180-208.lightspeed.rlghnc.sbcglobal.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-06 22:30:13	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-06 22:30:50	-->	gli (~gli@119.254.120.72) has joined #scala
2016-09-06 22:33:46	<--	adelbertc (uid26183@gateway/web/irccloud.com/x-nofdbderjtpzagvl) has quit (Quit: Connection closed for inactivity)
2016-09-06 22:34:58	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 250 seconds)
2016-09-06 22:36:07	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-06 22:36:33	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 240 seconds)
2016-09-06 22:38:48	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-06 22:39:12	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-06 22:39:47	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 22:39:52	<--	banandana (~banandana@107.170.201.163) has quit (Quit: WeeChat 1.6-dev)
2016-09-06 22:40:15	-->	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has joined #scala
2016-09-06 22:40:15	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-06 22:40:32	<--	qrvpzvb (~qrvpzvb@ppp089210001174.access.hol.gr) has quit (Ping timeout: 244 seconds)
2016-09-06 22:42:11	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-06 22:43:03	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 240 seconds)
2016-09-06 22:43:24	-->	Hoffman (~Hoffman@unaffiliated/hoffman) has joined #scala
2016-09-06 22:43:30	-->	przl (~przlrkt@p5DD1576E.dip0.t-ipconnect.de) has joined #scala
2016-09-06 22:43:56	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 250 seconds)
2016-09-06 22:44:42	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-09-06 22:45:19	-->	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-06 22:45:20	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-06 22:46:15	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-06 22:47:15	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-06 22:48:33	<--	przl (~przlrkt@p5DD1576E.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2016-09-06 22:52:42	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-06 22:52:43	<--	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-06 22:53:12	-->	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-06 22:53:13	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-06 22:53:25	<--	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-06 22:55:37	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 252 seconds)
2016-09-06 22:58:13	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-06 22:58:22	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Ping timeout: 252 seconds)
2016-09-06 22:58:40	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-06 22:59:26	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-09-06 23:02:24	-->	shergill (~shergill@2607:f2c0:9400:3d00:845c:13ef:eb65:e21a) has joined #scala
2016-09-06 23:02:33	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-09-06 23:03:17	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 23:03:33	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-06 23:04:12	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 276 seconds)
2016-09-06 23:04:54	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-09-06 23:06:29	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-06 23:06:36	<--	shergill (~shergill@2607:f2c0:9400:3d00:845c:13ef:eb65:e21a) has quit (Ping timeout: 250 seconds)
2016-09-06 23:07:06	<--	asteve (~asteve@unaffiliated/kxsteve) has quit (Quit: .)
2016-09-06 23:08:26	-->	adelbertc (uid26183@gateway/web/irccloud.com/x-jwfoqcbvnvnbjnsj) has joined #scala
2016-09-06 23:10:35	-->	RainFlying (~RainFlyin@222.44.41.33) has joined #scala
2016-09-06 23:19:22	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-06 23:19:56	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 23:19:57	-->	mheld (uid5329@gateway/web/irccloud.com/x-bfcgxqqqfztzptgi) has joined #scala
2016-09-06 23:21:11	<--	pfurla (~textual@ool-2f12d419.dyn.optonline.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-06 23:21:20	<--	jedws (~jedws@eth59-167-133-100.static.internode.on.net) has quit (Read error: Connection reset by peer)
2016-09-06 23:22:23	-->	jedws (~jedws@eth59-167-133-100.static.internode.on.net) has joined #scala
2016-09-06 23:23:57	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-06 23:24:09	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 23:26:20	-->	eklavya (~eklavya@117.204.254.10) has joined #scala
2016-09-06 23:26:52	-->	waqas (~Adium@2605:6000:ee43:2e00:dce1:d5a8:9bf7:c3b7) has joined #scala
2016-09-06 23:29:26	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-09-06 23:30:12	<--	acidjnk (~havenone@p5DC96996.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2016-09-06 23:31:40	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-06 23:35:38	<--	herenow (~znc@162.243.65.147) has quit (Quit: ZNC - http://znc.in)
2016-09-06 23:36:00	-->	circ-user-OBsh3 (~circuser-@82.131.32.35.cable.starman.ee) has joined #scala
2016-09-06 23:36:46	-->	banandana (~banandana@107.170.201.163) has joined #scala
2016-09-06 23:38:25	<--	drumr (~drumr@ip68-225-223-26.ph.ph.cox.net) has quit (Ping timeout: 244 seconds)
2016-09-06 23:39:12	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-06 23:39:45	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 23:39:54	<--	eklavya (~eklavya@117.204.254.10) has quit (Remote host closed the connection)
2016-09-06 23:42:54	<--	banandana (~banandana@107.170.201.163) has quit (Quit: WeeChat 1.6-dev)
2016-09-06 23:43:04	-->	banandana (~banandana@107.170.201.163) has joined #scala
2016-09-06 23:43:56	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 244 seconds)
2016-09-06 23:44:16	-->	przl (~przlrkt@p5DD1576E.dip0.t-ipconnect.de) has joined #scala
2016-09-06 23:49:03	<--	przl (~przlrkt@p5DD1576E.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2016-09-06 23:52:48	-->	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has joined #scala
2016-09-06 23:54:59	<--	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has quit (Client Quit)
2016-09-06 23:57:09	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-06 23:58:02	-->	coltfred (~coltfred@71.15.193.15) has joined #scala
2016-09-06 23:59:31	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-06 23:59:35	-->	herenow (~znc@162.243.65.147) has joined #scala
2016-09-07 00:02:27	-->	Sorella (uid49404@oftn/oswg-member/Sorella) has joined #scala
2016-09-07 00:04:14	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 250 seconds)
2016-09-07 00:04:22	<--	RainFlying (~RainFlyin@222.44.41.33) has quit (Ping timeout: 252 seconds)
2016-09-07 00:09:21	-->	pfurla (~textual@ool-2f12d419.dyn.optonline.net) has joined #scala
2016-09-07 00:11:05	-->	waqas1 (~Adium@cpe-70-112-247-182.austin.res.rr.com) has joined #scala
2016-09-07 00:11:10	<--	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has quit (Quit: nomicflux)
2016-09-07 00:12:19	<--	waqas (~Adium@2605:6000:ee43:2e00:dce1:d5a8:9bf7:c3b7) has quit (Ping timeout: 255 seconds)
2016-09-07 00:15:24	-->	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has joined #scala
2016-09-07 00:17:11	<--	pamplemousse (~pamplemou@70.48.137.39) has quit (Quit: WeeChat 1.5)
2016-09-07 00:18:05	-->	eklavya (~eklavya@117.204.253.45) has joined #scala
2016-09-07 00:18:18	<--	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-09-07 00:18:59	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-07 00:19:35	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-07 00:24:10	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-07 00:33:00	<--	ganeshraju (~Adium@72.46.219.230) has quit (Quit: Leaving.)
2016-09-07 00:35:01	<--	Big_G (Big_G@c.24.56.239.123.static.broadstripe.net) has quit (Read error: Connection reset by peer)
2016-09-07 00:37:34	-->	hamid (~nithp@unaffiliated/hamid) has joined #scala
2016-09-07 00:43:07	--	irc: disconnected from server
2016-09-07 02:15:22	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-07 02:15:22	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-07 02:15:22	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-07 02:15:22	--	Channel #scala: 396 nicks (0 ops, 0 voices, 396 normals)
2016-09-07 02:15:22	***	Buffer Playback...
2016-09-07 02:15:22	tpolecat	[17:54:21] felher: i did a talk on doobie that explains a useful application https://www.youtube.com/watch?v=M5MF6M7FHPo
2016-09-07 02:15:22	tpolecat	[17:54:59] you can also use Free to represent things other than computations
2016-09-07 02:15:22	tpolecat	[17:55:19] Free[List,A] for arbitrary nested lists of A
2016-09-07 02:15:22	tpolecat	[17:55:22] for instance
2016-09-07 02:15:22	tpolecat	[18:00:05] but the most common application is probably little DSLs and it's great for that
2016-09-07 02:15:22	tpolecat	[18:04:26] and this just appeard on the tweeter http://perevillega.com/understanding-free-monads
2016-09-07 02:15:22	apes	[20:39:50] Any recommendations on how to use a secret value in a build.sbt? I'm trying to use flyway, and it requires a db password.
2016-09-07 02:15:22	pfn	[20:40:33] add a secret.sbt that you don't check in
2016-09-07 02:15:22	felher	[20:42:01] tpolecat: thanks, i'll take a look at that :)
2016-09-07 02:15:22	apes	[20:43:01] pfn: Put it under project/ ?
2016-09-07 02:15:22	pfn	[20:43:07] no
2016-09-07 02:15:22	pfn	[20:43:19] project/ is for metabuild only
2016-09-07 02:15:22	apes	[20:44:38] Next to the build.sbt then? How would you load values from it?
2016-09-07 02:15:22	felher	[20:46:06] (And with "at that" I mean at both things, the talk as well as the blog post)
2016-09-07 02:15:22	pfn	[20:48:11] apes, it's automatic
2016-09-07 02:15:22	pfn	[20:48:22] apes, all sbt files are evaluated
2016-09-07 02:15:22	pfn	[20:49:43] so set your password setting in the secret.sbt
2016-09-07 02:15:22	pfn	[20:50:11] alternatively, you can just read a local file from the setting definition 
2016-09-07 02:15:22	pfn	[20:50:44] passwordSetting := IO.readLines(passwordfile).head.trim
2016-09-07 02:15:22	apes	[20:51:46] pfn: Wouldn't the order matter for how sbt reads the files?
2016-09-07 02:15:22	apes	[20:52:08] I can't seem to get it to work by just moving the secrets to the new file
2016-09-07 02:15:22	pfn	[21:01:32] sbt reads in order alphabetically
2016-09-07 02:15:22	pfn	[21:01:53] you can't get it to work. because of. doing it wrong :p
2016-09-07 02:15:22	apes	[21:16:44] :(  http://www.design.caltech.edu/erik/Misc/balloon.html 
2016-09-07 02:15:22	pfn	[21:22:08] you describe yourself well
2016-09-07 02:15:22	pfn	[21:22:24] "it doesn't work" is the most useless request for help
2016-09-07 02:15:22	pfn	[21:22:40] I'm not. going to. play 20 questions to guide you to an answer
2016-09-07 02:15:22	pfn	[21:22:55] I will only help you as much as you are willing to help yourself
2016-09-07 02:15:22	pfn	[21:54:11] apparently, not very willing
2016-09-07 02:15:22	[poe]jdk	[01:57:33] I have a List[(A, Option[B])], I want to reduce this to a List[(A, B)] ... any ideas? If it were just List[Option[B]] I could do .flatten, but since it's inside the tuple I can't really do that.
2016-09-07 02:15:22	dibblego	[01:58:09] what would List((a1, None), (a2, Some(b)) reduce to?
2016-09-07 02:15:22	[poe]jdk	[01:58:18] List(a2, Some(b))
2016-09-07 02:15:22	[poe]jdk	[01:58:28] er,
2016-09-07 02:15:22	dibblego	[01:58:30] that's not consistent with the type you said
2016-09-07 02:15:22	[poe]jdk	[01:58:31] List(a2, b)
2016-09-07 02:15:22	dibblego	[01:58:40] so a1 is lost?
2016-09-07 02:15:22	[poe]jdk	[01:58:47] yes, I want to drop None's
2016-09-07 02:15:22	dibblego	[01:59:04] flatMap that shit
2016-09-07 02:15:22	adelbertc	[01:59:15] collect might also work
2016-09-07 02:15:22	adelbertc	[02:00:10] ! val list: List[(Int, Option[String])] = List((1, Some(1)), (2, None), (3, Some(3))); list.collect { case x@(_, Some(_)) => x }
2016-09-07 02:15:22	multibot_	[02:00:14]  error: type mismatch;
2016-09-07 02:15:22	multibot_	[02:00:15]   found   : Int(1)
2016-09-07 02:15:22	multibot_	[02:00:16]   required: String
2016-09-07 02:15:22	multibot_	[02:00:17]         val list: List[(Int, Option[String])] = List((1, Some(1)), (2, None), (3, Some(3)));;
2016-09-07 02:15:22	multibot_	[02:00:18]                                                               ^
2016-09-07 02:15:22	adelbertc	[02:00:25] ! val list: List[(Int, Option[Int])] = List((1, Some(1)), (2, None), (3, Some(3))); list.collect { case x@(_, Some(_)) => x }
2016-09-07 02:15:22	multibot_	[02:00:27]  list: List[(Int, Option[Int])] = List((1,Some(1)), (2,None), (3,Some(3)))
2016-09-07 02:15:22	multibot_	[02:00:28]  List[(Int, Option[Int])] = List((1,Some(1)), (3,Some(3)))
2016-09-07 02:15:22	dibblego	[02:00:32] def f[A, B](x: List[(A, Option[B])]): List[(A, B)] = x flatMap { case (a, b) => b.toList map ((a, _)) }
2016-09-07 02:15:22	[poe]jdk	[02:01:08] cool, thanks guys, I know where to go with this now
2016-09-07 02:15:22	***	Playback Complete.
2016-09-07 02:15:35	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-07 02:16:41	-->	przl (~przlrkt@p5DD1576E.dip0.t-ipconnect.de) has joined #scala
2016-09-07 02:18:34	<--	omefire (~omefire@24.18.128.19) has quit (Ping timeout: 265 seconds)
2016-09-07 02:20:24	-->	firstdayonthejob (~firstdayo@cpc99346-croy26-2-0-cust153.19-2.cable.virginm.net) has joined #scala
2016-09-07 02:22:07	-->	overlord_tm (~andraz@5-255-217-91.xlab.si) has joined #scala
2016-09-07 02:23:06	<--	przl (~przlrkt@p5DD1576E.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2016-09-07 02:23:58	<--	uglyfigurine (~uglyfigur@c-67-162-80-70.hsd1.il.comcast.net) has quit (Ping timeout: 265 seconds)
2016-09-07 02:25:45	<--	waqas1 (~Adium@cpe-70-112-247-182.austin.res.rr.com) has quit (Quit: Leaving.)
2016-09-07 02:26:10	-->	jablo (~jablo@80.243.123.111) has joined #scala
2016-09-07 02:29:36	-->	hellseher (~hellseher@109.195.23.108) has joined #scala
2016-09-07 02:31:25	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-07 02:31:49	-->	vili_ (~nick@cpe-173-91-55-5.neo.res.rr.com) has joined #scala
2016-09-07 02:33:20	-->	xnavor (~xnavor@78-70-4-240-no171.business.telia.com) has joined #scala
2016-09-07 02:34:39	-->	Spockz (~spockz@145.221.187.242) has joined #scala
2016-09-07 02:35:11	<--	xnavor (~xnavor@78-70-4-240-no171.business.telia.com) has quit (Client Quit)
2016-09-07 02:39:59	-->	red1ynx (~dzmitry@37.17.34.68) has joined #scala
2016-09-07 02:42:59	-->	jedws (~jedws@eth59-167-133-100.static.internode.on.net) has joined #scala
2016-09-07 02:43:54	<--	firstdayonthejob (~firstdayo@cpc99346-croy26-2-0-cust153.19-2.cable.virginm.net) has quit (Ping timeout: 244 seconds)
2016-09-07 02:45:09	oal	Is it possible to do something like this? val directions = List() ++ if(square.maybeTop) { List(Right) } else { List() } ?
2016-09-07 02:45:33	oal	And have more ++ for the rest of the directions
2016-09-07 02:45:54	--	irc: disconnected from server
2016-09-07 09:43:19	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-07 09:43:19	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-07 09:43:19	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-07 09:43:19	--	Channel #scala: 427 nicks (0 ops, 0 voices, 427 normals)
2016-09-07 09:43:19	***	Buffer Playback...
2016-09-07 09:43:19	pfn	[20:50:11] alternatively, you can just read a local file from the setting definition 
2016-09-07 09:43:19	pfn	[20:50:44] passwordSetting := IO.readLines(passwordfile).head.trim
2016-09-07 09:43:19	apes	[20:51:46] pfn: Wouldn't the order matter for how sbt reads the files?
2016-09-07 09:43:19	apes	[20:52:08] I can't seem to get it to work by just moving the secrets to the new file
2016-09-07 09:43:19	pfn	[21:01:32] sbt reads in order alphabetically
2016-09-07 09:43:19	pfn	[21:01:53] you can't get it to work. because of. doing it wrong :p
2016-09-07 09:43:19	apes	[21:16:44] :(  http://www.design.caltech.edu/erik/Misc/balloon.html 
2016-09-07 09:43:19	pfn	[21:22:08] you describe yourself well
2016-09-07 09:43:19	pfn	[21:22:24] "it doesn't work" is the most useless request for help
2016-09-07 09:43:19	pfn	[21:22:40] I'm not. going to. play 20 questions to guide you to an answer
2016-09-07 09:43:19	pfn	[21:22:55] I will only help you as much as you are willing to help yourself
2016-09-07 09:43:19	pfn	[21:54:11] apparently, not very willing
2016-09-07 09:43:19	[poe]jdk	[01:57:33] I have a List[(A, Option[B])], I want to reduce this to a List[(A, B)] ... any ideas? If it were just List[Option[B]] I could do .flatten, but since it's inside the tuple I can't really do that.
2016-09-07 09:43:19	dibblego	[01:58:09] what would List((a1, None), (a2, Some(b)) reduce to?
2016-09-07 09:43:19	[poe]jdk	[01:58:18] List(a2, Some(b))
2016-09-07 09:43:19	[poe]jdk	[01:58:28] er,
2016-09-07 09:43:19	dibblego	[01:58:30] that's not consistent with the type you said
2016-09-07 09:43:19	[poe]jdk	[01:58:31] List(a2, b)
2016-09-07 09:43:19	dibblego	[01:58:40] so a1 is lost?
2016-09-07 09:43:19	[poe]jdk	[01:58:47] yes, I want to drop None's
2016-09-07 09:43:19	dibblego	[01:59:04] flatMap that shit
2016-09-07 09:43:19	adelbertc	[01:59:15] collect might also work
2016-09-07 09:43:19	adelbertc	[02:00:10] ! val list: List[(Int, Option[String])] = List((1, Some(1)), (2, None), (3, Some(3))); list.collect { case x@(_, Some(_)) => x }
2016-09-07 09:43:19	multibot_	[02:00:14]  error: type mismatch;
2016-09-07 09:43:19	multibot_	[02:00:15]   found   : Int(1)
2016-09-07 09:43:19	multibot_	[02:00:16]   required: String
2016-09-07 09:43:19	multibot_	[02:00:17]         val list: List[(Int, Option[String])] = List((1, Some(1)), (2, None), (3, Some(3)));;
2016-09-07 09:43:19	multibot_	[02:00:18]                                                               ^
2016-09-07 09:43:19	adelbertc	[02:00:25] ! val list: List[(Int, Option[Int])] = List((1, Some(1)), (2, None), (3, Some(3))); list.collect { case x@(_, Some(_)) => x }
2016-09-07 09:43:19	multibot_	[02:00:27]  list: List[(Int, Option[Int])] = List((1,Some(1)), (2,None), (3,Some(3)))
2016-09-07 09:43:19	multibot_	[02:00:28]  List[(Int, Option[Int])] = List((1,Some(1)), (3,Some(3)))
2016-09-07 09:43:19	dibblego	[02:00:32] def f[A, B](x: List[(A, Option[B])]): List[(A, B)] = x flatMap { case (a, b) => b.toList map ((a, _)) }
2016-09-07 09:43:19	[poe]jdk	[02:01:08] cool, thanks guys, I know where to go with this now
2016-09-07 09:43:19	oal	[02:45:09] Is it possible to do something like this? val directions = List() ++ if(square.maybeTop) { List(Right) } else { List() } ?
2016-09-07 09:43:19	oal	[02:45:33] And have more ++ for the rest of the directions
2016-09-07 09:43:19	[poe]jdk	[02:45:54] oal: List() ++ square.maybeTop.toList should work, I think
2016-09-07 09:43:19	[poe]jdk	[02:46:30] Assuming you're using an Option, not sure if it's an Either
2016-09-07 09:43:19	oal	[02:49:40] [poe]jdk maybeTop is just a Boolean
2016-09-07 09:43:19	oal	[02:50:50] I can just assign it to a val above and do ++ right, so never mind :)
2016-09-07 09:43:19	[poe]jdk	[02:56:24] oh, I see. Sorry, I'm tired this morning :)
2016-09-07 09:43:19	Sendoushi	[07:27:08] guyshey guys is there any GUI standard nowadays to work with scala? are you using swing? javafx?
2016-09-07 09:43:19	selckin	[07:28:58] gui on the jvm is pritty dead
2016-09-07 09:43:19	Sendoushi	[07:29:22] hm... so... i see. where would you go for cross platform gui then?
2016-09-07 09:43:19	selckin	[07:29:48] html
2016-09-07 09:43:19	Sendoushi	[07:29:55] electron / nw?
2016-09-07 09:43:19	Sendoushi	[07:30:19] avoiding that. webkit has serious memory and resource usage issues. 
2016-09-07 09:43:19	Ben_1	[08:42:39] hi
2016-09-07 09:43:19	Ben_1	[08:42:43] someone using scalatags?
2016-09-07 09:43:19	Ben_1	[08:43:04] I try to pass information from a selection to my scala code
2016-09-07 09:43:19	Ben_1	[08:43:10] but don't have an idea how
2016-09-07 09:43:19	***	Playback Complete.
2016-09-07 09:43:33	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-07 09:46:53	<--	przl (~przlrkt@80.82.202.196) has quit (Ping timeout: 244 seconds)
2016-09-07 09:48:00	<--	Spockz (~spockz@145.221.187.242) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-07 09:54:51	<--	[poe]jdk (~jdkendall@96.36.206.167) has quit (Ping timeout: 276 seconds)
2016-09-07 09:55:08	-->	eklavya (~eklavya@117.204.253.45) has joined #scala
2016-09-07 09:56:07	<--	hellseher (~hellseher@109.195.23.108) has quit (Read error: Connection reset by peer)
2016-09-07 10:04:03	-->	zeryx (~james@hlfxns016cw-142167010003.dhcp-dynamic.FibreOp.ns.bellaliant.net) has joined #scala
2016-09-07 10:04:22	zeryx	if I wanted to add some CLI functionality to a scala application
2016-09-07 10:04:32	zeryx	how would I do it besides the basic def main(args: List[String]) ?
2016-09-07 10:04:42	zeryx	is there a way to add a --help?
2016-09-07 10:05:01	zeryx	(I guess if args(0) == '--help' works)
2016-09-07 10:05:19	selckin	or any of a million libraries that help with that on google
2016-09-07 10:05:58	-->	waqas (~Adium@2605:6000:ee43:2e00:a43d:dd4e:2e48:20a5) has joined #scala
2016-09-07 10:06:31	-->	pandaadb (~pandaadb@2a02:c7d:20f:5f00:28d4:a95a:68be:a44f) has joined #scala
2016-09-07 10:06:34	-->	betandr (~betandr@132.185.153.5) has joined #scala
2016-09-07 10:09:44	-->	adolf_stalin (~adolf_sta@205.157.178.143) has joined #scala
2016-09-07 10:10:14	<--	eklavya (~eklavya@117.204.253.45) has quit (Remote host closed the connection)
2016-09-07 10:10:38	aloiscochard	zeryx: I highly recommend this one https://github.com/bmjames/scala-optparse-applicative
2016-09-07 10:10:40	<--	jablo (~jablo@80.243.123.111) has quit (Quit: jablo)
2016-09-07 10:12:43	-->	coltfred (~coltfred@71.15.193.15) has joined #scala
2016-09-07 10:15:29	-->	sanddune (~sanddune@46.166.190.201) has joined #scala
2016-09-07 10:15:36	zeryx	nice
2016-09-07 10:15:44	zeryx	yeah that works
2016-09-07 10:16:14	zeryx	another question, what does (arg1, arg2, arg3, arg4) desugarize to?
2016-09-07 10:16:19	zeryx	I assume its a tuple
2016-09-07 10:16:25	zeryx	but is it a tuple4[A, B, C, D]?
2016-09-07 10:17:32	aloiscochard	right
2016-09-07 10:17:58	-->	przl (~przlrkt@80.82.202.196) has joined #scala
2016-09-07 10:19:00	zeryx	is there a reason why we don't have a ... operator for n arity method args/>
2016-09-07 10:19:04	zeryx	I assume its been discussed at some point
2016-09-07 10:19:12	-->	hexagoxel_ (~hexagoxel@p200300798F1B6300021E33FFFE2231E9.dip0.t-ipconnect.de) has joined #scala
2016-09-07 10:19:21	-->	[yeitijem] (~yeitijem@p50995cae.dip0.t-ipconnect.de) has joined #scala
2016-09-07 10:19:34	nullremains	zeryx: *
2016-09-07 10:19:46	nullremains	as in varargs
2016-09-07 10:19:57	zeryx	nullremains: def foo(bar: String*)?
2016-09-07 10:20:01	nullremains	def foo(args: Foo*)
2016-09-07 10:20:12	nullremains	yes
2016-09-07 10:20:19	zeryx	so that would allow an infinite set of args? how would you iterate through them?
2016-09-07 10:20:23	zeryx	are they a list[Foo]?
2016-09-07 10:20:26	nullremains	Seq
2016-09-07 10:20:30	zeryx	ah
2016-09-07 10:20:33	zeryx	neat
2016-09-07 10:20:34	<--	ghounds (~gabriel@69.74.59.115) has quit (*.net *.split)
2016-09-07 10:20:34	<--	multibot_ (~PircBotX@ec2-107-22-42-126.compute-1.amazonaws.com) has quit (*.net *.split)
2016-09-07 10:20:35	<--	hexagoxel (~hexagoxel@p4FCCC599.dip0.t-ipconnect.de) has quit (*.net *.split)
2016-09-07 10:20:35	<--	nbg (~nbg@5.146.51.114) has quit (*.net *.split)
2016-09-07 10:20:35	<--	theBlackDragon (~dragon@213.219.167.118) has quit (*.net *.split)
2016-09-07 10:20:35	<--	ptx (~ptx@5.186.53.38) has quit (*.net *.split)
2016-09-07 10:20:35	<--	Muflo (muflo@gateway/shell/fnordserver.eu/x-tzbxegjjreztsedd) has quit (*.net *.split)
2016-09-07 10:20:35	<--	yeitijem (~yeitijem@p50995cae.dip0.t-ipconnect.de) has quit (*.net *.split)
2016-09-07 10:20:35	<--	sanddune_ (~sanddune@46.166.190.201) has quit (*.net *.split)
2016-09-07 10:20:36	<--	jasticE (~quassel@pool-173-48-102-116.bstnma.fios.verizon.net) has quit (*.net *.split)
2016-09-07 10:20:36	<--	james_woods (~tobi@zentrale1.com) has quit (*.net *.split)
2016-09-07 10:20:38	<--	snits_ (jsnitsel@nat/redhat/x-hnsnxhcqfsnplrbq) has quit (*.net *.split)
2016-09-07 10:20:38	<--	awk_ (~awk@alpha.security.web.za) has quit (*.net *.split)
2016-09-07 10:20:38	<--	_janne (dmon@punainen.org) has quit (*.net *.split)
2016-09-07 10:20:38	<--	miasma (jmjmak@linux.utu.fi) has quit (*.net *.split)
2016-09-07 10:20:38	<--	absence (w5RdzXwEHn@hildring.pvv.ntnu.no) has quit (*.net *.split)
2016-09-07 10:20:39	<--	FlipBill (~bill@smtpv3.cosi.net) has quit (*.net *.split)
2016-09-07 10:20:39	<--	fbettag (fbettag@el8.nl) has quit (*.net *.split)
2016-09-07 10:20:39	--	hexagoxel_ is now known as hexagoxel
2016-09-07 10:20:40	nullremains	quite useful, yes
2016-09-07 10:21:27	zeryx	you can't do the same with type defs as well right? no def foo[A*] functionality?
2016-09-07 10:21:43	nullremains	no
2016-09-07 10:21:46	zeryx	you could use def foo(bar: Any*) I guess
2016-09-07 10:21:55	zeryx	less clean though
2016-09-07 10:22:00	nullremains	depends
2016-09-07 10:22:12	<--	przl (~przlrkt@80.82.202.196) has quit (Ping timeout: 240 seconds)
2016-09-07 10:22:32	nullremains	if you don't care about the type (e.g. just going to toString the args) Any is fine
2016-09-07 10:23:01	-->	cythrawll (~cythrawll@unaffiliated/cythrawll) has joined #scala
2016-09-07 10:24:39	zeryx	yeah it's not ideal, and you can do type checks after accepting it
2016-09-07 10:25:18	zeryx	IE val (source: String, stuff: A, otherStuff: B) = args or something
2016-09-07 10:25:30	zeryx	not sure if you can sugarize a seq -> tuple like that
2016-09-07 10:25:39	zeryx	you probably can though
2016-09-07 10:27:14	aloiscochard	zeryx: you can do inifinite heterogenous list, but you need a new datastructure.
2016-09-07 10:27:27	zeryx	yeah I'd need shapeless for that right/>
2016-09-07 10:27:30	zeryx	HList?
2016-09-07 10:27:32	aloiscochard	yes exactly
2016-09-07 10:27:41	zeryx	haven't touched it but I know it exists
2016-09-07 10:27:41	aloiscochard	I don't find it especially useful in practice
2016-09-07 10:27:46	aloiscochard	ymmv
2016-09-07 10:27:49	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-07 10:28:13	zeryx	me neither, I wonder how easily it encodes into json though
2016-09-07 10:28:30	zeryx	one thing that python has that I really like is the ability to just encode a dict directly into json without any fuss
2016-09-07 10:28:44	<--	coltfred (~coltfred@71.15.193.15) has quit (Ping timeout: 244 seconds)
2016-09-07 10:29:05	zeryx	argonaut will do it but it requires a bunch of weird pixy magic with implicits
2016-09-07 10:29:37	zeryx	pixie*
2016-09-07 10:30:09	-->	adibsaad (~ed@2607:fea8:4e0:17b:b5af:678f:8588:593) has joined #scala
2016-09-07 10:31:55	nullremains	it's an advantage that dynamic languages have over scala, being able to just `to_json` an arbitrarily complex data structure without any boilerplate/ceremony.
2016-09-07 10:31:56	-->	xpen (~xpen@114.111.166.225) has joined #scala
2016-09-07 10:32:21	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 244 seconds)
2016-09-07 10:34:33	zeryx	I feel like scala should be able to do that, as it's reflection is really good
2016-09-07 10:34:43	--	irc: disconnected from server
2016-09-07 17:22:11	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-07 17:22:11	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-07 17:22:11	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-07 17:22:11	--	Channel #scala: 439 nicks (0 ops, 0 voices, 439 normals)
2016-09-07 17:22:11	***	Buffer Playback...
2016-09-07 17:22:11	zeryx	[17:07:34] if it's too deep you should split stuff out into separate methods
2016-09-07 17:22:11	zeryx	[17:07:44] or find another way to break it up
2016-09-07 17:22:11	zeryx	[17:07:55] although the play framework is notorious for that
2016-09-07 17:22:11	tpolecat	[17:08:13] ! def foo: Int = List(1,2,3).foldLeft(0)((a, n) => a + n)
2016-09-07 17:22:11	multibot_	[17:08:14]  foo: Int
2016-09-07 17:22:11	tpolecat	[17:08:16] ! foo
2016-09-07 17:22:11	multibot_	[17:08:16]  Int = 6
2016-09-07 17:22:11	tpolecat	[17:08:20] ! def foo: Int = List(1,2,3).foldLeft(0)((a, n) => return a + n)
2016-09-07 17:22:11	multibot_	[17:08:22]  foo: Int
2016-09-07 17:22:11	tpolecat	[17:08:25] ! foo
2016-09-07 17:22:11	multibot_	[17:08:25]  Int = 1
2016-09-07 17:22:11	tpolecat	[17:08:29] hooray!
2016-09-07 17:22:11	zeryx	[17:08:38] lol
2016-09-07 17:22:11	zeryx	[17:08:45] the return keyword is shit
2016-09-07 17:22:11	nullremains	[17:08:51] we,, return "works"
2016-09-07 17:22:11	zeryx	[17:08:53] but you know what I mean right tpolecat?
2016-09-07 17:22:11	nullremains	[17:08:56] well
2016-09-07 17:22:11	tpolecat	[17:08:59] ! def foo: () => Int = () => return () => 1
2016-09-07 17:22:11	multibot_	[17:08:59]  foo: () => Int
2016-09-07 17:22:11	tpolecat	[17:09:06] ! val x = foo
2016-09-07 17:22:11	multibot_	[17:09:06]  x: () => Int = <function0>
2016-09-07 17:22:11	tpolecat	[17:09:09] ! x()
2016-09-07 17:22:11	multibot_	[17:09:10]  scala.runtime.NonLocalReturnControl
2016-09-07 17:22:11	tpolecat	[17:09:13] hooray!
2016-09-07 17:22:11	zeryx	[17:09:15] "This big here is leaving whatever scope it's currently in, which is probably a lamda function"
2016-09-07 17:22:11	Arrgh	[17:09:25] That's really cute
2016-09-07 17:22:11	zeryx	[17:09:27] big thing*
2016-09-07 17:22:11	pfurla	[17:10:08] let's try/catch NonLocalReturnControl
2016-09-07 17:22:11	pfurla	[17:10:17] for fun and ... well, only fun
2016-09-07 17:22:11	tpolecat	[17:11:10] the problem ultimately is that return is a side-effect
2016-09-07 17:22:11	Arrgh	[17:11:14] ^^ this is why you should never catch Throwable unless you're really, really sure you know what you're doing
2016-09-07 17:22:11	tpolecat	[17:11:23] so equational reasoning doesn't work for expressions that use return
2016-09-07 17:22:11	pfurla	[17:11:54] tpolecat: "Limits of equational reasoning"
2016-09-07 17:22:11	tpolecat	[17:12:19] ffs
2016-09-07 17:22:11	Arrgh	[17:13:41] And sadly, try { ...} { catch e => } is actually catching Throwable, though IIRC there's a warning there
2016-09-07 17:22:11	Arrgh	[17:13:49] IIRC even further back I was the one who asked for it :)
2016-09-07 17:22:11	zeryx	[17:16:02] I'm not sure I follow, I personally see {... , foo} as a sugarized version of {..., LeavingScope(Foo)}
2016-09-07 17:22:11	Arrgh	[17:16:24] My syntax was wrong... try { ... } catch { case e => ... }
2016-09-07 17:22:11	Arrgh	[17:16:37] (`e` is of type Throwable there, you'll get a warning)
2016-09-07 17:22:11	tpolecat	[17:17:19] Control flow via exceptions is ... distasteful.
2016-09-07 17:22:11	zeryx	[17:17:56] yeah, whenever I can I pass Either's around
2016-09-07 17:22:11	zeryx	[17:18:30] beacuse scalaz's \/ syntax is horrendous and I hate symbols as anything except operators
2016-09-07 17:22:11	Arrgh	[17:20:33] I kinda like it now, it's such a fundamental abstraction that it deserves its own symbol
2016-09-07 17:22:11	zeryx	[17:20:47] it's so friggen hard to type
2016-09-07 17:22:11	Arrgh	[17:20:48] I still find it a bit hard to type but I'll get better
2016-09-07 17:22:11	zeryx	[17:20:51] on a regular keyboard
2016-09-07 17:22:11	zeryx	[17:21:08] literally any combination of letters is easier to type than \/
2016-09-07 17:22:11	dibblego	[17:21:39] the person who wrote it, is missing a right index finger, and thinks you are funny
2016-09-07 17:22:11	zeryx	[17:21:57] I think he just wanted to make things more difficult 
2016-09-07 17:22:11	zeryx	[17:22:09] I do like the concept of it though
2016-09-07 17:22:11	***	Playback Complete.
2016-09-07 17:22:24	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-07 17:22:27	dibblego	absolutely, that definitely correlates to a rigorous analysis of available observation
2016-09-07 17:22:44	dibblego	you will make a fine scala programmer
2016-09-07 17:23:02	zeryx	>:3
2016-09-07 17:23:02	<--	jaana (jaana@nat/yahoo/x-svibugsvngnypkgs) has quit (Quit: jaana)
2016-09-07 17:23:33	nullremains	zeryx: ^ is I believe the author of said symbol
2016-09-07 17:24:02	zeryx	hah
2016-09-07 17:24:11	-->	allengeorge (~textual@208.185.185.131) has joined #scala
2016-09-07 17:24:19	zeryx	now I'm just embarassed
2016-09-07 17:24:19	dibblego	I wrote both.
2016-09-07 17:24:30	tpolecat	lol
2016-09-07 17:24:36	tpolecat	mic drop
2016-09-07 17:24:42	nullremains	dibblego: you also wrote Either ;-)
2016-09-07 17:24:47	dibblego	havva larf mate, I am :)
2016-09-07 17:24:51	dibblego	nullremains: yes
2016-09-07 17:25:06	zeryx	I assume you wrote like, a big massive blogpost on why you wanted to make a different Either style operator somewhere?
2016-09-07 17:25:11	zeryx	and name it \/?
2016-09-07 17:25:18	dibblego	no
2016-09-07 17:25:22	zeryx	ah
2016-09-07 17:25:34	zeryx	did you just do it because it felt like a nice project to do on the weekends?
2016-09-07 17:25:51	nullremains	Either was broken
2016-09-07 17:26:03	nullremains	or rather, not biased
2016-09-07 17:26:14	zeryx	oh yeah, it's more verbose
2016-09-07 17:26:26	-->	przl (~przlrkt@p5DD1576E.dip0.t-ipconnect.de) has joined #scala
2016-09-07 17:26:29	dibblego	Either existed, it was crap, always was, and was influenced by stupid scala politics. Someone posted to the mailing list, "we should fix this" and the thread was hijacked. that same person tried again, same result. So I said fuck it, let's just fix it right now. Took me one day, fucking fixed, let's move on. I think your reasoning is bogus, so it did not apply; was never even a thought. I do not type with a right index finger, and have no pr
2016-09-07 17:26:30	dibblego	oblems typing \/, HTFU.
2016-09-07 17:26:39	nullremains	Left/Right projection, good riddance
2016-09-07 17:26:44	zeryx	oh yeah, scala politics
2016-09-07 17:26:47	zeryx	I forgot about that
2016-09-07 17:26:55	zeryx	I'm usually not in the irc channel when it propegates in here
2016-09-07 17:27:06	reactormonk	That's now fixed with 2.12, right?
2016-09-07 17:27:10	dibblego	it was by private email, I have made fun of it ever since
2016-09-07 17:27:11	nullremains	apparently
2016-09-07 17:27:29	dibblego	reactormonk: I have no idea.
2016-09-07 17:27:45	dibblego	reactormonk: I very sincerely doubt it, if I were to place a bet. It will be a half-arse fix.
2016-09-07 17:28:14	nullremains	yes, at best the deprecated cruft will be left around for years to come
2016-09-07 17:28:33	tpolecat	! for { a <- Left(2); b = 1 } yield "x"
2016-09-07 17:28:33	multibot_	 error: value map is not a member of scala.util.Left[Int,Nothing]
2016-09-07 17:28:34	multibot_	        for { a <- Left(2); b = 1 } yield "x"
2016-09-07 17:28:35	multibot_	                       ^
2016-09-07 17:28:50	tpolecat	sorry
2016-09-07 17:29:12	<--	jmv_ (~jmv@81-64-97-98.rev.numericable.fr) has quit (Ping timeout: 276 seconds)
2016-09-07 17:29:24	tpolecat	! for { a <- Right(2).right; b = true } yield "foo"
2016-09-07 17:29:24	multibot_	 error: value map is not a member of Product with Serializable with scala.util.Either[Nothing,(Int, Boolean)]
2016-09-07 17:29:25	nullremains	have to add the .left/.right to do anything useful
2016-09-07 17:29:25	multibot_	        for { a <- Right(2).right; b = true } yield "foo"
2016-09-07 17:29:26	multibot_	                ^
2016-09-07 17:29:33	<--	lefou (~lefou@v22016013246430873.supersrv.de) has quit (Ping timeout: 240 seconds)
2016-09-07 17:29:48	tpolecat	i like that example because it shows how both Either and for-bindings are broken
2016-09-07 17:29:50	nullremains	oh dear
2016-09-07 17:29:57	-->	steinn (~user@163-60-19-178.xdsl.simafelagid.is) has joined #scala
2016-09-07 17:30:28	pfurla	the important think to don't forget about Either is that it's a glorified tuple
2016-09-07 17:30:42	dibblego	pfurla comes through with the requested mic drop
2016-09-07 17:30:57	pfurla	lol
2016-09-07 17:31:01	<--	przl (~przlrkt@p5DD1576E.dip0.t-ipconnect.de) has quit (Ping timeout: 252 seconds)
2016-09-07 17:32:00	zeryx	what makes \/ any different besides defaulting to the first arg? I haven't studied it's functionality much as we don't have scalaz on our stack yet
2016-09-07 17:32:18	adelbertc	its right-biased by default and provides a plethora of useful combinators on top of it
2016-09-07 17:33:08	dibblego	it has only safe operations and so better documentation, it has additional operations that don't need to justified to the experts with use-cases, it has library support for the fact that its operations are right-biased [if you choose otherwise], it exploits types appropriately
2016-09-07 17:33:20	<--	uglyfigurine (~uglyfigur@131.228.197.10) has quit (Remote host closed the connection)
2016-09-07 17:33:42	pfurla	scaladoc "use-cases" ? bleh
2016-09-07 17:33:58	pfurla	"let's play pretend"
2016-09-07 17:34:17	<--	two_wheels (~two_wheel@50-93-251-80.fttp.usinternet.com) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-07 17:34:31	zeryx	ok
2016-09-07 17:35:35	<--	pfurla (~textual@65.206.95.146) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-07 17:35:55	-->	lefou (~lefou@v22016013246430873.supersrv.de) has joined #scala
2016-09-07 17:36:06	-->	pfurla (~textual@65.206.95.146) has joined #scala
2016-09-07 17:36:07	dibblego	no, I mean avoiding stupid politics ultimately; having to justify silly things to dungiddits.
2016-09-07 17:36:26	dibblego	It was less than *one day of work* to overcome the entire load of bullshit. That's the real point.
2016-09-07 17:36:46	zeryx	why does the scala community have so much terrible politics and feuds?
2016-09-07 17:37:10	zeryx	is it the the java enterprise community controlling the dev team?
2016-09-07 17:37:48	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-09-07 17:38:02	dibblego	depends who you ask, and you will hear some hilarious shit if you try it out :)
2016-09-07 17:38:31	-->	two_wheels (~two_wheel@50-93-251-80.fttp.usinternet.com) has joined #scala
2016-09-07 17:38:33	-->	egp (~eric@216.9.30.85) has joined #scala
2016-09-07 17:38:50	<--	two_wheels (~two_wheel@50-93-251-80.fttp.usinternet.com) has quit (Client Quit)
2016-09-07 17:39:10	tnks	zeryx: the problem is probably not just one dynamic.
2016-09-07 17:39:48	<--	ganeshraju (~Adium@72.46.219.230) has quit (Ping timeout: 265 seconds)
2016-09-07 17:40:02	zeryx	I remember one guy who comes in here occasionally and just starts shit with people, I think he's an admin
2016-09-07 17:40:10	zeryx	don't remember his name, seems incredibly abrasive
2016-09-07 17:40:44	zeryx	he's banned people that are generally very helpful and kind for arguing with him, tpolecat you spoke with him before on here
2016-09-07 17:41:39	dibblego	In 2008, a person privately emailed me, proclaiming to be an expert, informing me that I am not, and that I would need to justify the existence of a function in the scala.Either patch submission. In less than one day of work, that entire debacle can be improved upon, further than what exists today and further than what is being proposed for the future. Some people want to move on. This is a good example of the impersonal reasons. Programmers
2016-09-07 17:41:40	dibblego	 who have better skills than the power holders want to not care about powers, but about progress in code.
2016-09-07 17:42:50	dibblego	no different to your pointy-haired boss leaning over your shoulder asking you to describe why you named your javascript variable x instead of y.
2016-09-07 17:48:01	<--	ghounds (~gabriel@69.74.59.115) has quit (Ping timeout: 265 seconds)
2016-09-07 17:49:37	<--	thorbitz (~thorbitz@159.203.245.178) has quit (Ping timeout: 244 seconds)
2016-09-07 17:53:09	-->	thorbitz (~thorbitz@159.203.245.178) has joined #scala
2016-09-07 17:55:35	-->	jaana (~jaana@c-71-198-4-58.hsd1.ca.comcast.net) has joined #scala
2016-09-07 17:55:39	<--	Hoffman (~Hoffman@unaffiliated/hoffman) has quit (Ping timeout: 264 seconds)
2016-09-07 17:56:48	-->	Sorella (uid49404@oftn/oswg-member/Sorella) has joined #scala
2016-09-07 18:00:13	<--	apotry (~textual@cpc105238-live33-2-0-cust628.17-2.cable.virginm.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-07 18:00:56	dreamreal	dibblego: people are dumb :(
2016-09-07 18:01:20	<--	lefou (~lefou@v22016013246430873.supersrv.de) has quit (Ping timeout: 244 seconds)
2016-09-07 18:01:20	dreamreal	A lot of programmers get their egos wrapped up in things, which is a terrible way to be, even if they probably are very very very good
2016-09-07 18:01:35	<--	adolf_stalin (~adolf_sta@205.157.178.143) has quit (Quit: Leaving...)
2016-09-07 18:02:26	-->	jfg9 (~josh@host-78-146-236-162.as13285.net) has joined #scala
2016-09-07 18:04:30	<--	jablo (~jablo@80-62-117-28-mobile.dk.customer.tdc.net) has left #scala
2016-09-07 18:05:28	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-07 18:07:07	-->	Neo-- (~neo@BSN-143-173-231.dynamic.siol.net) has joined #scala
2016-09-07 18:10:04	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-07 18:11:50	-->	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has joined #scala
2016-09-07 18:12:40	<--	jfg9 (~josh@host-78-146-236-162.as13285.net) has quit (Quit: jfg9)
2016-09-07 18:13:10	-->	Hoffman (~Hoffman@unaffiliated/hoffman) has joined #scala
2016-09-07 18:13:19	-->	fkurkowski (~fkurkowsk@187.63.162.57) has joined #scala
2016-09-07 18:15:30	-->	jfg9 (~josh@host-78-146-236-162.as13285.net) has joined #scala
2016-09-07 18:16:39	<--	fkurkows1 (~fkurkowsk@187.63.188.165) has quit (Ping timeout: 276 seconds)
2016-09-07 18:17:48	-->	uglyfigurine (~uglyfigur@131.228.197.10) has joined #scala
2016-09-07 18:18:40	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-07 18:22:02	irregular	hi guys, I have a function def foo[T <: Bar](): T = { T.emptyT } where Bar is a trait with a function emptyT required, in my function foo I get a compiler error not found: value T, is there a way I can have T.emptyT called? I want to pass in a case class Bazz that extends Bar and has the emptyT() method returning an empty case class
2016-09-07 18:23:44	adelbertc	irregular: it sounds like you want a type class
2016-09-07 18:24:05	adelbertc	http://tpolecat.github.io/2013/10/12/typeclass.html
2016-09-07 18:24:11	<--	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has quit (Quit: Leaving.)
2016-09-07 18:24:35	adelbertc	the problem is you cant just call `emptyT` in this case because you need a value of type T to do so
2016-09-07 18:24:52	adelbertc	which is weird because presumably emptyT is a constant
2016-09-07 18:24:59	adelbertc	type classes capture this a lot better
2016-09-07 18:25:15	<--	paws_ (uid89121@gateway/web/irccloud.com/x-flvyvljyuaksxtzz) has quit (Quit: Connection closed for inactivity)
2016-09-07 18:26:29	felher	If I have an Api using Xor or \/ and such and want to expose it to java, how would I best go about that? Write a little wrapper on the scala site that uses the existing api, but throws exceptions on left?
2016-09-07 18:27:42	<--	firstdayonthejob (~firstdayo@cpc99346-croy26-2-0-cust153.19-2.cable.virginm.net) has quit (Ping timeout: 276 seconds)
2016-09-07 21:02:28	--	irc: disconnected from server
2016-09-07 21:02:39	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-07 21:02:39	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-07 21:02:39	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-07 21:02:39	--	Channel #scala: 418 nicks (0 ops, 0 voices, 418 normals)
2016-09-07 21:02:39	***	Buffer Playback...
2016-09-07 21:02:39	adelbertc	[18:45:00] dont have ReturnedAuthzMSData extend  the type class
2016-09-07 21:02:39	adelbertc	[18:45:20] instead make an implicit value of type AuthzMzData[ReturendAuthzMzData] in the companion object
2016-09-07 21:02:39	adelbertc	[18:45:21] of the case class
2016-09-07 21:02:39	irregular	[18:46:26] would it need a value assigned to it?
2016-09-07 21:02:39	adelbertc	[18:46:59] yeah 
2016-09-07 21:02:39	adelbertc	[18:47:21] object Foo { implicit val instance: YourTypeClass[Foo] = new YourTypeClass[Foo] { ... } }
2016-09-07 21:02:39	adelbertc	[18:47:35] i ddint type your class names cuz im too lazy to figure out where the 'z's go ;)
2016-09-07 21:02:39	irregular	[18:50:03] in that case would I still need the method in the parent class?
2016-09-07 21:02:39	adelbertc	[18:50:18] no you would remove it
2016-09-07 21:02:39	adelbertc	[18:50:23] it would just be defined in the type class instance
2016-09-07 21:02:39	irregular	[18:51:18] if i don't extend the parent class then it would be difficult to use that recover method for other similar classes no? I want to return a case class not an empty parent class though
2016-09-07 21:02:39	patchwork	[18:52:34] Hmm... just tried argonaut-shapeless, still no decoder for HList: http://lpaste.net/186253
2016-09-07 21:02:39	pfn	[18:53:16] patchwork, that is impossible 
2016-09-07 21:02:39	patchwork	[18:54:26] pfn: Well, I just ran it... so it must be possible
2016-09-07 21:02:39	pfn	[18:54:30] patchwork, you would need to fully declare the hlist type if it were at all supported
2016-09-07 21:02:39	patchwork	[18:54:49] pfn: Oh, you mean it is impossible to make a decoder for HList
2016-09-07 21:02:39	patchwork	[18:55:01] Got it
2016-09-07 21:02:39	patchwork	[18:55:38] So, how do I interact with a json array of arbitrarily structured objects?
2016-09-07 21:02:39	patchwork	[18:56:05] (like the example in that paste)
2016-09-07 21:02:39	pfn	[18:56:24] ie decodeOption[A :: B :: C ::... :: HNil] 
2016-09-07 21:02:39	adelbertc	[18:56:45] irregular: the issue is if you do it through subtyping you need a value of type T in order to call emptyT, something you dont have
2016-09-07 21:02:39	adelbertc	[18:56:48] hence the type class
2016-09-07 21:02:39	adelbertc	[18:56:57] similarly you may have to move other methods into the type class
2016-09-07 21:02:39	patchwork	[18:57:02] pfn: So does the shape of the array need to be known beforehand?
2016-09-07 21:02:39	patchwork	[18:57:17] IE: how many elements and what form they take?
2016-09-07 21:02:39	pfn	[18:57:19] patchwork, yes, if you want an HList
2016-09-07 21:02:39	patchwork	[18:57:36] Okay, maybe I don't want an HList then : )
2016-09-07 21:02:39	patchwork	[18:58:11] They will be coming in a variety of lengths, the idea is to parse the json array and process the objects one at a time
2016-09-07 21:02:39	Milyardo	[18:58:39] you probably want a list of coproducts instead
2016-09-07 21:02:39	pfn	[18:58:44] you can't encode/decode directly to an object if the structure of the json is unknown 
2016-09-07 21:02:39	irregular	[18:59:05] adelbertc:i get that, i think this will take a bit of time to wrap my head around, im going to copy your teachings into my notes and come back to it when i have the bandwith to, thanks :) for now i'll just make another recover method
2016-09-07 21:02:39	Milyardo	[18:59:08] coproduct(also in shapeless) is the opposite of an HList
2016-09-07 21:02:39	pfn	[18:59:09] you will need something that can let you navigate the json tree
2016-09-07 21:02:39	Milyardo	[18:59:21] instead of a list of values of differing types
2016-09-07 21:02:39	adelbertc	[18:59:25] dual* not opposite ;)
2016-09-07 21:02:39	Milyardo	[18:59:30] you say that a value is one of a list of types
2016-09-07 21:02:39	Milyardo	[18:59:33] dual yes
2016-09-07 21:02:39	adelbertc	[18:59:45] irregular: sounds good
2016-09-07 21:02:39	Milyardo	[19:00:24] So you say decodeOption[List[AType :+: BType :+: CType :+: CNil]]
2016-09-07 21:02:39	Milyardo	[19:00:46] can you get a list of types that can be a AType, BType or CType
2016-09-07 21:02:39	patchwork	[19:00:58] pfn: Ah, good to know. So how do I get the values out of the json then? I guess I want to reduce a function over the objects in the array, but not sure how to do that
2016-09-07 21:02:39	patchwork	[19:02:06] Milyardo: Interesting
2016-09-07 21:02:39	patchwork	[19:02:09] That may be what I need
2016-09-07 21:02:39	pfn	[19:02:41] or as Milyardo says, if you have a set of potential object types per element, then a list of coproducts 
2016-09-07 21:02:39	Milyardo	[19:41:27] patchwork: It would seem coproducts need to be labelled to work with argonaut shapeless(ie, each type need a key), since that's non obvious I threw up a quick example in this scastie: http://scastie.org/22233
2016-09-07 21:02:39	patchwork	[19:50:03] Milyardo: Thank you! Very helpful
2016-09-07 21:02:39	dibblego	[20:28:09] dreamreal: that's not what jim morrison taught me
2016-09-07 21:02:39	uglyfigurine	[20:48:36] How can I write this small demo using akka streams - https://paste.fedoraproject.org/423694/73295473/
2016-09-07 21:02:39	uglyfigurine	[20:48:36] I have read that akka streams help in buffering source so u dont run into OOM's but i dont get how i can use it.
2016-09-07 21:02:39	uglyfigurine	[20:48:36] I feel that small demo shud help me understand akka streams better
2016-09-07 21:02:39	***	Playback Complete.
2016-09-07 21:03:07	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-07 21:03:10	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-07 21:03:33	<--	greister_ (~greister@222.132.86.139) has quit (Ping timeout: 240 seconds)
2016-09-07 21:05:18	-->	eamelink (~quassel@5ED33A86.cm-7-4a.dynamic.ziggo.nl) has joined #scala
2016-09-07 21:05:29	<--	waqas (~Adium@216.174.114.140) has quit (Quit: Leaving.)
2016-09-07 21:05:31	-->	doMynation (~domynatio@2607:fa48:6d5e:3460:3a81:a75:ce0f:313e) has joined #scala
2016-09-07 21:07:49	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-07 21:08:01	-->	gorbulas (~gorbulas@unaffiliated/gorbulas) has joined #scala
2016-09-07 21:09:33	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 276 seconds)
2016-09-07 21:10:32	<--	uglyfigurine (~uglyfigur@c-67-162-80-70.hsd1.il.comcast.net) has quit (Ping timeout: 265 seconds)
2016-09-07 21:10:51	<--	rosten (~rosten@cpe-45-48-9-161.socal.res.rr.com) has quit (Ping timeout: 276 seconds)
2016-09-07 21:11:58	-->	uglyfigurine (~uglyfigur@c-67-162-80-70.hsd1.il.comcast.net) has joined #scala
2016-09-07 21:12:08	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 244 seconds)
2016-09-07 21:14:02	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-07 21:14:19	-->	irregular (~user@pool-108-50-254-6.nwrknj.fios.verizon.net) has joined #scala
2016-09-07 21:14:44	--	datura__ is now known as datura
2016-09-07 21:14:46	<--	datura (~datura@unaffiliated/datura) has quit (Quit: Leaving)
2016-09-07 21:15:03	-->	datura (~datura@79.229.129.58) has joined #scala
2016-09-07 21:15:21	<--	datura (~datura@79.229.129.58) has quit (Changing host)
2016-09-07 21:15:21	-->	datura (~datura@unaffiliated/datura) has joined #scala
2016-09-07 21:15:22	<--	RSchulzB (~Adium@67.218.117.86) has quit (Quit: Leaving.)
2016-09-07 21:18:20	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 244 seconds)
2016-09-07 21:20:21	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-07 21:21:20	-->	dylukes (~dylukes@pool-74-109-246-116.pitbpa.fios.verizon.net) has joined #scala
2016-09-07 21:21:29	<--	dylukes (~dylukes@pool-74-109-246-116.pitbpa.fios.verizon.net) has quit (Client Quit)
2016-09-07 21:23:00	<--	datura (~datura@unaffiliated/datura) has quit (Ping timeout: 244 seconds)
2016-09-07 21:24:14	<--	hlysig_ (~hlysig@89-160-184-104.du.xdsl.is) has quit (Remote host closed the connection)
2016-09-07 21:24:23	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 244 seconds)
2016-09-07 21:27:08	<--	acidjnk (~havenone@pD9E7F0AF.dip0.t-ipconnect.de) has quit (Ping timeout: 244 seconds)
2016-09-07 21:27:47	-->	ghounds (~gabriel@cpe-67-245-240-199.nyc.res.rr.com) has joined #scala
2016-09-07 21:28:01	<--	dbainbri (~dbainbri@108-201-190-163.lightspeed.sntcca.sbcglobal.net) has quit (Quit: Leaving.)
2016-09-07 21:31:24	<--	vsuthichai (~vsuthicha@64.80.5.145) has quit (Ping timeout: 265 seconds)
2016-09-07 21:31:37	-->	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has joined #scala
2016-09-07 21:31:40	<--	Hoffman (~Hoffman@unaffiliated/hoffman) has quit (Quit: quit)
2016-09-07 21:32:13	-->	Hoffman (~Hoffman@unaffiliated/hoffman) has joined #scala
2016-09-07 21:32:41	-->	jade-shan (~jade@101.81.254.222) has joined #scala
2016-09-07 21:34:31	-->	allengeorge (~textual@cpe-74-73-18-87.nyc.res.rr.com) has joined #scala
2016-09-07 21:35:52	-->	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-07 21:35:52	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-07 21:36:03	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-07 21:39:53	<--	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-07 21:40:24	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-07 21:40:32	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2016-09-07 21:40:33	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-07 21:41:07	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-07 21:41:28	-->	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has joined #scala
2016-09-07 21:43:48	-->	waqas (~Adium@cpe-70-112-247-182.austin.res.rr.com) has joined #scala
2016-09-07 21:44:23	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-07 21:47:53	-->	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has joined #scala
2016-09-07 21:48:32	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 250 seconds)
2016-09-07 21:50:24	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-07 21:50:27	<--	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has quit (Remote host closed the connection)
2016-09-07 21:51:00	-->	romerocesar (~cesar@c-73-97-145-30.hsd1.wa.comcast.net) has joined #scala
2016-09-07 21:53:34	<--	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has quit (Quit: nomicflux)
2016-09-07 21:53:45	<--	nullremains (~godenji@c-50-138-183-78.hsd1.ma.comcast.net) has quit (Ping timeout: 276 seconds)
2016-09-07 21:55:05	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 265 seconds)
2016-09-07 21:56:21	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-07 21:56:27	<--	zeryx (~james@hlfxns016cw-142167010003.dhcp-dynamic.FibreOp.ns.bellaliant.net) has quit (Quit: zeryx)
2016-09-07 21:56:40	<--	allengeorge (~textual@cpe-74-73-18-87.nyc.res.rr.com) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-07 22:00:34	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 250 seconds)
2016-09-07 22:02:23	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-07 22:04:11	<--	Sasazuka (~Sasazuka@unaffiliated/sasazuka) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-07 22:04:26	<--	dennisvennink (~dv@92.109.221.191) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-09-07 22:06:34	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 252 seconds)
2016-09-07 22:07:06	-->	elvis4526 (~user@bas8-montreal02-1096627360.dsl.bell.ca) has joined #scala
2016-09-07 22:07:46	-->	dbainbri (~dbainbri@108-201-190-163.lightspeed.sntcca.sbcglobal.net) has joined #scala
2016-09-07 22:07:54	-->	chucktherock (adfb3a92@gateway/web/freenode/ip.173.251.58.146) has joined #scala
2016-09-07 22:08:21	chucktherock	help! i've accidentally wondered into the middle of some scala code and could use a hand
2016-09-07 22:09:18	chucktherock	i'm looking at a scala pyspark routine which is trying to load some csv data into a table
2016-09-07 22:09:33	chucktherock	the problem is, the csv data is dirty
2016-09-07 22:09:50	chucktherock	one of the columns wasn't properly escaped
2016-09-07 22:10:02	<--	vying (d161763c@gateway/web/freenode/ip.209.97.118.60) has quit (Ping timeout: 264 seconds)
2016-09-07 22:10:05	chucktherock	so sometimes a row will have a mismatched number of columns
2016-09-07 22:10:21	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-07 22:10:32	<--	hexagoxel (~hexagoxel@p200300798F1B6300021E33FFFE2231E9.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2016-09-07 22:10:51	chucktherock	so, in this context, what's the most scala-ish way to map an array to a shorter array, after concatenating some of the middle values?
2016-09-07 22:12:09	chucktherock	ie convert ["aWord", "two words", "these words", "belong together", "these words", "dont"] should map to   ["aWord", "two words", "these words, belong together", "these words", "dont"]
2016-09-07 22:12:18	-->	mtk (~Mike@c-73-38-92-68.hsd1.ma.comcast.net) has joined #scala
2016-09-07 22:13:24	chucktherock	halp?
2016-09-07 22:13:24	chucktherock	since i know exactly which column is the source of the problem, and how many columns come before and after, i can detect a row that needs fixing by checking the length of the array for that row
2016-09-07 22:13:24	chucktherock	etc...
2016-09-07 22:14:33	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 240 seconds)
2016-09-07 22:16:14	-->	hexagoxel (~hexagoxel@p200300798F1B5E00021E33FFFE2231E9.dip0.t-ipconnect.de) has joined #scala
2016-09-07 22:16:47	<--	GrayArea (kvirc@178.208.171.90) has quit (Read error: Connection reset by peer)
2016-09-07 22:18:42	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-07 22:19:05	-->	thebope (~thebope@pdpc/supporter/student/thebope) has joined #scala
2016-09-07 22:19:07	-->	ganeshraju (~Adium@72.46.219.230) has joined #scala
2016-09-07 22:19:16	<--	mtk (~Mike@c-73-38-92-68.hsd1.ma.comcast.net) has quit (Quit: mtk)
2016-09-07 22:22:45	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 244 seconds)
2016-09-07 22:23:26	<--	irregular (~user@pool-108-50-254-6.nwrknj.fios.verizon.net) has quit (Ping timeout: 244 seconds)
2016-09-07 22:24:37	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-07 22:25:26	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-09-07 22:25:59	<--	romerocesar (~cesar@c-73-97-145-30.hsd1.wa.comcast.net) has quit (Remote host closed the connection)
2016-09-07 22:27:08	<--	haste-chris (~haste-chr@8.41.67.145) has quit (Quit: Leaving)
2016-09-07 22:27:39	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-07 22:28:06	-->	ganeshraju1 (~Adium@72.46.219.230) has joined #scala
2016-09-07 22:28:11	<--	ganeshraju1 (~Adium@72.46.219.230) has quit (Max SendQ exceeded)
2016-09-07 22:28:29	-->	ganeshraju1 (~Adium@72.46.219.230) has joined #scala
2016-09-07 22:28:41	<--	ghounds (~gabriel@cpe-67-245-240-199.nyc.res.rr.com) has quit (Quit: Lost terminal)
2016-09-07 22:29:29	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-07 22:29:30	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 276 seconds)
2016-09-07 22:30:10	<--	ganeshraju (~Adium@72.46.219.230) has quit (Ping timeout: 255 seconds)
2016-09-07 22:30:37	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-07 22:32:18	<--	overlord_tm (~andraz@213.172.234.141) has quit (Ping timeout: 265 seconds)
2016-09-07 22:32:27	-->	gli (~gli@119.254.120.72) has joined #scala
2016-09-07 22:32:40	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-09-07 22:34:18	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-07 22:34:48	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 250 seconds)
2016-09-07 22:36:37	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-07 22:36:41	<--	ganeshraju1 (~Adium@72.46.219.230) has quit (Quit: Leaving.)
2016-09-07 22:36:48	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-07 22:37:55	<--	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-07 22:41:00	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 244 seconds)
2016-09-07 22:41:44	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 250 seconds)
2016-09-07 22:42:36	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-07 22:43:00	-->	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has joined #scala
2016-09-07 22:45:29	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-09-07 22:45:51	<--	adolf_stalin (~adolf_sta@2600:8804:6000:283:755a:baa:d987:2a5) has quit (Remote host closed the connection)
2016-09-07 22:46:40	<--	mheld (uid5329@gateway/web/irccloud.com/x-vedlcmrhaftcvpxy) has quit (Quit: Connection closed for inactivity)
2016-09-07 22:46:43	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-07 22:47:42	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 276 seconds)
2016-09-07 22:48:28	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-07 22:48:36	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-07 22:51:57	<--	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-07 22:52:19	-->	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has joined #scala
2016-09-07 22:52:50	pfn	just map over the list of arrays
2016-09-07 22:53:01	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 250 seconds)
2016-09-07 22:53:16	pfn	return a new array with the problem elements merged 
2016-09-07 22:54:26	-->	xpen (~xpen@114.111.166.225) has joined #scala
2016-09-07 22:54:31	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-07 22:54:39	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-07 22:54:50	<--	qrvpzvb (~qrvpzvb@ppp089210001174.access.hol.gr) has quit (Ping timeout: 250 seconds)
2016-09-07 22:55:08	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-07 22:55:25	uglyfigurine	chucktherock: xs.take(x) ++ (xs.drop(x).dropRight(y).reduce(_+_) +: xs.takeRight(y))
2016-09-07 22:56:04	<--	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has quit (Client Quit)
2016-09-07 22:56:13	uglyfigurine	chucktherock: that will reduce all elements between x and y inclusive
2016-09-07 22:58:41	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-07 22:58:58	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 255 seconds)
2016-09-07 22:59:05	<--	xpen (~xpen@114.111.166.225) has quit (Ping timeout: 244 seconds)
2016-09-07 22:59:22	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-07 22:59:25	uglyfigurine	! val xs = List(1, 3, 5, 7, 9, 11, 13, 15, 17); val (x, y) = (2, 4); xs.take(x) ++ (xs.drop(x).dropRight(y).reduce(_+_) +: xs.takeRight(y))
2016-09-07 22:59:28	multibot_	 xs: List[Int] = List(1, 3, 5, 7, 9, 11, 13, 15, 17)
2016-09-07 22:59:29	multibot_	 x: Int = 2
2016-09-07 22:59:30	multibot_	 y: Int = 4
2016-09-07 22:59:31	multibot_	 List[Int] = List(1, 3, 21, 11, 13, 15, 17)
2016-09-07 23:00:23	<--	uglyfigurine (~uglyfigur@c-67-162-80-70.hsd1.il.comcast.net) has quit (Remote host closed the connection)
2016-09-07 23:03:04	<--	cschneid (cschneid@2600:3c00::f03c:91ff:fe73:9540) has quit (Ping timeout: 250 seconds)
2016-09-07 23:03:38	-->	hamid (~nithp@unaffiliated/hamid) has joined #scala
2016-09-07 23:03:57	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 276 seconds)
2016-09-07 23:05:45	<--	thebope (~thebope@pdpc/supporter/student/thebope) has quit (Remote host closed the connection)
2016-09-07 23:05:53	-->	nefilim (~Adium@c-71-202-233-36.hsd1.ca.comcast.net) has joined #scala
2016-09-07 23:09:12	<--	nefilim (~Adium@c-71-202-233-36.hsd1.ca.comcast.net) has quit (Client Quit)
2016-09-07 23:10:44	-->	ganeshraju (~Adium@72.46.219.230) has joined #scala
2016-09-07 23:11:41	-->	adolf_stalin (~adolf_sta@wsip-76-76-141-76.tu.ok.cox.net) has joined #scala
2016-09-07 23:13:18	-->	qrvpzvb (~qrvpzvb@ppp089210001174.access.hol.gr) has joined #scala
2016-09-07 23:21:30	<--	nafg (~naftoli@96.57.169.90) has quit (Ping timeout: 276 seconds)
2016-09-07 23:22:45	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-07 23:24:26	-->	cschneid (cschneid@2600:3c00::f03c:91ff:fe73:9540) has joined #scala
2016-09-07 23:25:56	<--	asteve (~asteve@unaffiliated/kxsteve) has quit (Quit: .)
2016-09-07 23:28:47	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-07 23:29:53	-->	acidjnk22 (~havenone@pD9E7F0AF.dip0.t-ipconnect.de) has joined #scala
2016-09-07 23:30:02	--	acidjnk22 is now known as acidjnk
2016-09-07 23:30:07	-->	primepie (~primepie@irc.primepie.com) has joined #scala
2016-09-07 23:30:27	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 264 seconds)
2016-09-07 23:30:52	primepie	I am reading spark source code and came across this: combineValuesByKey(_)   what does the _ means here? here's the full context  https://github.com/apache/spark/blob/branch-0.7/core/src/main/scala/spark/PairRDDFunctions.scala#L67
2016-09-07 23:31:34	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Quit: ["Textual IRC Client: www.textualapp.com"])
2016-09-07 23:31:37	<--	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-07 23:33:18	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 250 seconds)
2016-09-07 23:33:25	<--	ganeshraju (~Adium@72.46.219.230) has quit (Quit: Leaving.)
2016-09-07 23:34:52	pfn	means pass an expected input parameter into that method
2016-09-07 23:35:15	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 244 seconds)
2016-09-07 23:35:26	-->	vsuthichai (~vsuthicha@97-93-57-156.static.mtpk.ca.charter.com) has joined #scala
2016-09-07 23:35:31	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-07 23:35:52	-->	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has joined #scala
2016-09-07 23:36:20	pfn	mapPartition first argument is a function, so the (_) treats the method as a function
2016-09-07 23:39:13	-->	moodest (ac7013c5@gateway/web/cgi-irc/kiwiirc.com/ip.172.112.19.197) has joined #scala
2016-09-07 23:39:14	primepie	pfn: ah I see. so combineValuesByKey(_) isn't actually calling the method ? 
2016-09-07 23:39:59	pfn	it is not
2016-09-07 23:40:19	primepie	what happens if there's no underscore? why is it required here
2016-09-07 23:44:13	pfn	because a method isn't a function 
2016-09-07 23:52:05	<--	adolf_stalin (~adolf_sta@wsip-76-76-141-76.tu.ok.cox.net) has quit (Remote host closed the connection)
2016-09-07 23:52:06	-->	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has joined #scala
2016-09-07 23:53:03	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-09-07 23:57:30	<--	waqas (~Adium@cpe-70-112-247-182.austin.res.rr.com) has quit (Quit: Leaving.)
2016-09-07 23:57:55	<--	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has quit (Ping timeout: 255 seconds)
2016-09-07 23:59:26	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-08 00:01:41	-->	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has joined #scala
2016-09-08 00:01:42	<--	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has quit (Remote host closed the connection)
2016-09-08 00:03:10	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 252 seconds)
2016-09-08 00:03:26	<--	chucktherock (adfb3a92@gateway/web/freenode/ip.173.251.58.146) has quit (Ping timeout: 264 seconds)
2016-09-08 00:03:53	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 00:04:13	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 255 seconds)
2016-09-08 00:06:29	-->	hamid (~nithp@unaffiliated/hamid) has joined #scala
2016-09-08 00:07:33	adelbertc	see http://tpolecat.github.io/2014/06/09/methods-functions.html
2016-09-08 00:08:30	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 250 seconds)
2016-09-08 00:09:42	-->	waqas (~Adium@2605:6000:ee43:2e00:d80d:9a21:539b:2183) has joined #scala
2016-09-08 00:09:55	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 00:10:39	<--	qrvpzvb (~qrvpzvb@ppp089210001174.access.hol.gr) has quit (Ping timeout: 264 seconds)
2016-09-08 00:10:53	-->	acidicbase (~acidicbas@173-228-53-2.dsl.static.fusionbroadband.com) has joined #scala
2016-09-08 00:10:58	<--	jedws (~jedws@eth59-167-133-100.static.internode.on.net) has quit (Ping timeout: 255 seconds)
2016-09-08 00:13:27	-->	eklavya (~eklavya@117.220.50.34) has joined #scala
2016-09-08 00:13:45	-->	jedws (~jedws@eth59-167-133-100.static.internode.on.net) has joined #scala
2016-09-08 00:14:51	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 264 seconds)
2016-09-08 00:15:52	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 00:18:19	-->	adolf_stalin (~adolf_sta@2600:8804:6000:283:dd13:b8d9:66f9:8fc8) has joined #scala
2016-09-08 00:20:02	<--	tpolecat (~anonymous@c-76-27-230-159.hsd1.or.comcast.net) has quit (Quit: tpolecat)
2016-09-08 00:20:12	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 250 seconds)
2016-09-08 00:20:20	-->	eklavya_ (~eklavya@117.203.22.221) has joined #scala
2016-09-08 00:20:32	<--	eklavya (~eklavya@117.220.50.34) has quit (Ping timeout: 250 seconds)
2016-09-08 00:21:03	-->	tpolecat (~anonymous@76.27.230.159) has joined #scala
2016-09-08 00:21:56	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 00:25:15	tpolecat	aggregator.combineValuesByKey(_) is a function literal with a placeholder; it is equivalent to x => aggregator.combineValuesByKey(x)
2016-09-08 00:26:16	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 250 seconds)
2016-09-08 00:27:57	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 00:28:57	<--	moodest (ac7013c5@gateway/web/cgi-irc/kiwiirc.com/ip.172.112.19.197) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2016-09-08 00:29:09	-->	moodest (ac7013c5@gateway/web/cgi-irc/kiwiirc.com/ip.172.112.19.197) has joined #scala
2016-09-08 00:30:39	-->	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has joined #scala
2016-09-08 00:32:29	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 260 seconds)
2016-09-08 00:33:55	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 00:34:02	-->	eklavya (~eklavya@117.203.1.227) has joined #scala
2016-09-08 00:35:13	<--	jedws (~jedws@eth59-167-133-100.static.internode.on.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-08 00:36:03	<--	greister__ (~greister@222.132.86.139) has quit (Ping timeout: 240 seconds)
2016-09-08 00:36:15	<--	eklavya_ (~eklavya@117.203.22.221) has quit (Ping timeout: 276 seconds)
2016-09-08 00:36:38	-->	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has joined #scala
2016-09-08 00:37:12	-->	eklavya_ (~eklavya@117.203.11.119) has joined #scala
2016-09-08 00:37:22	-->	jedws (~jedws@eth59-167-133-100.static.internode.on.net) has joined #scala
2016-09-08 00:37:38	<--	lambda-11235 (~lambda-11@184.63.207.209) has quit (Read error: Connection reset by peer)
2016-09-08 00:38:12	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 240 seconds)
2016-09-08 00:38:51	<--	eklavya (~eklavya@117.203.1.227) has quit (Ping timeout: 264 seconds)
2016-09-08 00:39:53	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 00:42:02	<--	Yiota (~Yiota@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-08 00:43:07	-->	nafg (~naftoli@96.57.169.90) has joined #scala
2016-09-08 00:43:52	-->	Yiota (~textual@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has joined #scala
2016-09-08 00:44:12	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 240 seconds)
2016-09-08 00:44:25	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 252 seconds)
2016-09-08 00:45:21	-->	eklavya (~eklavya@117.203.19.106) has joined #scala
2016-09-08 00:45:22	<--	eklavya_ (~eklavya@117.203.11.119) has quit (Ping timeout: 244 seconds)
2016-09-08 00:45:54	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 00:47:39	<--	vsuthichai (~vsuthicha@97-93-57-156.static.mtpk.ca.charter.com) has quit (Ping timeout: 260 seconds)
2016-09-08 00:50:01	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 244 seconds)
2016-09-08 00:51:12	-->	asteve (~asteve@unaffiliated/kxsteve) has joined #scala
2016-09-08 00:51:53	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 00:52:21	<--	Yiota (~textual@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-08 00:52:28	-->	eklavya_ (~eklavya@117.203.19.106) has joined #scala
2016-09-08 00:52:41	-->	Yiota (~textual@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has joined #scala
2016-09-08 00:52:51	<--	asteve (~asteve@unaffiliated/kxsteve) has quit (Client Quit)
2016-09-08 00:53:40	<--	Yiota (~textual@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has quit (Client Quit)
2016-09-08 00:54:00	-->	Yiota (~textual@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has joined #scala
2016-09-08 00:54:32	<--	eklavya (~eklavya@117.203.19.106) has quit (Ping timeout: 240 seconds)
2016-09-08 00:55:12	<--	Yiota (~textual@CPE00fc8d8821e3-CM00fc8d8821e0.cpe.net.cable.rogers.com) has quit (Client Quit)
2016-09-08 00:55:16	moodest	in skinny-orm, can a HasManyAssociation be constructed with a NoIdFeature on the many side? https://gist.github.com/anonymous/ff3b445413798d55be306deb7cd1c1b1 (when trying to use the association, an exception that 'id' is not a field name is thrown)  Anyone run into this problem while using this framework?
2016-09-08 00:55:32	-->	constant (~root@freebsd/developer/variable) has joined #scala
2016-09-08 00:56:03	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 240 seconds)
2016-09-08 00:56:17	tpolecat	huh. never heard of it
2016-09-08 00:57:57	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 00:59:16	-->	hamid (~nithp@unaffiliated/hamid) has joined #scala
2016-09-08 01:00:11	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-08 01:00:43	<--	beat (~beat@a89-154-83-119.cpe.netcabo.pt) has quit (Read error: Connection reset by peer)
2016-09-08 01:00:53	<--	tpolecat (~anonymous@76.27.230.159) has quit (Quit: tpolecat)
2016-09-08 01:01:54	-->	Squarism (~Squarism4@130.238.144.178) has joined #scala
2016-09-08 01:01:56	-->	Wertax (~wertax@193.110.235.126) has joined #scala
2016-09-08 01:02:54	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 276 seconds)
2016-09-08 01:03:40	-->	tpolecat (~anonymous@c-76-27-230-159.hsd1.or.comcast.net) has joined #scala
2016-09-08 01:04:22	-->	beat (~beat@a89-154-83-119.cpe.netcabo.pt) has joined #scala
2016-09-08 01:04:55	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 01:05:19	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 252 seconds)
2016-09-08 01:06:09	-->	overlord_tm (~andraz@213.172.234.141) has joined #scala
2016-09-08 01:09:18	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 244 seconds)
2016-09-08 01:10:20	<--	moodest (ac7013c5@gateway/web/cgi-irc/kiwiirc.com/ip.172.112.19.197) has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
2016-09-08 01:11:32	<--	tpolecat (~anonymous@c-76-27-230-159.hsd1.or.comcast.net) has quit (Quit: tpolecat)
2016-09-08 01:11:43	<--	dbainbri (~dbainbri@108-201-190-163.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 255 seconds)
2016-09-08 01:12:57	-->	akovari (~akovari@ip-88-212-32-49.antik.sk) has joined #scala
2016-09-08 01:13:40	<--	akovari (~akovari@ip-88-212-32-49.antik.sk) has quit (Client Quit)
2016-09-08 01:13:54	<--	overlord_tm (~andraz@213.172.234.141) has quit (Remote host closed the connection)
2016-09-08 01:14:01	-->	tpolecat (~anonymous@c-76-27-230-159.hsd1.or.comcast.net) has joined #scala
2016-09-08 01:14:05	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 01:14:27	-->	overlord_tm (~andraz@213.172.234.141) has joined #scala
2016-09-08 01:14:51	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 264 seconds)
2016-09-08 01:16:02	<--	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has quit (Remote host closed the connection)
2016-09-08 01:16:48	-->	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has joined #scala
2016-09-08 01:17:07	-->	OOPMan (~OOPMan@154.66.249.84) has joined #scala
2016-09-08 01:17:13	-->	akovari (~akovari@ip-88-212-32-49.antik.sk) has joined #scala
2016-09-08 01:18:49	-->	Wertax_ (~wertax@193.110.235.116) has joined #scala
2016-09-08 01:19:09	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 276 seconds)
2016-09-08 01:20:17	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 01:22:31	<--	Wertax (~wertax@193.110.235.126) has quit (Ping timeout: 255 seconds)
2016-09-08 01:22:34	<--	tpolecat (~anonymous@c-76-27-230-159.hsd1.or.comcast.net) has quit (Quit: tpolecat)
2016-09-08 01:22:49	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-08 01:24:46	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 255 seconds)
2016-09-08 01:27:22	<--	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has quit (Ping timeout: 250 seconds)
2016-09-08 01:28:10	<--	|| (~bot@173-13-139-237-sfba.hfc.comcastbusiness.net) has quit (Remote host closed the connection)
2016-09-08 01:28:49	-->	|| (~bot@173-13-139-237-sfba.hfc.comcastbusiness.net) has joined #scala
2016-09-08 01:33:12	-->	hellseher (~hellseher@109.195.23.108) has joined #scala
2016-09-08 01:33:54	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-08 01:33:55	--	irc: disconnected from server
2016-09-08 10:38:49	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-08 10:38:49	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-08 10:38:49	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-08 10:38:49	--	Channel #scala: 436 nicks (0 ops, 0 voices, 436 normals)
2016-09-08 10:38:49	***	Buffer Playback...
2016-09-08 10:38:49	pfn	[23:44:13] because a method isn't a function 
2016-09-08 10:38:49	adelbertc	[00:07:33] see http://tpolecat.github.io/2014/06/09/methods-functions.html
2016-09-08 10:38:49	tpolecat	[00:25:15] aggregator.combineValuesByKey(_) is a function literal with a placeholder; it is equivalent to x => aggregator.combineValuesByKey(x)
2016-09-08 10:38:49	moodest	[00:55:16] in skinny-orm, can a HasManyAssociation be constructed with a NoIdFeature on the many side? https://gist.github.com/anonymous/ff3b445413798d55be306deb7cd1c1b1 (when trying to use the association, an exception that 'id' is not a field name is thrown)  Anyone run into this problem while using this framework?
2016-09-08 10:38:49	tpolecat	[00:56:17] huh. never heard of it
2016-09-08 10:38:49	lemonsparrow	[02:24:12] is it possible to use scala code in a java application ?
2016-09-08 10:38:49	dibblego	[02:25:28] it is possible to use a .class file, that was compiled using javac, from scala source, such that scalac compiles that source
2016-09-08 10:38:49	pfn	[02:50:09] hmm, extension defs can only be used on an explicit receiver, right? i.e. I can't do { import receiver._; someExtensionOfReceiver() }
2016-09-08 10:38:49	reactormonk	[02:52:24] lemonsparrow, sure, see e.g. play. You usually want to define a java interface which you implement in scala.
2016-09-08 10:38:49	lemonsparrow	[03:25:38] reactormonk: thnaks.. any sample reference implementation ? I'm completely new to scala.. what is play?
2016-09-08 10:38:49	reactormonk	[03:31:07] lemonsparrow, play framework.
2016-09-08 10:38:49	reactormonk	[03:31:34] lemonsparrow, you don't see scala libs for java too often, because that means you have to restrict yourself to a subset java understands.
2016-09-08 10:38:49	lemonsparrow	[03:31:45] reactormonk: ok.. my idea is to have some utility functions in scala as a jar and use in my java applications
2016-09-08 10:38:49	oal	[05:29:25] I have a List[List[(Int, Int)]] and I want to get only the unique List[(Int, Int)]. .contains seems to think they're different even though they contain the same tuple values
2016-09-08 10:38:49	oal	[05:29:42] How can I solve this?
2016-09-08 10:38:49	oal	[05:35:12] List(List((1,2), (1,3)), List((0,2), (0,3)), List((2,2), (2,3)), List((1,2), (1,3)), List((2,2), (2,3))) is what the data looks like, and as you can see, there are some duplicates
2016-09-08 10:38:49	oal	[05:35:52] huh, never mind. If I do .distinct outside of the function that generates the list, I seem to get a deduped list
2016-09-08 10:38:49	S11001001	[05:46:57] pfn: right
2016-09-08 10:38:49	Rc43	[07:26:10] Hi
2016-09-08 10:38:49	Rc43	[07:26:57] I am running an App with "scala MyApp.scala" but no output is generated and seems that nothing is launched
2016-09-08 10:38:49	nullremains	[07:42:06] Rc43: scalac MyApp.scala; scala MyApp
2016-09-08 10:38:49	Rc43	[07:50:16] nullremains, yep, it's not critical problem :) just hoped it's possible to interpret script without necessity to remove .class files then
2016-09-08 10:38:49	nullremains	[07:51:28] scalac MyApp.scala; scala MyApp; rm -f *.class
2016-09-08 10:38:49	nullremains	[07:51:31] ;-)
2016-09-08 10:38:49	Rc43	[07:51:55] ye ye I knew you write this :D
2016-09-08 10:38:49	nullremains	[07:53:01] yeah, silly.
2016-09-08 10:38:49	Rc43	[07:54:14] Not silly if separate folder for it :)
2016-09-08 10:38:49	Rc43	[07:54:53] mkdir temp; cp MyApp.scala temp; cd temp; scalac MyApp.scala; scala MyApp; cd -; rm temp
2016-09-08 10:38:49	Rc43	[07:54:55] :)
2016-09-08 10:38:49	nullremains	[07:55:04] Depends on what you're doing, Ammonite apparently delivers on the quick script front
2016-09-08 10:38:49	Rc43	[07:56:19] Interesting thing, I should glance on it
2016-09-08 10:38:49	nullremains	[07:56:49] anyway, wouldn't worry about class files, there are 2 or 3 (million) lying around in your project's sbt compile target.
2016-09-08 10:38:49	dunkl	[08:11:47] I want to pass a Function0[T] as an argument and preferably use an alias (type Condition = Function0[Boolean] for example). Is it possible to have something like Condition{ someBoolean } work? I know about "() => {someBoolean}", but it's not quite what I want
2016-09-08 10:38:49	reactormonk	[08:13:10] dunkl, take a look at Lazy from cats (?)
2016-09-08 10:38:49	dunkl	[08:13:31] I just googled lazy cats and I'm not disappointed
2016-09-08 10:38:49	dunkl	[08:28:40] I'd like to understand what I'm doing. What is the underscore doing in "def apply(f: => Boolean) = new Cond(f _)" if Cond takes a () => Boolean? never saw this syntax elsewhere
2016-09-08 10:38:49	nullremains	[08:30:53] dunkl: f is a by-name parameter; without the underscore it will be evaluated in within new Cond(...) thus making lazy, strict
2016-09-08 10:38:49	dunkl	[08:32:49] just looks strange, but thanks for the help @ reactormonk nullremains 
2016-09-08 10:38:49	Ben_1	[10:24:22] hi
2016-09-08 10:38:49	tpolecat	[10:25:30] hello
2016-09-08 10:38:49	Ben_1	[10:25:44] I'm using scalatags and wrote a onchange attr in a select element. My problem is that the javascript inside that onchange won't resolve this.value or this.selectedIndex. Someone an idea what to do?
2016-09-08 10:38:49	nullremains	[10:28:25] Ben_1: got a sample to show?
2016-09-08 10:38:49	Ben_1	[10:28:54] one moment please I will paste it
2016-09-08 10:38:49	Ben_1	[10:31:53] nullremains: http://pastebin.com/vXd7ZRXP
2016-09-08 10:38:49	tpolecat	[10:32:17] Ben_1: if you can't get an answer here Haoyi is on gitter
2016-09-08 10:38:49	Ben_1	[10:32:33] tpolecat: thanks for that information!
2016-09-08 10:38:49	nullremains	[10:33:07] Ben_1: that's a js problem, nothing to do with scala
2016-09-08 10:38:49	Ben_1	[10:33:44] nullremains: in js it work, so it is a scalatags problem and scalatags has to do with scala :P
2016-09-08 10:38:49	nullremains	[10:35:05] how on earth could "/foo/bar?baz=..&subs=this.selectedIndex" work?
2016-09-08 10:38:49	nullremains	[10:36:33] "&subs=" + this.selectedIndex would work, but definitely not embedded in the string like you have in your paste
2016-09-08 10:38:49	***	Playback Complete.
2016-09-08 10:39:03	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-08 10:39:51	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 10:40:01	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-08 10:40:35	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 10:40:45	<--	yeitijem (~yeitijem@p50995cae.dip0.t-ipconnect.de) has quit (Ping timeout: 276 seconds)
2016-09-08 10:41:32	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 10:42:07	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 10:43:19	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 10:44:06	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 10:45:10	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 10:45:39	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 10:46:53	-->	yeitijem (~yeitijem@p50995cae.dip0.t-ipconnect.de) has joined #scala
2016-09-08 10:46:53	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 10:46:59	-->	mberndt (~mberndt@2a02:8108:4a40:4130:c3d7:d151:86d9:621f) has joined #scala
2016-09-08 10:47:27	-->	DrNo (~IRSSI@112.58.7.51.dyn.plus.net) has joined #scala
2016-09-08 10:48:06	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 10:48:36	Ben_1	nullremains:  that's not the problem. the problem is, that this.value is not resolved (even with +)
2016-09-08 10:48:40	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 10:49:14	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 10:49:29	-->	constant (~root@freebsd/developer/variable) has joined #scala
2016-09-08 10:50:03	mberndt	Hey there
2016-09-08 10:50:27	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 10:51:04	-->	ixxie (~ixxie@82-181-162-226.bb.dnainternet.fi) has joined #scala
2016-09-08 10:51:06	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 10:51:24	mberndt	I've got a type RT with a type member P. Then I've got a trait R { val rt: RT; val p: rt.P }
2016-09-08 10:52:03	-->	xnavor (~xnavor@78-70-4-240-no171.business.telia.com) has joined #scala
2016-09-08 10:52:15	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 10:52:57	mberndt	the RT's are typically singleton objects. Is it possible to teach the compiler about the type of p by matching on the associated rt? 
2016-09-08 10:53:20	mberndt	I've written down the code here if it wasn't clear: http://scastie.org/22237
2016-09-08 10:53:21	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 10:53:51	mberndt	Oh… it compiles?!
2016-09-08 10:54:04	mberndt	OK, seems like I just need to update my scala compiler. 
2016-09-08 10:54:05	nullremains	mberndt: you can't pattern match on an object
2016-09-08 10:54:07	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 10:54:43	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 10:55:21	-->	pfurla (~textual@65.206.95.146) has joined #scala
2016-09-08 10:55:47	-->	Wertax (~wertax@193.110.235.126) has joined #scala
2016-09-08 10:57:16	<--	xnavor (~xnavor@78-70-4-240-no171.business.telia.com) has quit (Quit: This computer has gone to sleep)
2016-09-08 10:57:40	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 10:57:49	<--	Wertax (~wertax@193.110.235.126) has quit (Remote host closed the connection)
2016-09-08 10:58:16	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 10:58:25	-->	Wertax (~wertax@193.110.235.126) has joined #scala
2016-09-08 10:58:48	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 244 seconds)
2016-09-08 10:59:04	mberndt	Oh, no. it doesn't work after all. 
2016-09-08 10:59:06	mberndt	http://scastie.org/22238
2016-09-08 10:59:13	mberndt	does anybody know how to fix that? 
2016-09-08 10:59:23	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-08 10:59:23	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 10:59:50	mberndt	nullremains: I don't really know what you mean. 
2016-09-08 11:00:21	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:00:36	nullremains	yeah, I'm actually wrong there, thought the `case RT1 =>` would blow up expecting a class type
2016-09-08 11:01:12	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:01:20	-->	xnavor (~xnavor@78-70-4-240-no171.business.telia.com) has joined #scala
2016-09-08 11:01:33	<--	zmack (~zmack@188.27.87.208) has quit (Remote host closed the connection)
2016-09-08 11:01:51	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:02:26	mberndt	oh noes, tpolecat isn't here :'(
2016-09-08 11:02:30	mberndt	surely he'd know…
2016-09-08 11:02:34	<--	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has quit (Quit: Leaving.)
2016-09-08 11:02:51	-->	zmack (~zmack@188.27.87.208) has joined #scala
2016-09-08 11:02:57	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:03:01	<--	Wertax (~wertax@193.110.235.126) has quit (Ping timeout: 255 seconds)
2016-09-08 11:03:15	nullremains	why not just Some(p)?
2016-09-08 11:03:39	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:04:27	mberndt	well, the point is to get the compiler to understand that p is in fact an Int
2016-09-08 11:04:37	mberndt	I might also write p*2 or something
2016-09-08 11:04:49	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:05:22	<--	two_wheels (~two_wheel@c-50-171-156-18.hsd1.mn.comcast.net) has quit (Ping timeout: 252 seconds)
2016-09-08 11:05:37	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:06:12	<--	tuxdna (~saleem@125.16.34.66) has quit (Ping timeout: 250 seconds)
2016-09-08 11:06:15	<--	mosulica (~textual@82.208.160.88) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-08 11:06:33	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:06:34	<--	jaana (~jaana@c-71-198-4-58.hsd1.ca.comcast.net) has quit (Quit: jaana)
2016-09-08 11:07:03	<--	zmack (~zmack@188.27.87.208) has quit (Ping timeout: 240 seconds)
2016-09-08 11:07:09	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:08:16	-->	tuxdna (~saleem@125.16.34.66) has joined #scala
2016-09-08 11:08:24	<--	tuxdna (~saleem@125.16.34.66) has quit (Remote host closed the connection)
2016-09-08 11:08:24	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:08:58	pfn	why are you doing case RT1
2016-09-08 11:09:49	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:11:29	-->	two_wheels (~two_wheel@50-93-251-80.fttp.usinternet.com) has joined #scala
2016-09-08 11:12:06	pfn	mberndt, http://scastie.org/22241
2016-09-08 11:12:18	-->	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has joined #scala
2016-09-08 11:12:25	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:13:09	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:13:55	pfn	otherwise RT1 is inferred as RT { type P } 
2016-09-08 11:14:00	mberndt	So you fixed it by removing the type annotation on r?
2016-09-08 11:14:13	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:14:20	-->	henriknj (~hnj@84.238.125.62) has joined #scala
2016-09-08 11:14:23	<--	forgottenone (~forgotten@195.142.41.221) has quit (Quit: Konversation terminated!)
2016-09-08 11:14:46	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:15:21	pfn	no, by changing object to val
2016-09-08 11:15:53	mberndt	oh, my mistake
2016-09-08 11:15:54	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:16:35	-->	tpolecat (~anonymous@199.167.24.131) has joined #scala
2016-09-08 11:16:41	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:16:54	<--	tpolecat (~anonymous@199.167.24.131) has left #scala
2016-09-08 11:16:58	<--	dennisvennink (~dv@wlan-145-94-189-34.wlan.tudelft.nl) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-09-08 11:17:00	-->	tpolecat (~anonymous@199.167.24.131) has joined #scala
2016-09-08 11:17:29	mberndt	um, no
2016-09-08 11:17:34	mberndt	that doesn't fix the problem. 
2016-09-08 11:17:36	<--	xnavor (~xnavor@78-70-4-240-no171.business.telia.com) has quit (Quit: This computer has gone to sleep)
2016-09-08 11:17:40	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:17:55	mberndt	When I put the type annotation back for r it doesn't compile any longer. 
2016-09-08 11:18:02	mberndt	val or object doesn't make a difference…
2016-09-08 11:18:14	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:18:25	-->	Ir1sh (~Ir1sh@12.228.115.34) has joined #scala
2016-09-08 11:18:27	mberndt	and I can't assume any more than the type R in my use case. 
2016-09-08 11:18:56	tpolecat	what's the question? i disconnected for a bit
2016-09-08 11:19:06	-->	allengeorge (~textual@208.185.185.131) has joined #scala
2016-09-08 11:19:32	<--	thomasbilk (~thomasbil@pD951215A.dip0.t-ipconnect.de) has quit (Quit: Leaving)
2016-09-08 11:19:32	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:19:59	-->	hamid (~nithp@unaffiliated/hamid) has joined #scala
2016-09-08 11:20:09	mberndt	I've got a type RT with a type member P. Then I've got a trait R { val rt: RT; val p: rt.P }. The RT's are typically singleton objects. Is it possible to teach the compiler about the type of p by matching on the associated rt? 
2016-09-08 11:20:10	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:20:10	-->	uglyfigurine (~uglyfigur@131.228.197.10) has joined #scala
2016-09-08 11:20:20	mberndt	http://scastie.org/22238
2016-09-08 11:20:28	pfn	mberndt, it fixes what you pasted
2016-09-08 11:20:57	pfn	you haven't indicated what you. want
2016-09-08 11:21:13	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:21:19	mberndt	pfn: if you write val r: R = … rather than val r = … it doesn't compile any longer. 
2016-09-08 11:21:51	mberndt	and in my use case I can't assume anything about r's type other than that it's an R. 
2016-09-08 11:21:51	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:22:30	tpolecat	Option[r.rt.P]  and the Some(p)
2016-09-08 11:23:00	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:23:14	mberndt	tpolecat: the point is that I want the compiler to understand that because rt is RT1, rt.P must be Int
2016-09-08 11:23:39	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:23:44	tpolecat	then val r = new R ...
2016-09-08 11:24:00	tpolecat	if you ascribe R you lose the refinement
2016-09-08 11:24:02	pfn	mberndt, that's because you screw up. the type. inference when you say :R
2016-09-08 11:24:44	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:24:53	tpolecat	the type of r is R { val rt: RT1.type }
2016-09-08 11:25:06	mberndt	In my actual use case I have a List[R] and I want to collect the Ints from those where rt is RT1
2016-09-08 11:25:12	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:25:16	tpolecat	if you ascribe R you widen it to the point wher the type of rt becomes existential
2016-09-08 11:25:24	-->	Wertax (~wertax@193.110.235.126) has joined #scala
2016-09-08 11:25:53	-->	xnavor (~xnavor@78-70-4-240-no171.business.telia.com) has joined #scala
2016-09-08 11:26:06	-->	waqas (~Adium@216.174.114.140) has joined #scala
2016-09-08 11:26:09	mberndt	and I really only know it's a List[R] and not a List[R { rt: RT1.type }]
2016-09-08 11:26:23	tpolecat	ok
2016-09-08 11:26:29	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:27:10	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:27:38	<--	Neo-- (~neo@BSN-143-173-231.dynamic.siol.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-08 11:27:52	mberndt	that's actually why I put the : R there
2016-09-08 11:28:17	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:28:34	-->	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has joined #scala
2016-09-08 11:28:37	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-08 11:29:01	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:30:08	tpolecat	you don't have a proof at that point that r.rt.P =:= Int because the match doesn't tell you r.rt is exactly RT1, only that it is == to RT1
2016-09-08 11:30:08	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:30:39	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:30:46	uglyfigurine	Please help. I keep feeling like i understand the usecase then fail to see it as i do implementation. What benefit will akka streams give me for this scenario - http://hastebin.com/exigifeciw.vhdl
2016-09-08 11:31:10	uglyfigurine	I am not reading a continuous stream, i am reading a static list of binary files
2016-09-08 11:31:12	mberndt	tpolecat: so I guess it's not possible? 
2016-09-08 11:31:44	tpolecat	trying another approach
2016-09-08 11:31:44	pfurla	mberndt: are you trying to make a sigma-like type?
2016-09-08 11:31:50	mberndt	I'm refactoring some old code for better type safety
2016-09-08 11:32:17	mberndt	actually what is now of type rt.P used to be of type Map[String, Any]
2016-09-08 11:32:23	pfurla	https://en.wikipedia.org/wiki/Dependent_type#Dependent_pair_type <-- sigma 
2016-09-08 11:32:35	mberndt	I know what a sigma type is. 
2016-09-08 11:32:38	mberndt	thanks
2016-09-08 11:33:16	mberndt	actually I've already rewritten the production code and it works fine, but now all the tests don't compile any longer because unlike the production code, they rely on that type
2016-09-08 11:33:39	mberndt	which is one of the reason I *hate* unit testing
2016-09-08 11:33:42	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:33:52	-->	crobbins (~crobbins@96.8.88.13) has joined #scala
2016-09-08 11:33:56	<--	xpen (~xpen@114.111.166.229) has quit (Ping timeout: 244 seconds)
2016-09-08 11:34:19	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:34:27	<--	OOPMan (~OOPMan@154.66.249.84) has quit (Ping timeout: 250 seconds)
2016-09-08 11:34:27	<--	constant (~root@freebsd/developer/variable) has quit (Quit: 1 found in /dev/zero)
2016-09-08 11:34:52	mberndt	Oh well, I'll just resort to casting then. 
2016-09-08 11:35:28	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:36:11	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:36:39	<--	DrNo (~IRSSI@112.58.7.51.dyn.plus.net) has quit (Ping timeout: 276 seconds)
2016-09-08 11:37:07	pfurla	mberndt: removing the type ascriptions it works fine
2016-09-08 11:37:15	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:37:22	-->	OOPMan (~OOPMan@154.66.249.84) has joined #scala
2016-09-08 11:37:31	tpolecat	his point is that he doesn't have the refinement anymore
2016-09-08 11:37:37	pfurla	of course, i is inferred to Option[r.rt.P]
2016-09-08 11:37:49	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:38:02	tpolecat	and is trying to recover it with a gadt match, but the trait isn't sealed and anyway it doesn't work
2016-09-08 11:38:25	tpolecat	S11001001 may have an idea if he's around. i need to give up and do some work
2016-09-08 11:38:25	mberndt	it's kinda sad :-(
2016-09-08 11:38:33	nullremains	can't do much with R
2016-09-08 11:38:33	mberndt	thanks anyway!
2016-09-08 11:38:47	<--	shinnya (~shinnya@245.144.137.133.dy.bbexcite.jp) has quit (Ping timeout: 250 seconds)
2016-09-08 11:39:42	pfurla	oh I see, I missed a portion of the conversation
2016-09-08 11:39:55	<--	eklavya (~eklavya@103.69.48.198) has quit (Remote host closed the connection)
2016-09-08 11:40:11	-->	Wertax_ (~wertax@193.110.235.116) has joined #scala
2016-09-08 11:40:42	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:41:07	SethTisue	someone asked yesterday about Either in Scala 2.12
2016-09-08 11:41:16	SethTisue	it is right-biased as of 2.12.0-RC1
2016-09-08 11:41:18	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:41:19	<--	allengeorge (~textual@208.185.185.131) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 11:41:25	SethTisue	tpolecat gave the example of: for { a <- Left(2); b = 1 } yield "x"
2016-09-08 11:41:28	SethTisue	that did not compile before
2016-09-08 11:41:30	SethTisue	it compiles now
2016-09-08 11:41:36	-->	eklavya (~eklavya@103.69.48.198) has joined #scala
2016-09-08 11:41:43	SethTisue	and yields Left(2) as expected
2016-09-08 11:41:55	tpolecat	rock on
2016-09-08 11:42:19	SethTisue	the old .left and .right methods are now deprecated
2016-09-08 11:42:29	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:42:33	uglyfigurine	waaat
2016-09-08 11:42:59	nullremains	SethTisue: cool, what's the status of http://www.scala-lang.org/blog/2016/07/08/trait-method-performance.html
2016-09-08 11:43:11	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:43:12	uglyfigurine	SethTisue: do u have a link to the release notes?
2016-09-08 11:43:23	SethTisue	2.12.0-RC1 is already on Maven. we're still writing release notes and waiting for library authors to publish, so there hasn't been a formal announcement yet
2016-09-08 11:43:37	pfn	SethTisue, so how do you get a left projection? 
2016-09-08 11:43:38	SethTisue	uglyfigurine: not yet because I haven't assembled them yet :-)
2016-09-08 11:43:48	uglyfigurine	Oh
2016-09-08 11:44:15	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:44:15	<--	Wertax (~wertax@193.110.235.126) has quit (Ping timeout: 264 seconds)
2016-09-08 11:44:21	tpolecat	presumably the projectons still exist ..?
2016-09-08 11:44:48	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:45:04	SethTisue	pfn: the deprecation method for .left recommends using .swap
2016-09-08 11:45:40	-->	mheld (uid5329@gateway/web/irccloud.com/x-vqblzweszrmbhdxi) has joined #scala
2016-09-08 11:45:44	SethTisue	tpolecat: .left and .right were deprecated, not removed, as per the usual deprecate-then-remove policy, so yes the projections still *exist*, but they are deprecated
2016-09-08 11:45:57	pfn	I see 
2016-09-08 11:46:01	tpolecat	that sounds just right
2016-09-08 11:46:01	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:46:21	pfn	seems like you'd still want to keep the left and right methods? 
2016-09-08 11:46:34	 *	pfn shrugs
2016-09-08 11:46:43	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:47:03	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 276 seconds)
2016-09-08 11:47:11	SethTisue	the discussion on the deprecation of the projections was at https://github.com/scala/scala/pull/5135 
2016-09-08 11:47:46	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:47:50	nullremains	SethTisue: is there any hope for the GA or this a JVM limitation?
2016-09-08 11:47:59	SethTisue	Simon summarizes here: https://github.com/scala/scala/pull/5135#issuecomment-231054989
2016-09-08 11:48:15	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:48:36	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-08 11:48:56	SethTisue	nullremains: I'm afraid I don't know. you might try asking Lukas on scala-internals
2016-09-08 11:49:30	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:49:30	-->	forgottenone (~forgotten@195.142.41.221) has joined #scala
2016-09-08 11:50:15	nullremains	k, thanks
2016-09-08 11:50:33	<--	lunaryorn (~lunaryorn@213.95.17.180) has quit (Quit: Bye)
2016-09-08 11:51:18	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:51:23	<--	Wertax_ (~wertax@193.110.235.116) has quit (Remote host closed the connection)
2016-09-08 11:51:57	-->	Wertax (~wertax@193.110.235.116) has joined #scala
2016-09-08 11:52:04	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:52:43	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:53:46	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:54:25	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:54:39	-->	lunaryorn (~lunaryorn@213.95.17.180) has joined #scala
2016-09-08 11:55:03	uglyfigurine	if i am making an akka stream from a Future[Seq[T]], formed using Future.sequence on Seq[Future[T]], will the stream process anything before the entire future is resolved?
2016-09-08 11:56:07	Milyardo	I'd imagine no
2016-09-08 11:56:51	<--	Wertax (~wertax@193.110.235.116) has quit (Ping timeout: 264 seconds)
2016-09-08 11:57:26	SethTisue	uglyfigurine: seems inherent in the type Future[Seq[T]] that you either have the whole sequence, or nothing
2016-09-08 11:57:26	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 11:57:29	<--	fbergmann (fbergmann@nat/novell/x-rtzcwjplgmcxfirt) has quit (Quit: WeeChat 1.3)
2016-09-08 11:58:13	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 11:58:32	uglyfigurine	yeah, i thought so. so if i am downloading a bunch of files, using a Future.sequence on them is not a good idea i guess
2016-09-08 11:59:23	-->	PSoBI (~latner@host66.minutemantransport.com) has joined #scala
2016-09-08 12:00:48	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 250 seconds)
2016-09-08 12:00:56	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:01:45	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:01:59	-->	Jacquie (1f0aaa52@gateway/web/freenode/ip.31.10.170.82) has joined #scala
2016-09-08 12:02:42	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:02:51	Jacquie	Hello guys someone could help me with coursera w3 please
2016-09-08 12:02:57	Jacquie	https://www.coursera.org/learn/progfun1/programming/Ogg05/object-oriented-sets
2016-09-08 12:03:16	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:03:20	Jacquie	I dont understant the basics of the concept behinf filter
2016-09-08 12:04:28	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:05:05	retrospectacus	we (I) can't access that, but filter removes elements from a collection based on a test of each element
2016-09-08 12:05:15	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:05:26	<--	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has quit (Quit: nomicflux)
2016-09-08 12:06:15	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:06:18	Jacquie	retrospectacus why acting on the right on nonempty ?
2016-09-08 12:06:26	Jacquie	and not the left
2016-09-08 12:06:48	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:07:11	<--	Iskarlar (~Iskarlar@D9641F32.static.ziggozakelijk.nl) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-08 12:07:21	Jacquie	retrospectacus, 
2016-09-08 12:07:34	Jacquie	Have done it too ^^?
2016-09-08 12:07:54	tpolecat	Jacquie: you should check out the forums on coursera
2016-09-08 12:08:04	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:08:04	retrospectacus	...what?
2016-09-08 12:08:27	retrospectacus	as I mentioned, I do not have a login. No I have not done it
2016-09-08 12:08:43	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:09:06	-->	jaana (jaana@nat/yahoo/x-yyqpfgpvdemypyti) has joined #scala
2016-09-08 12:09:21	<--	lunaryorn (~lunaryorn@213.95.17.180) has quit (Quit: Bye)
2016-09-08 12:09:45	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:09:56	Jacquie	retrospectacus,  def filterAcc(p: Tweet => Boolean, acc: TweetSet): TweetSet =        right.filterAcc(p,left.filterAcc(p, if (p(elem)) acc.incl(elem) else acc))
2016-09-08 12:10:17	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:11:08	tpolecat	it's a recursive function that's building up a new set by filtering the existing one
2016-09-08 12:11:17	tpolecat	acc is the set it's constructing
2016-09-08 12:11:33	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:11:49	Jacquie	tpolecat, why doin it on the right of the tree
2016-09-08 12:11:55	Jacquie	nothin to do with the size ?
2016-09-08 12:12:15	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:12:49	tpolecat	well it does the left first
2016-09-08 12:13:15	tpolecat	and uses the reult as the acc for doing the right
2016-09-08 12:13:16	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:13:23	<--	przl_ (~przlrkt@80.82.202.196) has quit (Ping timeout: 250 seconds)
2016-09-08 12:13:24	Jacquie	tpolecat another thing  in p(elem) whers the thest ?
2016-09-08 12:13:36	tpolecat	whete's the what?
2016-09-08 12:13:46	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:13:49	Jacquie	x>10 for instance
2016-09-08 12:14:06	ilmari	is there a neat way to turn an Option[Seq[T]] into a Seq[Option[T]]? I know the length it should be if it's None.
2016-09-08 12:14:08	Jacquie	the boolean condition
2016-09-08 12:14:25	retrospectacus	Jacquie: p is the test. p: Tweet => Boolean
2016-09-08 12:14:28	tpolecat	Jacquie: it's passed in; p is a function argument
2016-09-08 12:14:30	ilmari	! Some(Seq(1,2,3)).map(_.map(Some(_))).getOrElse(Seq.fill(skuIds.size)(None))
2016-09-08 12:14:40	multibot_1	 error: not found: value skuIds
2016-09-08 12:14:41	multibot_1	        Some(Seq(1,2,3)).map(_.map(Some(_))).getOrElse(Seq.fill(skuIds.size)(None))
2016-09-08 12:14:42	multibot_1	                                                                ^
2016-09-08 12:14:44	ilmari	bah
2016-09-08 12:14:47	ilmari	! Some(Seq(1,2,3)).map(_.map(Some(_))).getOrElse(Seq.fill(3)(None))
2016-09-08 12:14:48	multibot_1	 Seq[Option[Int]] = List(Some(1), Some(2), Some(3))
2016-09-08 12:14:51	<--	ghounds (~gabriel@69.74.59.115) has quit (Ping timeout: 265 seconds)
2016-09-08 12:14:52	tpolecat	ilmari: you can do it with scalaz if you have a concrete type
2016-09-08 12:14:59	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:15:05	tpolecat	but not with Seq because it's not a functor
2016-09-08 12:15:06	Jacquie	ahh so if not explicitly mentionned as elem but we can implement
2016-09-08 12:15:37	<--	hugofirth (~hugofirth@janus-nat-128-240-225-103.ncl.ac.uk) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-08 12:15:40	tpolecat	ilmari: or write it yourself
2016-09-08 12:15:46	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:15:51	Jacquie	tpolecat so if we use this f() we don have to put the tweet as its already elem ?
2016-09-08 12:16:03	ilmari	tpolecat: that invocation does the trick, but I don't like the .map(_.map(Some(_)) bit
2016-09-08 12:16:11	ilmari	s/invocation/incantation/
2016-09-08 12:16:41	tpolecat	well i think your implementation is wrong
2016-09-08 12:16:44	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:16:58	tpolecat	! List(1.some, 2.some).sequence
2016-09-08 12:17:00	multibot_1	 Option[List[Int]] = Some(List(1, 2))
2016-09-08 12:17:11	tpolecat	List(1.some, 2.some, none).sequence
2016-09-08 12:17:16	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:17:22	tpolecat	! List(1.some, 2.some, none).sequence
2016-09-08 12:17:23	multibot_1	 Option[List[Int]] = None
2016-09-08 12:17:30	tpolecat	is that the intended behavior?
2016-09-08 12:17:49	ilmari	that's the opposite way around
2016-09-08 12:18:09	tpolecat	oh ok
2016-09-08 12:18:20	tpolecat	sorry i cleared my scrollback
2016-09-08 12:18:27	ilmari	I have an Option[Seq[Int]] and want a Seq[Option[Int]], and I know what length I want if it's None
2016-09-08 12:18:27	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:19:14	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:19:14	retrospectacus	fold
2016-09-08 12:19:26	tpolecat	! Option(List(1,2,3)).sequence
2016-09-08 12:19:27	multibot_1	 List[Option[Int]] = List(Some(1), Some(2), Some(3))
2016-09-08 12:20:06	ilmari	where does sequence come from? scalaz?
2016-09-08 12:20:15	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:20:46	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:22:24	tpolecat	yes. or cats
2016-09-08 12:22:40	<--	flugsio (~fluzios@201.86.223.238) has quit (Ping timeout: 264 seconds)
2016-09-08 12:23:02	tpolecat	as i noted though it's undefined for Seq
2016-09-08 12:23:17	tpolecat	so you will need to write it yourself anyway
2016-09-08 12:23:43	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:24:17	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:24:33	<--	forgottenone (~forgotten@195.142.41.221) has quit (Ping timeout: 240 seconds)
2016-09-08 12:25:04	<--	red1ynx_ (~dzmitry@37.17.34.68) has quit (Ping timeout: 264 seconds)
2016-09-08 12:27:21	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:27:51	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:27:54	-->	adelbertc (uid26183@gateway/web/irccloud.com/x-qklrhhptlrfabxdr) has joined #scala
2016-09-08 12:28:07	<--	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has quit (Remote host closed the connection)
2016-09-08 12:28:31	ilmari	I'll go for what I pasted above, but naming the first _ in the map 'seq' to avoid confusion
2016-09-08 12:29:07	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:29:36	<--	shellac (~pldms@it061813.ilrt.bris.ac.uk) has quit (Quit: Leaving)
2016-09-08 12:29:44	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:29:45	<--	setheus (~setheus@107-203-153-73.lightspeed.rcsntx.sbcglobal.net) has quit (Ping timeout: 244 seconds)
2016-09-08 12:29:52	<--	marr (~ccc@dynamic-78-8-84-93.ssp.dialog.net.pl) has quit (Ping timeout: 240 seconds)
2016-09-08 12:30:51	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:31:27	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:31:38	-->	setheus (~setheus@107-203-153-73.lightspeed.rcsntx.sbcglobal.net) has joined #scala
2016-09-08 12:32:10	<--	mberndt (~mberndt@2a02:8108:4a40:4130:c3d7:d151:86d9:621f) has quit (Quit: Konversation terminated!)
2016-09-08 12:32:15	<--	uglyfigurine (~uglyfigur@131.228.197.10) has quit (Remote host closed the connection)
2016-09-08 12:32:16	-->	mberndt_ (~mberndt@ip1f1298ae.dynamic.kabel-deutschland.de) has joined #scala
2016-09-08 12:32:35	<--	xnavor (~xnavor@78-70-4-240-no171.business.telia.com) has quit (Quit: This computer has gone to sleep)
2016-09-08 12:32:35	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:33:01	<--	Ben_1 (~ben@2001:1438:4010:702:f815:dc1a:6a22:1f49) has quit (Ping timeout: 255 seconds)
2016-09-08 12:33:14	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:33:53	-->	dennisvennink (~dv@92.109.221.191) has joined #scala
2016-09-08 12:34:22	-->	tag (~tag@fw03.sfoffice.quantcast.com) has joined #scala
2016-09-08 12:34:22	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:35:01	<--	laithal (~laithal@62.254.100.194) has quit (Ping timeout: 252 seconds)
2016-09-08 12:35:17	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:36:08	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:36:47	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:37:04	<--	mberndt_ (~mberndt@ip1f1298ae.dynamic.kabel-deutschland.de) has quit (Ping timeout: 255 seconds)
2016-09-08 12:37:24	-->	ghounds (~gabriel@69.74.59.115) has joined #scala
2016-09-08 12:37:34	-->	romerocesar (~cesar@c-73-97-145-30.hsd1.wa.comcast.net) has joined #scala
2016-09-08 12:38:40	<--	dennisvennink (~dv@92.109.221.191) has quit (Client Quit)
2016-09-08 12:39:44	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:40:16	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:41:34	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:42:19	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:42:42	-->	dennisvennink (~dv@92.109.221.191) has joined #scala
2016-09-08 12:43:22	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:43:46	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:44:54	<--	erguven (uid171385@gateway/web/irccloud.com/x-rltwjukthlsobriu) has quit (Quit: Connection closed for inactivity)
2016-09-08 12:45:00	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:45:48	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:46:49	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:47:19	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:47:37	-->	replay (~replay@pdpc/supporter/student/replay) has joined #scala
2016-09-08 12:48:31	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:49:18	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:49:21	-->	Ben_1 (~ben@2001:1438:4010:702:f815:dc1a:6a22:1f49) has joined #scala
2016-09-08 12:50:08	<--	mszczygiel (~m.szczygi@157.25.96.26) has quit (Ping timeout: 265 seconds)
2016-09-08 12:50:23	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:50:50	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:51:30	<--	Ben_1 (~ben@2001:1438:4010:702:f815:dc1a:6a22:1f49) has left #scala
2016-09-08 12:52:08	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:52:20	<--	romerocesar (~cesar@c-73-97-145-30.hsd1.wa.comcast.net) has quit (Remote host closed the connection)
2016-09-08 12:52:27	-->	[poe]jdk1 (~jkendall@24-223-105-130.static.cablene.com) has joined #scala
2016-09-08 12:52:34	-->	randomstatistic (~randomsta@205.207.255.196) has joined #scala
2016-09-08 12:52:47	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:53:28	-->	sepp2k (~sepp2k@pD9520A6D.dip0.t-ipconnect.de) has joined #scala
2016-09-08 12:53:53	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:54:29	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:57:06	-->	shinnya (~shinnya@245.144.137.133.dy.bbexcite.jp) has joined #scala
2016-09-08 12:57:24	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 12:58:01	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 12:58:30	<--	dabd (~dabd@86.188.177.234) has quit (Remote host closed the connection)
2016-09-08 13:00:53	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 13:01:13	<--	crobbins (~crobbins@96.8.88.13) has quit (Remote host closed the connection)
2016-09-08 13:01:16	<--	eklavya (~eklavya@103.69.48.198) has quit (Remote host closed the connection)
2016-09-08 13:01:29	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 13:02:07	-->	vsuthichai (~vsuthicha@64.80.5.145) has joined #scala
2016-09-08 13:02:25	-->	squeaky_clean (~squeaky-c@162.213.148.250) has joined #scala
2016-09-08 13:02:44	<--	ixxie (~ixxie@82-181-162-226.bb.dnainternet.fi) has quit (Remote host closed the connection)
2016-09-08 13:02:44	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 13:02:49	<--	jfg9 (~josh@80.87.25.194) has quit (Quit: jfg9)
2016-09-08 13:03:17	<--	amcelwee- (amcelwee@foss.supporter.firrre.com) has quit (Ping timeout: 250 seconds)
2016-09-08 13:03:25	-->	dabd (~dabd@86.188.177.234) has joined #scala
2016-09-08 13:03:33	<--	waqas (~Adium@216.174.114.140) has quit (Quit: Leaving.)
2016-09-08 13:04:01	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 13:04:11	-->	squeaky-clean_ (~squeaky-c@162.213.148.250) has joined #scala
2016-09-08 13:04:15	<--	betandr (~betandr@132.185.153.5) has quit (Remote host closed the connection)
2016-09-08 13:04:29	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 13:04:35	<--	itruslove (itruslove@dev.null.firrre.com) has quit (Ping timeout: 250 seconds)
2016-09-08 13:04:41	-->	betandr (~betandr@132.185.153.5) has joined #scala
2016-09-08 13:05:01	<--	keix (~kei@softbank126027220035.bbtec.net) has quit (Ping timeout: 250 seconds)
2016-09-08 13:05:18	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 13:05:42	<--	giraffe (skarn@gateway/shell/firrre/x-fnqyvlieptkuyucg) has quit (Ping timeout: 276 seconds)
2016-09-08 13:05:57	<--	Arrgh (~alex@70.36.63.98) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 13:06:02	[poe]jdk1	can akka streams be used standalone from akka actors?
2016-09-08 13:06:21	<--	squeaky-clean (~squeaky-c@162.213.148.250) has quit (Ping timeout: 276 seconds)
2016-09-08 13:06:21	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 13:06:27	reactormonk	Unlikely
2016-09-08 13:06:35	reactormonk	If you want something else, fs2
2016-09-08 13:06:49	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 13:07:12	<--	omefire (~omefire@24.18.128.19) has quit (Remote host closed the connection)
2016-09-08 13:07:37	adelbertc	+1 to FS2
2016-09-08 13:07:39	<--	shinnya (~shinnya@245.144.137.133.dy.bbexcite.jp) has quit (Ping timeout: 276 seconds)
2016-09-08 13:07:40	<--	squeaky_clean (~squeaky-c@162.213.148.250) has quit (Ping timeout: 255 seconds)
2016-09-08 13:07:51	SethTisue	[poe]jdk1: my understanding is that ordinary Akka Streams code doesn't make any explicit references to actors at all
2016-09-08 13:07:55	-->	Arrgh (~alex@70.36.63.98) has joined #scala
2016-09-08 13:08:03	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 13:08:07	<--	dabd (~dabd@86.188.177.234) has quit (Ping timeout: 255 seconds)
2016-09-08 13:08:15	SethTisue	but there's probably actors in the underlying implementation? it depends on what you mean by "standalone"
2016-09-08 13:08:16	<--	Arrgh (~alex@70.36.63.98) has quit (Client Quit)
2016-09-08 13:08:17	-->	keix (~kei@softbank126124052035.bbtec.net) has joined #scala
2016-09-08 13:08:29	-->	firstdayonthejob (~firstdayo@cpc99346-croy26-2-0-cust153.19-2.cable.virginm.net) has joined #scala
2016-09-08 13:08:31	SethTisue	you'll probably get more definitive info if you ask on https://gitter.im/akka/akka
2016-09-08 13:08:51	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 13:08:51	-->	hamid (~nithp@unaffiliated/hamid) has joined #scala
2016-09-08 13:09:28	<--	betandr (~betandr@132.185.153.5) has quit (Ping timeout: 265 seconds)
2016-09-08 13:09:49	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Read error: Connection reset by peer)
2016-09-08 13:10:22	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 13:10:22	<--	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has quit (Client Quit)
2016-09-08 13:10:50	bizarrefish	Hi all
2016-09-08 13:11:06	-->	Arrgh (~alex@70.36.63.98) has joined #scala
2016-09-08 13:11:38	-->	Chris_Stewart_5 (~Chris_Ste@unaffiliated/chris-stewart-5/x-3612383) has joined #scala
2016-09-08 13:11:44	bizarrefish	I got bored and implemented a kind of crappy-lisp which implements eval/apply stuff to turn sexpr-like things into values of my free monad (which implements a DSL for interacting with an industrial thing)
2016-09-08 13:11:53	[poe]jdk1	Thanks guys
2016-09-08 13:12:02	Chris_Stewart_5	How exactly do you use this typesafe config when creating a slick data source?
2016-09-08 13:12:04	Chris_Stewart_5	http://slick.lightbend.com/doc/3.1.1/database.html#using-a-database-url
2016-09-08 13:12:15	bizarrefish	I did it such that 'bind' is automatically done for all arguments of function calls
2016-09-08 13:12:39	Chris_Stewart_5	do you load the 'databaseUrl' variable from the config file using 'Database.forConfig'?
2016-09-08 13:13:13	bizarrefish	So you can write expressions which look normal, but the sub-expressions are actually returning monad values, which feed into the expression via bind
2016-09-08 13:13:16	bizarrefish	What is this called?
2016-09-08 13:13:35	bizarrefish	It's a bit like do-notation, but more pervasive, so all method calls return a monad value.
2016-09-08 13:14:08	bizarrefish	(but the interpreter automatically feeds the monad value into non-monadic input parameters via bind)
2016-09-08 13:14:39	bizarrefish	So, (+ (mymonadicfunction "number1") (mymonadicfunction "number2"))
2016-09-08 13:14:56	bizarrefish	mymonadicfunction actually returns a monad value, though + accepts integer values
2016-09-08 13:15:50	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 13:17:33	-->	hamid_ (~nithp@unaffiliated/hamid) has joined #scala
2016-09-08 13:19:22	<--	iref (~ferko@81.30.229.109) has quit (Remote host closed the connection)
2016-09-08 13:19:29	adelbertc	bizarrefish: EDSL ? or its a common way to encode EDSLs in Scala
2016-09-08 13:19:59	adelbertc	embedded domain-specific language
2016-09-08 13:20:29	bizarrefish	adelbertc: Doesn't that just refer to the construction of, well, domain specific languages?
2016-09-08 13:20:35	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 265 seconds)
2016-09-08 13:20:45	adelbertc	i might have misinterpreted your question
2016-09-08 13:20:51	bizarrefish	Specifically, I want a name for the weaving of monadic bind/flatmap through normal-looking function calls
2016-09-08 13:20:56	adelbertc	are you asking what Scala calls it's equivalence of haskell do-notation?
2016-09-08 13:21:08	bizarrefish	This is a more general FP/monads question I guess
2016-09-08 13:21:17	adelbertc	i usually just use the adjective 'monadic'
2016-09-08 13:21:29	adelbertc	the scala version of do-notation is called for-comprehension
2016-09-08 13:21:40	adelbertc	monadic value? monadic computation?
2016-09-08 13:21:55	<--	Arrgh (~alex@70.36.63.98) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-08 13:22:00	-->	flugsio (~fluzios@201.86.223.238) has joined #scala
2016-09-08 13:22:29	bizarrefish	Say I have a function which takes normal, non-monadic arguments, function(arg1, arg2)
2016-09-08 13:22:43	-->	hamid (~nithp@unaffiliated/hamid) has joined #scala
2016-09-08 13:22:52	SethTisue	Chris_Stewart_5: if you don't get an answer here, you might have better luck at https://gitter.im/slick/slick
2016-09-08 13:22:57	bizarrefish	And I have a function which returns a monadic value: monadicfunction(param)
2016-09-08 13:23:15	bizarrefish	I hav an interpreter which allows you to write function(monadicfunction(param1), monadicfunction(param2))
2016-09-08 13:23:23	Chris_Stewart_5	SethTisue: Thanks
2016-09-08 13:23:28	bizarrefish	So, this expands to 2 flatmaps
2016-09-08 13:24:00	<--	hamid_ (~nithp@unaffiliated/hamid) has quit (Ping timeout: 244 seconds)
2016-09-08 13:24:23	-->	mberndt_ (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has joined #scala
2016-09-08 13:24:36	-->	eklavya (~eklavya@117.203.7.40) has joined #scala
2016-09-08 13:25:32	-->	IstiCusi (~phonon@84-75-175-159.dclient.hispeed.ch) has joined #scala
2016-09-08 13:26:18	Jacquie	Guys someone could explain me the course :)https://awwapp.com/b/u73rghecg/ 
2016-09-08 13:27:00	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-08 13:27:35	Jacquie	http://pastebin.com/Cp7n6xbb
2016-09-08 13:27:55	<--	two_wheels (~two_wheel@50-93-251-80.fttp.usinternet.com) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-08 13:28:24	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 265 seconds)
2016-09-08 13:29:59	-->	witquicked_ (~witquicke@104-10-252-166.lightspeed.sntcca.sbcglobal.net) has joined #scala
2016-09-08 13:30:22	-->	DrNo (~IRSSI@112.58.7.51.dyn.plus.net) has joined #scala
2016-09-08 13:30:26	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-08 13:30:57	<--	DrNo (~IRSSI@112.58.7.51.dyn.plus.net) has quit (Max SendQ exceeded)
2016-09-08 13:31:39	-->	DrNo (~IRSSI@112.58.7.51.dyn.plus.net) has joined #scala
2016-09-08 13:32:11	<--	DrNo (~IRSSI@112.58.7.51.dyn.plus.net) has quit (Max SendQ exceeded)
2016-09-08 13:32:25	witquicked_	I've been looking around for some examples of unit test harness for validating the custom generated code
2016-09-08 13:32:25	-->	eklavya_ (~eklavya@117.203.12.195) has joined #scala
2016-09-08 13:32:50	-->	uglyfigurine (~uglyfigur@131.228.197.10) has joined #scala
2016-09-08 13:32:52	witquicked_	anybody have any suggestions?
2016-09-08 13:33:14	-->	DrNo (~IRSSI@112.58.7.51.dyn.plus.net) has joined #scala
2016-09-08 13:33:30	bshelden	flippant response: You've already made mistakes.  Strict response: Just codegen the unit tests as well.
2016-09-08 13:33:39	<--	eklavya (~eklavya@117.203.7.40) has quit (Ping timeout: 276 seconds)
2016-09-08 13:33:48	<--	DrNo (~IRSSI@112.58.7.51.dyn.plus.net) has quit (Max SendQ exceeded)
2016-09-08 13:34:55	<--	arathald (arathald@linuxfromscratch/arathald) has quit (Ping timeout: 250 seconds)
2016-09-08 13:35:04	-->	marr (~ccc@xdsl-2856.bielsko.dialog.net.pl) has joined #scala
2016-09-08 13:36:16	<--	uglyfigurine (~uglyfigur@131.228.197.10) has quit (Remote host closed the connection)
2016-09-08 13:36:28	-->	uglyfigurine (~uglyfigur@131.228.197.10) has joined #scala
2016-09-08 13:36:36	<--	JD557 (~joao@163.172.150.39) has quit (Quit: WeeChat 1.5)
2016-09-08 13:38:40	<--	pfurla (~textual@65.206.95.146) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-08 13:40:44	-->	pfurla (~textual@65.206.95.146) has joined #scala
2016-09-08 13:40:50	-->	Sasazuka (~Sasazuka@unaffiliated/sasazuka) has joined #scala
2016-09-08 13:40:52	-->	amcelwee (amcelwee@foss.supporter.firrre.com) has joined #scala
2016-09-08 13:41:20	-->	hamid (~nithp@unaffiliated/hamid) has joined #scala
2016-09-08 13:42:22	-->	itruslove (itruslove@dev.null.firrre.com) has joined #scala
2016-09-08 13:43:59	-->	lcfrs (~lcfrs@173.247.202.130) has joined #scala
2016-09-08 13:44:24	-->	DrNo (~DrNo@112.58.7.51.dyn.plus.net) has joined #scala
2016-09-08 13:45:02	<--	pfurla (~textual@65.206.95.146) has quit (Client Quit)
2016-09-08 13:46:01	-->	skarn_ (skarn@gateway/shell/firrre/x-rjnsiildugwqjtae) has joined #scala
2016-09-08 13:46:40	witquicked_	bshelden, flippant response response: of course I have, that's why I need the unit tests. Strict response response: not sure I agree with codegen'ing unit tests, since that introduces non-deterministic testing. On the other hand, the problem I've always had with building tests for codegen'd output is that it's always so fragile.
2016-09-08 13:47:39	zeryx	I've got an incredibly painful problem right now with java exceptions/throwables not being caught
2016-09-08 13:47:58	zeryx	https://gist.github.com/zeryx/7bf2dc01f26410a9e37a6a1a14d3f139
2016-09-08 13:48:01	zeryx	this doesn't catch everything
2016-09-08 13:48:05	zeryx	I have no idea why not
2016-09-08 13:49:25	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-08 13:50:43	-->	Neo-- (~neo@BSN-77-82-252.static.siol.net) has joined #scala
2016-09-08 13:51:17	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-09-08 13:52:48	<--	Jacquie (1f0aaa52@gateway/web/freenode/ip.31.10.170.82) has quit (Quit: Page closed)
2016-09-08 13:53:01	-->	Rawriful (~Rawriful@host-2-99-77-180.as13285.net) has joined #scala
2016-09-08 13:53:40	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-08 13:53:48	<--	PSoBI (~latner@host66.minutemantransport.com) has quit (Ping timeout: 244 seconds)
2016-09-08 13:54:41	-->	forgottenone (~forgotten@195.142.41.221) has joined #scala
2016-09-08 13:54:47	-->	arathald (~arathald@linuxfromscratch/arathald) has joined #scala
2016-09-08 13:54:51	-->	xnavor (~xnavor@78-70-4-240-no171.business.telia.com) has joined #scala
2016-09-08 13:56:40	-->	PSoBI (~latner@host66.minutemantransport.com) has joined #scala
2016-09-08 13:57:33	-->	Agro (~Agro@108-79-22-150.lightspeed.hstntx.sbcglobal.net) has joined #scala
2016-09-08 13:59:06	SethTisue	Jacquie: what is your question about that paste?
2016-09-08 14:00:40	bshelden	witquicked_: Exactly.  You either codegen the tests or deal with fragility.  The fact that those are your choices is the proof that things are already insane.
2016-09-08 14:00:56	tpolecat	zeryx: are you sure it's doing what you think it's doing? that should catch everything
2016-09-08 14:01:10	<--	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 14:01:27	tpolecat	put printlns around the Some()
2016-09-08 14:01:28	zeryx	I'm now wrapping the whole main scope with a try block and seeinf I can catch something
2016-09-08 14:01:36	<--	eklavya_ (~eklavya@117.203.12.195) has quit (Remote host closed the connection)
2016-09-08 14:01:54	zeryx	if I can't catch anything then something else entirely is going on, and I haven't the faintest idea what it could be
2016-09-08 14:02:05	<--	lcfrs (~lcfrs@173.247.202.130) has quit (Remote host closed the connection)
2016-09-08 14:02:12	SethTisue	is the exception occurring on another thread?
2016-09-08 14:02:36	zeryx	it shouldn't be possible, but I have no idea at this point
2016-09-08 14:02:37	-->	sergeykisel (~sergeykis@sra83-4-78-204-4-73.fbx.proxad.net) has joined #scala
2016-09-08 14:02:39	-->	lcfrs (~lcfrs@173.247.202.130) has joined #scala
2016-09-08 14:02:55	zeryx	our whole infrastructure is broken because docker pushed a breaking change to the ubuntu repo which got accepted
2016-09-08 14:03:08	zeryx	so I'm trying to build a work-around that just ignores things that failed so we can get something
2016-09-08 14:03:16	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-08 14:03:22	zeryx	but it isn't ignoring them, which is nuts
2016-09-08 14:03:53	witquicked_	bshelden, HA. Yes, that. So given that I'm trying to build Guard Rails on an insanely twisty and dangerous road, I'm looking for some examples that I can steal fair and square...
2016-09-08 14:04:24	zeryx	SethTisue: how would I check if that's the case?
2016-09-08 14:04:50	bshelden	Sorry, I don't have an answer you want.  Only this: Use the current mess as evidence that there's a bug to be fixed, then fix it.
2016-09-08 14:05:07	-->	pdo400 (~pdo400@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has joined #scala
2016-09-08 14:05:34	zeryx	SethTisue, tpolecat: I updated the gist so it also contains the calling method https://gist.github.com/zeryx/7bf2dc01f26410a9e37a6a1a14d3f139
2016-09-08 14:05:52	-->	waqas (~Adium@216.174.114.140) has joined #scala
2016-09-08 14:06:33	<--	itruslove (itruslove@dev.null.firrre.com) has quit (Ping timeout: 250 seconds)
2016-09-08 14:06:48	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 276 seconds)
2016-09-08 14:06:59	<--	lcfrs (~lcfrs@173.247.202.130) has quit (Ping timeout: 250 seconds)
2016-09-08 14:06:59	<--	amcelwee (amcelwee@foss.supporter.firrre.com) has quit (Ping timeout: 250 seconds)
2016-09-08 14:07:23	-->	RSchulzB (~Adium@c-50-156-101-102.hsd1.ca.comcast.net) has joined #scala
2016-09-08 14:08:09	witquicked_	zeryx, is this related: http://stackoverflow.com/a/6230765/208939
2016-09-08 14:08:33	SethTisue	seems like it depends on how FutureAlgoResponse.get is implemented?
2016-09-08 14:08:40	witquicked_	since the exception is happening in the future, I assume
2016-09-08 14:08:51	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 264 seconds)
2016-09-08 14:09:03	SethTisue	It sure sounds like a thread issue
2016-09-08 14:09:24	-->	amcelwee (amcelwee@foss.supporter.firrre.com) has joined #scala
2016-09-08 14:09:24	-->	itruslove (itruslove@dev.null.firrre.com) has joined #scala
2016-09-08 14:09:49	witquicked_	oh, you are trapping the future - sorry, didn't catch that...
2016-09-08 14:12:02	zeryx	no worries, yeah it's a java future which is why I need to trap it
2016-09-08 14:12:20	zeryx	so literally anything that happens should be caught
2016-09-08 14:12:51	<--	tpolecat (~anonymous@199.167.24.131) has left #scala
2016-09-08 14:12:54	-->	tpolecat (~anonymous@199.167.24.131) has joined #scala
2016-09-08 14:12:57	tpolecat	oops
2016-09-08 14:14:44	zeryx	SethTisue: yeah that's what I'm thinking is going on
2016-09-08 14:14:59	zeryx	I don't think its broken in any recent release, but its possible
2016-09-08 14:15:13	-->	funrep (~funrep@edulth24.nat.wireless.lu.se) has joined #scala
2016-09-08 14:15:44	zeryx	but even if it's broken, what could possibly escape my try/catch trap?
2016-09-08 14:15:52	<--	Quick_Wango (~quickwang@cubyte.net) has quit (Quit: Bye! - http://cubeisland.de)
2016-09-08 14:16:32	-->	Quick_Wango (~quickwang@cubyte.net) has joined #scala
2016-09-08 14:16:42	witquicked_	zeryx, "what could possibly escape my try/catch trap?" 
2016-09-08 14:16:58	witquicked_	 as others have mentioned, exceptions on another thread
2016-09-08 14:17:05	<--	tpolecat (~anonymous@199.167.24.131) has quit (Remote host closed the connection)
2016-09-08 14:17:21	funrep	could someone help me get this to type check? https://gist.github.com/funrep/ec08a7c46e01d48936aa812f2d952f75#file-parser-scala-L30
2016-09-08 14:17:22	witquicked_	if FutureAlgoResponse.get itself uses Futures, that could be the problem
2016-09-08 14:17:35	zeryx	It uses promises
2016-09-08 14:17:38	zeryx	java promises
2016-09-08 14:17:48	zeryx	ideas/strategies on how to fix it?
2016-09-08 14:18:24	-->	tpolecat (~anonymous@199.167.24.131) has joined #scala
2016-09-08 14:18:48	tpolecat	Are you certain that it is escaping?
2016-09-08 14:19:23	zeryx	my println check is never being printed
2016-09-08 14:19:26	zeryx	and no stack trace is popping up
2016-09-08 14:19:36	tpolecat	when something impossible is happening it means you're not seeing what you think you're seeing
2016-09-08 14:19:50	zeryx	I agree
2016-09-08 14:19:52	tpolecat	did you put printlns in the try? are you sure it's being entered?
2016-09-08 14:19:57	zeryx	they are in the catch
2016-09-08 14:20:02	zeryx	I'll put them in the try too
2016-09-08 14:20:06	zeryx	good idea
2016-09-08 14:20:27	zeryx	the biggest problem is the exceptions being thrown are entirely random
2016-09-08 14:20:42	aupiff	I'm looking for a big example of a custom circe encoder. I have a case class that represents an api call and I want to create a json object that looks nothing like the case class' structure.
2016-09-08 14:21:21	<--	bocaneri (~bocaneri@about/linux/staff/sauvin) has quit (Remote host closed the connection)
2016-09-08 14:24:56	<--	tpolecat (~anonymous@199.167.24.131) has quit (Quit: tpolecat)
2016-09-08 14:25:07	SethTisue	zeryx: re how to fix, that depends entirely on how the library you are using works w/r/t threads and exceptions. I don't think we have the information we would need to offer you more specific advice than that
2016-09-08 14:25:20	zeryx	rgr, thanks seth
2016-09-08 14:25:35	<--	sdelmore (~textual@207-170-205-174.static.twtelecom.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 14:26:09	funrep	is there a way to check which type an expression has in intellij?
2016-09-08 14:26:51	Milyardo	control shift p
2016-09-08 14:26:59	Milyardo	at least on osx
2016-09-08 14:27:17	Milyardo	mapping wildly differ on platforms for reasons
2016-09-08 14:27:42	Milyardo	IIRC it's control = elsewhere
2016-09-08 14:28:02	-->	lcfrs (~lcfrs@173.247.202.130) has joined #scala
2016-09-08 14:29:48	-->	sdelmore (~textual@207-170-205-174.static.twtelecom.net) has joined #scala
2016-09-08 14:30:32	-->	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has joined #scala
2016-09-08 14:30:44	-->	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has joined #scala
2016-09-08 14:31:34	S11001001	mberndt_: try doing the match in a method that lifted the type member to a parameter
2016-09-08 14:32:02	S11001001	mberndt_: that is, it takes [P], a refined RT, and a P
2016-09-08 14:32:51	-->	mszczygiel (~m.szczygi@dynamic-78-10-106-188.ssp.dialog.net.pl) has joined #scala
2016-09-08 14:33:57	-->	Powersource (~Powersour@c-89-160-37-16.cust.bredband2.com) has joined #scala
2016-09-08 14:34:28	felher	Is using ClassTags a bad idea? I'm asking, because I have a NonEmptyList[Fact], where Fact is a sealed trait with subclasses like TextFact, NumberFact, DateFact, and I want to turn it into NonEmptyList[NumberFact], NonEmptyList[TextFact] and so on depending on the head of the list.
2016-09-08 14:34:30	felher	If they are not all of the same subtype, I will emit an error.
2016-09-08 14:34:32	felher	There is a solution not using ClassTags, but the one with class tags is much nicer and I can't see something obviously wrong with it.
2016-09-08 14:34:34	felher	Here is an example of both implementations: http://scastie.org/22245
2016-09-08 14:35:21	funrep	Milyardo: thanks!
2016-09-08 14:36:27	-->	allengeorge (~textual@208.185.185.131) has joined #scala
2016-09-08 14:38:45	<--	ghounds (~gabriel@69.74.59.115) has quit (Ping timeout: 244 seconds)
2016-09-08 14:40:36	<--	funrep (~funrep@edulth24.nat.wireless.lu.se) has quit (Ping timeout: 276 seconds)
2016-09-08 14:41:15	<--	mberndt_ (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has quit (Ping timeout: 276 seconds)
2016-09-08 14:44:21	<--	sdelmore (~textual@207-170-205-174.static.twtelecom.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 14:47:01	<--	Sasazuka (~Sasazuka@unaffiliated/sasazuka) has quit (Ping timeout: 252 seconds)
2016-09-08 14:47:39	-->	Sasazuka (~Sasazuka@unaffiliated/sasazuka) has joined #scala
2016-09-08 14:48:35	<--	forgottenone (~forgotten@195.142.41.221) has quit (Quit: Konversation terminated!)
2016-09-08 14:49:38	<--	xnavor (~xnavor@78-70-4-240-no171.business.telia.com) has quit (Quit: This computer has gone to sleep)
2016-09-08 14:50:21	-->	xnavor (~xnavor@78-70-4-240-no171.business.telia.com) has joined #scala
2016-09-08 14:51:45	-->	sdelmore (~textual@207-170-205-174.static.twtelecom.net) has joined #scala
2016-09-08 14:52:53	-->	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has joined #scala
2016-09-08 14:52:55	--	anosh_ is now known as anosh
2016-09-08 14:55:58	-->	ghounds (~gabriel@69.74.59.115) has joined #scala
2016-09-08 14:57:40	<--	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has quit (Ping timeout: 250 seconds)
2016-09-08 14:58:58	<--	sdelmore (~textual@207-170-205-174.static.twtelecom.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 15:02:19	-->	mberndt_ (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has joined #scala
2016-09-08 15:03:54	<--	akovari (~akovari@ip-88-212-32-49.antik.sk) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 15:05:24	<--	markus1199 (~markus118@p4FDC1F3D.dip0.t-ipconnect.de) has quit (Ping timeout: 250 seconds)
2016-09-08 15:06:01	-->	markus1189 (~markus118@p4FDC1F3D.dip0.t-ipconnect.de) has joined #scala
2016-09-08 15:06:41	-->	Ven_ (~textual@133.249.29.93.rev.sfr.net) has joined #scala
2016-09-08 15:06:47	mberndt_	S11001001: I'm sorry, I don't understand. Could you show me some example code? 
2016-09-08 15:07:04	-->	Arrgh (~alex@70.36.63.98) has joined #scala
2016-09-08 15:08:36	-->	sdelmore (~textual@207-170-205-174.static.twtelecom.net) has joined #scala
2016-09-08 15:11:31	<--	johs (~johs@shell01.copyleft.no) has quit (Remote host closed the connection)
2016-09-08 15:14:56	<--	uglyfigurine (~uglyfigur@131.228.197.10) has quit (Remote host closed the connection)
2016-09-08 15:17:09	-->	uglyfigurine (~uglyfigur@131.228.197.10) has joined #scala
2016-09-08 15:17:30	<--	DrNo (~DrNo@112.58.7.51.dyn.plus.net) has quit (Ping timeout: 244 seconds)
2016-09-08 15:18:14	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2016-09-08 15:19:09	<--	OOPMan (~OOPMan@154.66.249.84) has quit (Quit: Konversation terminated!)
2016-09-08 15:19:43	<--	ghounds (~gabriel@69.74.59.115) has quit (Ping timeout: 250 seconds)
2016-09-08 15:19:55	S11001001	mberndt_: you are operating on the two elements of the sigma, right?
2016-09-08 15:20:32	S11001001	mberndt_: what would it look like if you wrote a method that took those two values as arguments?
2016-09-08 15:21:07	-->	Wertax (~wertax@wolfkamp.xs4all.nl) has joined #scala
2016-09-08 15:22:13	-->	DrNo (~DrNo@112.58.7.51.dyn.plus.net) has joined #scala
2016-09-08 15:22:30	<--	DrNo (~DrNo@112.58.7.51.dyn.plus.net) has quit (Max SendQ exceeded)
2016-09-08 15:22:40		[Kod away: "test"]
2016-09-08 15:22:46		[Kod back: gone 00:00:06]
2016-09-08 15:22:47	-->	shinnya (~shinnya@245.144.137.133.dy.bbexcite.jp) has joined #scala
2016-09-08 15:23:03	-->	ghounds (~gabriel@69.74.59.115) has joined #scala
2016-09-08 15:23:16	-->	DrNo (~DrNo@112.58.7.51.dyn.plus.net) has joined #scala
2016-09-08 15:23:39	<--	DrNo (~DrNo@112.58.7.51.dyn.plus.net) has quit (Max SendQ exceeded)
2016-09-08 15:24:56	-->	DrNo (~DrNo@112.58.7.51.dyn.plus.net) has joined #scala
2016-09-08 15:24:58	mberndt_	def f(rt: RT)(p: rt.P) = …
2016-09-08 15:25:08	--	mberndt_ is now known as mberndt
2016-09-08 15:26:12	mberndt	and I'd call it as f(r.rt)(r.p)
2016-09-08 15:28:15	mberndt	but how does that help me? 
2016-09-08 15:30:26	mberndt	S11001001: ping
2016-09-08 15:31:14	-->	tpolecat (~anonymous@209.226.201.240) has joined #scala
2016-09-08 15:31:25	S11001001	mberndt: now write it without currying
2016-09-08 15:32:10	mberndt	def f[X](rt: RT{type P = X}, p: X) I guess…
2016-09-08 15:33:28	<--	PSoBI (~latner@host66.minutemantransport.com) has quit (Ping timeout: 255 seconds)
2016-09-08 15:35:46	<--	pdo400 (~pdo400@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-08 15:36:33	-->	AnarchyAo (~andrew@8.18.217.202) has joined #scala
2016-09-08 15:36:45	--	irc: disconnected from server
2016-09-08 16:12:36	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-08 16:12:36	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-08 16:12:36	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-08 16:12:36	--	Channel #scala: 435 nicks (0 ops, 0 voices, 435 normals)
2016-09-08 16:12:36	***	Buffer Playback...
2016-09-08 16:12:36	felher	[14:34:32] There is a solution not using ClassTags, but the one with class tags is much nicer and I can't see something obviously wrong with it.
2016-09-08 16:12:36	felher	[14:34:34] Here is an example of both implementations: http://scastie.org/22245
2016-09-08 16:12:36	funrep	[14:35:21] Milyardo: thanks!
2016-09-08 16:12:36	mberndt_	[15:06:47] S11001001: I'm sorry, I don't understand. Could you show me some example code? 
2016-09-08 16:12:36	S11001001	[15:19:55] mberndt_: you are operating on the two elements of the sigma, right?
2016-09-08 16:12:36	S11001001	[15:20:32] mberndt_: what would it look like if you wrote a method that took those two values as arguments?
2016-09-08 16:12:36	mberndt_	[15:24:58] def f(rt: RT)(p: rt.P) = …
2016-09-08 16:12:36	mberndt	[15:26:12] and I'd call it as f(r.rt)(r.p)
2016-09-08 16:12:36	mberndt	[15:28:15] but how does that help me? 
2016-09-08 16:12:36	mberndt	[15:30:26] S11001001: ping
2016-09-08 16:12:36	S11001001	[15:31:25] mberndt: now write it without currying
2016-09-08 16:12:36	mberndt	[15:32:10] def f[X](rt: RT{type P = X}, p: X) I guess…
2016-09-08 16:12:36	mberndt	[15:39:54] S11001001: now what?
2016-09-08 16:12:36	S11001001	[15:44:06] mberndt: this is the ideal situation for gadt stuff
2016-09-08 16:12:36	S11001001	[15:45:40] mberndt: if you can't write the match here (with explicit Option[Int] return type) you have to use a tparam for RT, adding a type member to your sigma to mediate the two values
2016-09-08 16:12:36	mberndt	[15:49:23]   def f[X](rt: RT { type P = X }, p: X): Option[Int] =
2016-09-08 16:12:36	mberndt	[15:49:25]     rt match { case RT1 => Some(p) }
2016-09-08 16:12:36	mberndt	[15:49:56] Is that what you meant? That also doesn't compile…
2016-09-08 16:12:36	mberndt	[15:52:09] anyway, it doesn't really matter, the only reason I need to do that is that somebody wrote a test I need to keep running
2016-09-08 16:12:36	dylukes	[15:58:54] Hello all, quick question: for a simple desktop daemon/control panel type app with significant file storage usage
2016-09-08 16:12:36	dylukes	[15:59:02] what's a good option for storing structured information?
2016-09-08 16:12:36	dylukes	[15:59:14] I was just going to use SQLite directly, but any lightweight recommendations are appreciated.
2016-09-08 16:12:36	dylukes	[15:59:17] JPA is overkill.
2016-09-08 16:12:36	dylukes	[15:59:33] ScalaQuery would work pretty well.
2016-09-08 16:12:36	tpolecat	[16:03:06] Slick, Quill, Doobie, ScalikeJDBC, Anorm … lots of options
2016-09-08 16:12:36	tpolecat	[16:03:36] https://index.scala-lang.org/search?q=keywords%3Asql&page=1&sort=stars
2016-09-08 16:12:36	dylukes	[16:06:40] Thanks tpolecat 
2016-09-08 16:12:36	dylukes	[16:06:56] Slick doesn't seem to exist compiled against 2.11 sadly.
2016-09-08 16:12:36	[poe]jdk1	[16:07:34] has anyone used Scala with QuickBase as the backing data source?
2016-09-08 16:12:36	tpolecat	[16:07:56] dylukes: it is for sure, keep looking
2016-09-08 16:12:36	dylukes	[16:08:22] Er, ScalaQuery does not.
2016-09-08 16:12:36	dylukes	[16:08:23] Slick does.
2016-09-08 16:12:36	tpolecat	[16:10:04] I think Silck is what ScalaQuery turned into
2016-09-08 16:12:36	dylukes	[16:10:18] tpolecat Thats the feeling I got.
2016-09-08 16:12:36	tpolecat	[16:10:24] If that's too heavy try one of the others. Slick is the 900lb gorilla.
2016-09-08 16:12:36	dylukes	[16:10:28] Quill seems interesting too.
2016-09-08 16:12:36	dylukes	[16:10:32] And much lighter than Slick.
2016-09-08 16:12:36	tpolecat	[16:10:59] Yeah. It's kind of magical but no moreso than slick I guess. Different magic.
2016-09-08 16:12:36	tpolecat	[16:11:09] I work on doobie, which is a good fit if you're doing pure FP.
2016-09-08 16:12:36	dylukes	[16:11:14] Yeah, the magic doesn't seem to alarming.
2016-09-08 16:12:36	dylukes	[16:11:16] Yeah, I looked at Doobie.
2016-09-08 16:12:36	dylukes	[16:11:21] Filed it away under "for personal project fun".
2016-09-08 16:12:36	tpolecat	[16:11:24] :-)
2016-09-08 16:12:36	dylukes	[16:11:35] I can't go full functional on this project. Using Scala as it is a luxury.
2016-09-08 16:12:36	dylukes	[16:11:41] So, cake patterning it is.
2016-09-08 16:12:36	tpolecat	[16:11:55] Scala is unusual in that there are actualy a lot of good options for database access, with different design tradeoffs.
2016-09-08 16:12:36	dylukes	[16:12:02] Yeah, they're very distinct.
2016-09-08 16:12:36	dylukes	[16:12:14] It seems like JPA was conveniently left on the roadside.
2016-09-08 16:12:36	dylukes	[16:12:25] It doesn't seem like Scala really *needs* the baggage it adds. 
2016-09-08 16:12:36	tpolecat	[16:12:35] The snese of the community seems to be that ORM is a failed experiment.
2016-09-08 16:12:36	***	Playback Complete.
2016-09-08 16:12:37	tpolecat	sense
2016-09-08 16:12:44	dylukes	I can agree with that.
2016-09-08 16:12:50	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-08 16:12:54	dylukes	I usually prefer data mappers or relational algebra based solutions.
2016-09-08 16:12:56	Milyardo	You could argue JPA is being left on the roadside in the java community as well
2016-09-08 16:13:00	dylukes	Doobies take looked interesting too.
2016-09-08 16:13:08	dylukes	Milyardo You could argue the java community is being left on the roadside too...
2016-09-08 16:13:14	dylukes	dekstop java*
2016-09-08 16:13:27	Milyardo	I wouldn't
2016-09-08 16:13:34	tpolecat	Milyardo: yeah? I haven't looked at Java DB stuff in a long time. My favorite was always iBatis because it was so goddamn simple.
2016-09-08 16:13:54	dylukes	I wonder what the dominant post-ORM framework will turn out to be.
2016-09-08 16:14:15	tpolecat	Well. I think frameworks are on their way out too ;-)
2016-09-08 16:14:26	dylukes	er, design pattern
2016-09-08 16:14:32	dylukes	And in what respect?
2016-09-08 16:14:48	dylukes	I'd expect just more smaller libraries and less large constellation frameworks. 
2016-09-08 16:15:03	dylukes	More Flask, less Django.
2016-09-08 16:15:04	-->	pdo400 (~pdo400@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has joined #scala
2016-09-08 16:15:06	tpolecat	Right, libs vs frameworks.
2016-09-08 16:15:15	Milyardo	tpolecat: From what I can tell, JPA is the 100000 lb gorillla, and probably will be for some time, but jOOq appears to be getting popular really fast
2016-09-08 16:15:28	dylukes	JPA = Harambe
2016-09-08 16:15:30	tpolecat	interesing
2016-09-08 16:16:07	-->	doMynation (~domynatio@modemcable070.227-131-66.mc.videotron.ca) has joined #scala
2016-09-08 16:16:12	Milyardo	it may be just because JPA has been stuck at 1.2 for eternity and attempts to shoehorn nosql stuff into it have failed miserably
2016-09-08 16:16:13	tpolecat	Anyway I think especially in Scala there will always be a ton of tradeoffs and people on all sides, so I expect to see at least 2 versions of everything forever.
2016-09-08 16:16:38	Milyardo	and people are looking at things like jOOq as an alternative for working with non-relational stuff
2016-09-08 16:16:44	-->	tpayne (~tpayne@2605:e000:4ed7:3800:8041:aaf9:2365:6011) has joined #scala
2016-09-08 16:16:45	dylukes	I think for now I'll write all of this using the cake pattern... I can always rewrite it into Reader monads later.
2016-09-08 16:17:02	tpayne	Does anyone here use assembly?
2016-09-08 16:17:17	dylukes	tpolecat more libraries and less frameworks makes sense. I see a general trend in computing towards heterogeneity.
2016-09-08 16:17:30	tpayne	I'm trying to figure out how to add assemblyMergeStrategy to my Build.scala
2016-09-08 16:17:32	dylukes	Heterogenous computing, heterogenous data/control models, etc.
2016-09-08 16:18:10	tpolecat	dylukes: it bounces back and forth .. one big thing vs a bunch of little things
2016-09-08 16:19:44	tpayne	all the examples are for build.sbt files
2016-09-08 16:22:56	dylukes	tpolecat yeah true
2016-09-08 16:24:18	pdo400	Is there a way to supply an implicit iff some other implicit doesn't exist?
2016-09-08 16:24:35	<--	Wertax (~wertax@wolfkamp.xs4all.nl) has quit (Remote host closed the connection)
2016-09-08 16:25:02	-->	Wertax (~wertax@wolfkamp.xs4all.nl) has joined #scala
2016-09-08 16:25:16	tpayne	hmm found a sample online, after coming here and externalizing heh
2016-09-08 16:25:33	<--	tpayne (~tpayne@2605:e000:4ed7:3800:8041:aaf9:2365:6011) has quit (Quit: [BX] Did somebody say BitchX?)
2016-09-08 16:26:10	<--	Velizar (~DEA7TH@unaffiliated/dea7th) has quit (Quit: Velizar)
2016-09-08 16:27:38	Milyardo	pdo400: Your question is vague, but why not just apply the value you have explicitly
2016-09-08 16:28:13	tpolecat	pdo400: you can make the fallback implict lower priority, if that's what you're asking
2016-09-08 16:28:42	-->	replay (~replay@pdpc/supporter/student/replay) has joined #scala
2016-09-08 16:28:43	pdo400	Milyardo, tpolecat: I don't control the implict that would act as the existence filter
2016-09-08 16:29:19	<--	Wertax (~wertax@wolfkamp.xs4all.nl) has quit (Ping timeout: 244 seconds)
2016-09-08 16:29:19	Milyardo	I'm not sure if I understand what you mean
2016-09-08 16:29:44	<--	squeaky-clean_ (~squeaky-c@162.213.148.250) has quit (Quit: Leaving)
2016-09-08 16:30:33	pdo400	I tried doing something like implicit def supply [A]: (implicit NoImplicitInScope [Foo [A]]): Bar [A] but this doesn't seem to work (due to ambiguity?)
2016-09-08 16:32:05	-->	sdelmore (~textual@207-170-205-174.static.twtelecom.net) has joined #scala
2016-09-08 16:32:14	pdo400	Very specifically, (and I have already found a workaround for this specific case, but would like to have a general solution), I want to supply an Ordering for types I know stuff about, but there are implicit orderings in predef that may exist in some cases
2016-09-08 16:33:35	<--	mszczygiel (~m.szczygi@dynamic-78-10-106-188.ssp.dialog.net.pl) has quit (Quit: Lost terminal)
2016-09-08 16:35:03	<--	Arrgh (~alex@70.36.63.98) has quit (Read error: Connection reset by peer)
2016-09-08 16:36:13	-->	the_f0ster (~f0ster@174-25-101-121.ptld.qwest.net) has joined #scala
2016-09-08 16:36:49	-->	uglyfigurine (~uglyfigur@131.228.197.10) has joined #scala
2016-09-08 16:37:55	tpolecat	You can compile with -Yno-predef ... I'm not sure there's another way to get around those implicits because they're in lexical scope. Could be wrong, I don't fight with this stuff very much.
2016-09-08 16:39:22	pdo400	Alright, well I can stick with the workaround for now :)
2016-09-08 16:43:10	-->	PSoBI (~latner@host66.minutemantransport.com) has joined #scala
2016-09-08 16:44:05	<--	allengeorge (~textual@208.185.185.131) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 16:53:32	-->	allengeorge (~textual@208.185.185.131) has joined #scala
2016-09-08 16:55:15	-->	nafg (~naftoli@96.57.169.90) has joined #scala
2016-09-08 17:00:36	<--	Neo-- (~neo@BSN-77-82-252.static.siol.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-08 17:06:00	<--	pdo400 (~pdo400@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has quit (Ping timeout: 244 seconds)
2016-09-08 17:06:10	<--	ghounds (~gabriel@69.74.59.115) has quit (Ping timeout: 244 seconds)
2016-09-08 17:07:32	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2016-09-08 17:09:11	-->	sdelmore_ (~textual@ec2-54-88-46-211.compute-1.amazonaws.com) has joined #scala
2016-09-08 17:11:15	<--	sdelmore (~textual@207-170-205-174.static.twtelecom.net) has quit (Ping timeout: 264 seconds)
2016-09-08 17:15:00	<--	Chris_Stewart_5 (~Chris_Ste@unaffiliated/chris-stewart-5/x-3612383) has quit (Ping timeout: 265 seconds)
2016-09-08 17:16:06	-->	Jacoby6000 (~jacob.bar@host-64-47-96-210.masergy.com) has joined #scala
2016-09-08 17:20:15	<--	uglyfigurine (~uglyfigur@131.228.197.10) has quit (Remote host closed the connection)
2016-09-08 17:20:58	-->	pdo400 (~pdo400@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has joined #scala
2016-09-08 17:21:03	<--	sepp2k (~sepp2k@pD9520A6D.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
2016-09-08 17:21:23	-->	cotalinux (~cota@86.124.188.234) has joined #scala
2016-09-08 17:23:16	<--	darkfrog (~mhicks@ip68-97-10-164.ok.ok.cox.net) has quit (Remote host closed the connection)
2016-09-08 17:23:16	-->	uglyfigurine (~uglyfigur@131.228.197.10) has joined #scala
2016-09-08 17:28:50	egp	ist there a scalajs irc channel?
2016-09-08 17:29:03	nullremains	gitter
2016-09-08 17:32:20	-->	pfurla (~textual@65.206.95.146) has joined #scala
2016-09-08 17:32:55	<--	Powersource (~Powersour@c-89-160-37-16.cust.bredband2.com) has quit (Quit: Leaving)
2016-09-08 17:33:41	<--	tpolecat (~anonymous@209.226.201.240) has quit (Quit: tpolecat)
2016-09-08 17:39:36	uglyfigurine	I cant figure out what changed to cause my imports to become relative instead of absolute and now i have to add _root_ to all my imports. How do i fix this?
2016-09-08 17:40:15	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 244 seconds)
2016-09-08 17:40:30	nullremains	uglyfigurine: what's your package structure?
2016-09-08 17:40:59	<--	Ven_ (~textual@133.249.29.93.rev.sfr.net) has quit (Quit: My MacBook has gone to sleep. ZZZzzz…)
2016-09-08 17:41:00	nullremains	something else in import scope has the same path
2016-09-08 17:42:05	-->	Hoffman|2 (~Hoffman@unaffiliated/hoffman) has joined #scala
2016-09-08 17:43:12	<--	Hoffman (~Hoffman@unaffiliated/hoffman) has quit (Ping timeout: 244 seconds)
2016-09-08 17:43:31	<--	[poe]jdk1 (~jkendall@24-223-105-130.static.cablene.com) has quit (Read error: Connection reset by peer)
2016-09-08 17:44:02	Milyardo	did you import a object named scala, java, or com
2016-09-08 17:44:22	Milyardo	I've seen that wreck havoc on peoples sanity before
2016-09-08 17:44:40	uglyfigurine	my package is com.example and the import is of com.fasterxml.jackson
2016-09-08 17:44:43	Milyardo	they think it's a good idea to define something like com.mycompany.utils.scala
2016-09-08 17:45:12	<--	PSoBI (~latner@host66.minutemantransport.com) has quit (Ping timeout: 240 seconds)
2016-09-08 17:45:20	uglyfigurine	so i get an error saying it cant find fasterxml in com.example.com.fasterxml
2016-09-08 17:45:53	Milyardo	you sure you don't have an object or package named com then?
2016-09-08 17:46:09	uglyfigurine	well this file is defined in package com.example
2016-09-08 17:49:00	<--	uglyfigurine (~uglyfigur@131.228.197.10) has quit (Remote host closed the connection)
2016-09-08 17:51:21	<--	griffindy (~textual@192.133.79.17) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 17:51:42	<--	tag (~tag@fw03.sfoffice.quantcast.com) has quit (Ping timeout: 276 seconds)
2016-09-08 17:51:59	-->	PSoBI (~latner@host66.minutemantransport.com) has joined #scala
2016-09-08 17:52:32	<--	jaana (jaana@nat/yahoo/x-yyqpfgpvdemypyti) has quit (Quit: jaana)
2016-09-08 17:53:24	--	Hoffman|2 is now known as Hoffman
2016-09-08 17:55:37	-->	sdelmore (~textual@207-170-205-174.static.twtelecom.net) has joined #scala
2016-09-08 17:58:18	<--	sdelmore_ (~textual@ec2-54-88-46-211.compute-1.amazonaws.com) has quit (Ping timeout: 250 seconds)
2016-09-08 17:59:10	-->	jfg9 (~josh@host-78-146-238-125.as13285.net) has joined #scala
2016-09-08 17:59:23	<--	Ir1sh (~Ir1sh@12.228.115.34) has quit (Remote host closed the connection)
2016-09-08 17:59:56	egp	For scalajs was there any more "typesafe" way to have a chang event on an input field where the eventTarget would be more strongly typed as Input or do you have to throw around hte asInstanceOf's like https://gist.github.com/er1c/8a227507464520817a4fbf8b3b25b708
2016-09-08 18:00:21	dylukes	So, does quill just not concern itself with primary key constraints or table creation?
2016-09-08 18:00:22	-->	Ir1sh (~Ir1sh@12.228.115.34) has joined #scala
2016-09-08 18:00:31	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 265 seconds)
2016-09-08 18:00:35	dylukes	If so, what's a good way to initialize the necessary tables?
2016-09-08 18:00:44	-->	haste-chris (~haste-chr@8.41.67.145) has joined #scala
2016-09-08 18:00:49	dylukes	(for a SQLite store used by an installed desktop program)
2016-09-08 18:00:52	nullremains	dylukes: define case classes, quill handles the rest
2016-09-08 18:01:07	dylukes	Cool.
2016-09-08 18:01:24	nullremains	it's a different approach than, for example, Slick with the explicit table mappings
2016-09-08 18:01:24	<--	zephyz__ (~zephyz@83.77.112.235) has quit (Ping timeout: 250 seconds)
2016-09-08 18:01:28	dylukes	It just doesn't seem like there's a good way to ensure primary keys are unique.
2016-09-08 18:01:42	<--	adolf_stalin (~adolf_sta@205.157.178.143) has quit (Quit: Leaving...)
2016-09-08 18:02:17	nullremains	quill let's you do that as well, but out of the box it maps case classes to the underlying tables
2016-09-08 18:02:48	dylukes	I understand that.
2016-09-08 18:03:00	dylukes	I'm wondering how I can make sure a username or id field is actually unique.
2016-09-08 18:03:12	nullremains	dylukes: there's a `returning` keyword that ignores PK on insert/update
2016-09-08 18:03:42	dylukes	Does that necessarily mean it's unique though?
2016-09-08 18:04:04	nullremains	dylukes: well, you're relying on underlying database to handle that
2016-09-08 18:04:38	dylukes	I was just told Quill would "handle the rest" and create the tables though.
2016-09-08 18:05:03	<--	Ir1sh (~Ir1sh@12.228.115.34) has quit (Ping timeout: 244 seconds)
2016-09-08 18:05:06	nullremains	the "rest" is what you would expect given a case class
2016-09-08 18:05:18	nullremains	i.e. a mapping based on case class props
2016-09-08 18:05:31	dylukes	So then I have to make sure I initialize my database on my own terms.
2016-09-08 18:06:37	dylukes	For example,
2016-09-08 18:06:42	dylukes	would "u <- users if u.username == lift(username)" really be enough?
2016-09-08 18:06:44	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-08 18:06:49	nullremains	afaik, yes, but check the docs, there's a section on explicit mappings (not sure if you can define key constraints though)
2016-09-08 18:07:04	dylukes	The explicit mapping section is for matching names.
2016-09-08 18:07:18	dylukes	I don't think quill does any generation honestly.
2016-09-08 18:07:34	nullremains	right, so they haven't gotten around to constraints, think that's on road map post 1.0
2016-09-08 18:08:09	-->	sergiotudela (~sergiotud@bl8-77-196.dsl.telepac.pt) has joined #scala
2016-09-08 18:08:20	nullremains	dylukes: I saw a slick-like code gen tool for quill popup on github the other day, sec
2016-09-08 18:09:31	nullremains	dylukes: check here https://github.com/olafurpg/scala-db-codegen
2016-09-08 18:10:18	-->	zephyz_ (~zephyz@235.112.77.83.dynamic.wline.res.cust.swisscom.ch) has joined #scala
2016-09-08 18:10:30	dylukes	neat-o 
2016-09-08 18:10:40	dylukes	well, I'll just write up my schema and do that manually
2016-09-08 18:10:41	-->	sanddune (~sanddune@46.166.190.201) has joined #scala
2016-09-08 18:10:42	dylukes	it's not very large
2016-09-08 18:10:46	dylukes	and I'd rather not involve more codegen.
2016-09-08 18:11:51	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 276 seconds)
2016-09-08 18:11:58	<--	sanddune_ (~sanddune@46.166.190.201) has quit (Read error: Connection reset by peer)
2016-09-08 18:12:24	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-08 18:13:21	-->	Arrgh (~alex@70.36.63.98) has joined #scala
2016-09-08 18:15:18	dylukes	Interesting typing approach.
2016-09-08 18:15:21	dylukes	The "type all the things" stuff.
2016-09-08 18:15:29	dylukes	newtype all the things!
2016-09-08 18:15:32	-->	jaana (~jaana@c-71-198-4-58.hsd1.ca.comcast.net) has joined #scala
2016-09-08 18:15:45	nullremains	egp: given your example, don't think so, asInstanceOf casts are a frequent occurrance in js land
2016-09-08 18:16:18	egp	nullremains: kk, still getting our feet wet, don't want to overlook something obviuos
2016-09-08 18:19:58	<--	sergiotudela (~sergiotud@bl8-77-196.dsl.telepac.pt) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-08 18:20:39	nullremains	dylukes: I actually don't get why the author value types the Ids, only to turn around and create persistence methods that take primitive types, wth?
2016-09-08 18:21:57	nullremains	I mean the examples work but I prefer passing around typed Ids everywhere in place of the primitives
2016-09-08 18:22:05	dylukes	I just realized.
2016-09-08 18:22:14	dylukes	I can't find the bit in quill where you actually get the values out properly :\.
2016-09-08 18:22:42	nullremains	checked out `WrappedValue`
2016-09-08 18:24:52	dylukes	What about it?
2016-09-08 18:25:14	dylukes	I'm using it. Doesn't help with actually getting rows.
2016-09-08 18:25:20	dylukes	The returned value is some sort of proxy/mirror.
2016-09-08 18:25:24	nullremains	allows you to work with typed Ids
2016-09-08 18:25:33	<--	PSoBI (~latner@host66.minutemantransport.com) has quit (Ping timeout: 240 seconds)
2016-09-08 18:26:08	dylukes	Oh hm.
2016-09-08 18:26:14	dylukes	I know that.
2016-09-08 18:26:17	dylukes	It's because I was using the QueryMirror.
2016-09-08 18:26:24	dylukes	Which doesn't provide actual values.
2016-09-08 18:27:18	-->	adolf_stalin (~adolf_sta@2600:8804:6000:283:20ef:3680:cb8c:b20f) has joined #scala
2016-09-08 18:28:15	nullremains	because you haven't yet invoked the query via `run`, correct?
2016-09-08 18:28:37	dylukes	No...
2016-09-08 18:28:41	dylukes	I already figured it out.
2016-09-08 18:29:03	dylukes	I'd like to be able to invoke run in such a way I specify a single return value. There seems to be a runQuerySingle.
2016-09-08 18:29:28	dylukes	There's a "handleSingleResult"
2016-09-08 18:30:26	<--	sandwich__ (d80f7c11@gateway/web/freenode/ip.216.15.124.17) has quit (Ping timeout: 264 seconds)
2016-09-08 18:31:24	nullremains	oh, not sure if this still exists but slick had `firstOption` and `list` for the single/multi result cases
2016-09-08 18:31:55	nullremains	that's kind of a mouthful, `handleSingleResult`
2016-09-08 18:32:38	-->	PSoBI (~latner@host66.minutemantransport.com) has joined #scala
2016-09-08 18:35:05	-->	uglyfigurine (~uglyfigur@131.228.197.10) has joined #scala
2016-09-08 18:35:16	<--	Jacoby6000 (~jacob.bar@host-64-47-96-210.masergy.com) has quit (Ping timeout: 255 seconds)
2016-09-08 18:35:34	-->	tpolecat (~anonymous@209.226.201.246) has joined #scala
2016-09-08 18:36:12	<--	mberndt (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has quit (Ping timeout: 265 seconds)
2016-09-08 18:36:26	-->	zmack (~zmack@82.77.166.15) has joined #scala
2016-09-08 18:36:28	<--	uglyfigurine (~uglyfigur@131.228.197.10) has quit (Remote host closed the connection)
2016-09-08 18:37:10	<--	zmack (~zmack@82.77.166.15) has quit (Remote host closed the connection)
2016-09-08 18:37:29	<--	firstdayonthejob (~firstdayo@cpc99346-croy26-2-0-cust153.19-2.cable.virginm.net) has quit (Ping timeout: 260 seconds)
2016-09-08 18:38:16	-->	Jacoby6000 (~jacob.bar@host-64-47-96-210.masergy.com) has joined #scala
2016-09-08 18:38:39	<--	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 18:39:14	<--	cotalinux (~cota@86.124.188.234) has quit (Read error: Connection reset by peer)
2016-09-08 18:39:16	-->	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has joined #scala
2016-09-08 18:40:13	<--	PSoBI (~latner@host66.minutemantransport.com) has quit (Ping timeout: 252 seconds)
2016-09-08 18:41:16	-->	mberndt (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has joined #scala
2016-09-08 18:42:00	<--	witquicked_ (~witquicke@104-10-252-166.lightspeed.sntcca.sbcglobal.net) has quit (Ping timeout: 265 seconds)
2016-09-08 18:42:46	<--	vili_ (~nick@2605:a000:ffc0:d8:5c8e:e37d:ec73:4299) has quit (Remote host closed the connection)
2016-09-08 18:42:58	<--	Jacoby6000 (~jacob.bar@host-64-47-96-210.masergy.com) has quit (Ping timeout: 252 seconds)
2016-09-08 18:44:19	<--	mberndt (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has quit (Client Quit)
2016-09-08 18:45:00	<--	allengeorge (~textual@208.185.185.131) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 18:46:21	<--	omefire (~omefire@24.18.128.19) has quit (Remote host closed the connection)
2016-09-08 18:48:26	-->	PSoBI (~latner@host66.minutemantransport.com) has joined #scala
2016-09-08 18:49:22	-->	patchwor_ (~patchwork@137.53.241.254) has joined #scala
2016-09-08 18:49:22	<--	patchwork (~patchwork@137.53.241.254) has quit (Read error: Connection reset by peer)
2016-09-08 18:50:15	<--	Arrgh (~alex@70.36.63.98) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 18:51:43	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-08 18:53:47	<--	adelbertc (uid26183@gateway/web/irccloud.com/x-qklrhhptlrfabxdr) has quit (Quit: Connection closed for inactivity)
2016-09-08 18:59:41	-->	mkoskar_ (~mkoskar@unaffiliated/mkoskar) has joined #scala
2016-09-08 19:00:30	<--	mkoskar (~mkoskar@unaffiliated/mkoskar) has quit (Remote host closed the connection)
2016-09-08 19:01:10	<--	apotry (~textual@cpc105238-live33-2-0-cust628.17-2.cable.virginm.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 19:01:42	-->	xpen (~xpen@114.111.166.229) has joined #scala
2016-09-08 19:02:59	-->	toidiu (~toidiu@dyn-160-39-7-154.dyn.columbia.edu) has joined #scala
2016-09-08 19:04:39	--	mkoskar_ is now known as mkoskar
2016-09-08 19:05:30	-->	omefire (~omefire@24.18.128.19) has joined #scala
2016-09-08 19:05:54	<--	dhinojosa (~danno@174-28-62-107.albq.qwest.net) has quit (Ping timeout: 250 seconds)
2016-09-08 19:07:06	<--	Hoffman (~Hoffman@unaffiliated/hoffman) has quit (Ping timeout: 276 seconds)
2016-09-08 19:07:26	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-08 19:07:34	<--	marr (~ccc@xdsl-2856.bielsko.dialog.net.pl) has quit (Ping timeout: 244 seconds)
2016-09-08 19:09:13	<--	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 19:09:58	-->	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has joined #scala
2016-09-08 19:10:02	-->	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has joined #scala
2016-09-08 19:11:20	-->	markus1199 (~markus118@79.220.16.125) has joined #scala
2016-09-08 19:11:39	-->	predator217 (~predator1@p4FDC107D.dip0.t-ipconnect.de) has joined #scala
2016-09-08 19:12:13	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 244 seconds)
2016-09-08 19:12:22	<--	dabd (~dabd@81.110.136.133) has quit (Remote host closed the connection)
2016-09-08 19:14:12	<--	markus1189 (~markus118@p4FDC1F3D.dip0.t-ipconnect.de) has quit (Ping timeout: 240 seconds)
2016-09-08 19:15:27	<--	predator117 (~predator1@p4FDC1F3D.dip0.t-ipconnect.de) has quit (Ping timeout: 264 seconds)
2016-09-08 19:17:28	-->	Chris_Stewart_5 (~Chris_Ste@unaffiliated/chris-stewart-5/x-3612383) has joined #scala
2016-09-08 19:17:51	<--	toidiu (~toidiu@dyn-160-39-7-154.dyn.columbia.edu) has quit (Quit: toidiu)
2016-09-08 19:17:58	<--	jfg9 (~josh@host-78-146-238-125.as13285.net) has quit (Quit: jfg9)
2016-09-08 19:19:33	-->	Ir1sh (~Ir1sh@2602:306:365e:a1f0:4dcf:ac70:e7f5:adbb) has joined #scala
2016-09-08 19:20:10	-->	Hoffman (~Hoffman@unaffiliated/hoffman) has joined #scala
2016-09-08 19:20:14	-->	jfg9 (~josh@host-78-146-238-125.as13285.net) has joined #scala
2016-09-08 19:21:37	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-08 19:21:58	<--	pfurla (~textual@65.206.95.146) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-08 19:25:06	<--	patchwor_ (~patchwork@137.53.241.254) has quit (Remote host closed the connection)
2016-09-08 19:25:34	-->	jedws (~jedws@c58-109-75-176.randw4.nsw.optusnet.com.au) has joined #scala
2016-09-08 19:27:59	<--	dylukes (~dylukes@static-108-32-49-11.pitbpa.fios.verizon.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-08 19:28:00	<--	AnarchyAo (~andrew@8.18.217.202) has quit (Read error: Connection reset by peer)
2016-09-08 19:28:34	<--	waqas (~Adium@216.174.114.140) has quit (Quit: Leaving.)
2016-09-08 19:31:58	-->	waqas (~Adium@216.174.114.140) has joined #scala
2016-09-08 19:33:01	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 252 seconds)
2016-09-08 19:33:19	<--	waqas (~Adium@216.174.114.140) has quit (Client Quit)
2016-09-08 19:35:03	<--	vsuthichai (~vsuthicha@64.80.5.145) has quit (Ping timeout: 240 seconds)
2016-09-08 19:40:25	<--	Ir1sh (~Ir1sh@2602:306:365e:a1f0:4dcf:ac70:e7f5:adbb) has quit
2016-09-08 19:46:32	<--	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has quit (Ping timeout: 240 seconds)
2016-09-08 19:48:03	-->	vsuthichai (~vsuthicha@64.80.5.145) has joined #scala
2016-09-08 19:49:50	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-08 19:51:14	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 19:53:05	<--	jfg9 (~josh@host-78-146-238-125.as13285.net) has quit (Quit: jfg9)
2016-09-08 19:54:00	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 250 seconds)
2016-09-08 19:54:04	-->	tag (~tag@50.250.245.241) has joined #scala
2016-09-08 19:55:24	<--	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 19:55:39	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 264 seconds)
2016-09-08 19:57:18	-->	Arrgh (~alex@70.36.63.98) has joined #scala
2016-09-08 20:04:30	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-08 20:05:05	<--	randomstatistic (~randomsta@205.207.255.196) has quit
2016-09-08 20:05:31	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 20:05:56	-->	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has joined #scala
2016-09-08 20:05:59	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2016-09-08 20:07:19	-->	madalex (~madalex@unaffiliated/madalex) has joined #scala
2016-09-08 20:07:45	-->	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has joined #scala
2016-09-08 20:08:13	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-08 20:09:25	<--	thebope (~thebope@pdpc/supporter/student/thebope) has quit (Ping timeout: 244 seconds)
2016-09-08 20:10:05	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-08 20:10:06	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 250 seconds)
2016-09-08 20:10:41	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-09-08 20:10:49	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-08 20:12:16	<--	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has quit (Ping timeout: 250 seconds)
2016-09-08 20:12:44	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 20:12:52	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2016-09-08 20:13:15	<--	lcfrs (~lcfrs@173.247.202.130) has quit (Remote host closed the connection)
2016-09-08 20:14:26	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 250 seconds)
2016-09-08 20:15:10	<--	Chris_Stewart_5 (~Chris_Ste@unaffiliated/chris-stewart-5/x-3612383) has quit (Ping timeout: 255 seconds)
2016-09-08 20:15:26	-->	lcfrs (~lcfrs@173.247.202.130) has joined #scala
2016-09-08 20:16:13	<--	xpen (~xpen@114.111.166.229) has quit (Remote host closed the connection)
2016-09-08 20:17:01	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 252 seconds)
2016-09-08 20:18:43	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 20:18:50	<--	zeryx (~james@hlfxns016cw-142167010003.dhcp-dynamic.FibreOp.ns.bellaliant.net) has quit (Quit: zeryx)
2016-09-08 20:19:58	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-09-08 20:20:14	-->	waqas (~Adium@2605:6000:ee43:2e00:7d71:ef3b:4d11:abed) has joined #scala
2016-09-08 20:23:04	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 252 seconds)
2016-09-08 20:24:26	-->	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-08 20:24:26	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-08 20:24:43	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 20:25:44	-->	greister_ (~greister@222.132.86.139) has joined #scala
2016-09-08 20:26:29	<--	pdo400 (~pdo400@EARNEST-OPE.bar1.SanFrancisco1.Level3.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 20:28:08	<--	jaana (~jaana@c-71-198-4-58.hsd1.ca.comcast.net) has quit (Quit: jaana)
2016-09-08 20:28:30	-->	nefilim (~Adium@c-71-202-233-36.hsd1.ca.comcast.net) has joined #scala
2016-09-08 20:28:35	<--	nefilim (~Adium@c-71-202-233-36.hsd1.ca.comcast.net) has quit (Client Quit)
2016-09-08 20:29:07	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 252 seconds)
2016-09-08 20:30:50	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-08 20:31:26	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-08 20:32:17	<--	replay (~replay@pdpc/supporter/student/replay) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-08 20:32:42	-->	gorbulas (~gorbulas@unaffiliated/gorbulas) has joined #scala
2016-09-08 20:33:43	<--	egp (~eric@216.9.30.85) has quit (Quit: egp)
2016-09-08 20:34:54	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-08 20:34:55	<--	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-08 20:35:10	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 252 seconds)
2016-09-08 20:36:12	<--	jcalonso (~Juan_Carl@bcdcb15c.skybroadband.com) has quit (Ping timeout: 240 seconds)
2016-09-08 20:38:13	-->	hamid (~nithp@unaffiliated/hamid) has joined #scala
2016-09-08 20:38:34	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 265 seconds)
2016-09-08 20:40:20	<--	sdelmore (~textual@207-170-205-174.static.twtelecom.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 20:43:23	-->	sdelmore (~textual@207-170-205-174.static.twtelecom.net) has joined #scala
2016-09-08 20:47:44	<--	hamid (~nithp@unaffiliated/hamid) has quit (Ping timeout: 250 seconds)
2016-09-08 20:48:20	<--	tag (~tag@50.250.245.241) has quit (Ping timeout: 244 seconds)
2016-09-08 20:50:12	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-08 20:54:25	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-08 20:56:08	<--	tpolecat (~anonymous@209.226.201.246) has quit (Quit: tpolecat)
2016-09-08 20:56:19	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Remote host closed the connection)
2016-09-08 20:59:39	-->	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has joined #scala
2016-09-08 21:00:02	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Client Quit)
2016-09-08 21:01:59	-->	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has joined #scala
2016-09-08 21:02:25	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Client Quit)
2016-09-08 21:04:54	-->	OlegYch__ (~OlegYch|h@mm-223-109-44-37.mgts.dynamic.pppoe.byfly.by) has joined #scala
2016-09-08 21:07:02	<--	RSchulzB (~Adium@c-50-156-101-102.hsd1.ca.comcast.net) has quit (Quit: Leaving.)
2016-09-08 21:08:56	<--	OlegYch_ (~OlegYch|h@mm-223-109-44-37.mgts.dynamic.pppoe.byfly.by) has quit (Ping timeout: 265 seconds)
2016-09-08 21:08:57	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-08 21:11:07	-->	overlord_tm (~andraz@213.172.234.141) has joined #scala
2016-09-08 21:11:08	<--	lcfrs (~lcfrs@173.247.202.130) has quit (Remote host closed the connection)
2016-09-08 21:11:21	-->	tpolecat (~anonymous@209.226.201.246) has joined #scala
2016-09-08 21:11:42	-->	lcfrs (~lcfrs@173.247.202.130) has joined #scala
2016-09-08 21:12:25	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-08 21:14:15	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 264 seconds)
2016-09-08 21:15:43	<--	lcfrs (~lcfrs@173.247.202.130) has quit (Ping timeout: 244 seconds)
2016-09-08 21:16:35	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 244 seconds)
2016-09-08 21:19:56	-->	pfurla (~textual@ool-2f12d419.dyn.optonline.net) has joined #scala
2016-09-08 21:22:10	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-08 21:22:45	-->	jcalonso (~Juan_Carl@97e2fd29.skybroadband.com) has joined #scala
2016-09-08 21:23:23	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-08 21:24:18	<--	Rawriful (~Rawriful@host-2-99-77-180.as13285.net) has quit (Quit: WeeChat 1.3)
2016-09-08 21:25:14	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-08 21:26:24	<--	qrvpzvb (~qrvpzvb@ppp089210001174.access.hol.gr) has quit (Remote host closed the connection)
2016-09-08 21:27:02	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 21:28:30	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-08 21:29:39	-->	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-08 21:31:16	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 252 seconds)
2016-09-08 21:32:35	-->	OlegYch_ (~OlegYch|h@93.85.139.38) has joined #scala
2016-09-08 21:33:09	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 21:33:44	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-08 21:34:34	<--	tpolecat (~anonymous@209.226.201.246) has quit (Read error: No route to host)
2016-09-08 21:35:17	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-08 21:35:40	-->	tpolecat (~anonymous@209.226.201.246) has joined #scala
2016-09-08 21:35:54	<--	OlegYch__ (~OlegYch|h@mm-223-109-44-37.mgts.dynamic.pppoe.byfly.by) has quit (Ping timeout: 250 seconds)
2016-09-08 21:36:30	<--	madalex (~madalex@unaffiliated/madalex) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 21:37:31	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 255 seconds)
2016-09-08 21:38:25	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 252 seconds)
2016-09-08 21:39:19	<--	waqas (~Adium@2605:6000:ee43:2e00:7d71:ef3b:4d11:abed) has quit (Ping timeout: 255 seconds)
2016-09-08 21:39:36	-->	waqas (~Adium@cpe-70-112-247-182.austin.res.rr.com) has joined #scala
2016-09-08 21:39:46	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 255 seconds)
2016-09-08 21:39:51	<--	shinnya (~shinnya@245.144.137.133.dy.bbexcite.jp) has quit (Ping timeout: 276 seconds)
2016-09-08 21:40:26	<--	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-08 21:41:09	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-08 21:42:31	-->	madalex (~madalex@unaffiliated/madalex) has joined #scala
2016-09-08 21:42:31	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-08 21:42:43	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-08 21:45:03	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 21:46:02	<--	rosten (~rosten@cpe-45-48-9-161.socal.res.rr.com) has quit (Ping timeout: 244 seconds)
2016-09-08 21:48:39	<--	nullremains (~godenji@c-50-138-183-78.hsd1.ma.comcast.net) has quit (Ping timeout: 265 seconds)
2016-09-08 21:50:15	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 276 seconds)
2016-09-08 21:53:59	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-08 21:54:24	<--	madalex (~madalex@unaffiliated/madalex) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 21:56:02	<--	Sasazuka (~Sasazuka@unaffiliated/sasazuka) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 21:57:03	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 21:58:46	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 252 seconds)
2016-09-08 21:59:07	-->	jade-shan (~jade@101.81.254.222) has joined #scala
2016-09-08 22:01:23	pfurla	any one ever heard of the method canEqual?
2016-09-08 22:01:28	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 250 seconds)
2016-09-08 22:01:29	-->	gli (~gli@119.254.120.72) has joined #scala
2016-09-08 22:01:33	<--	vsuthichai (~vsuthicha@64.80.5.145) has quit (Ping timeout: 240 seconds)
2016-09-08 22:02:04	tpolecat	yeah there's a paper about it
2016-09-08 22:02:16	<--	overlord_tm (~andraz@213.172.234.141) has quit (Ping timeout: 255 seconds)
2016-09-08 22:02:44	-->	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has joined #scala
2016-09-08 22:02:49	tpolecat	http://www.artima.com/lejava/articles/equality.html
2016-09-08 22:03:27	tpolecat	hm i guess that's not exactly it. but it explains what's going on
2016-09-08 22:03:54	tpolecat	i think it's hopeless
2016-09-08 22:05:53	-->	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has joined #scala
2016-09-08 22:06:44	-->	constant (~root@freebsd/developer/variable) has joined #scala
2016-09-08 22:07:04	<--	tpolecat (~anonymous@209.226.201.246) has quit (Quit: tpolecat)
2016-09-08 22:07:06	<--	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has quit (Ping timeout: 250 seconds)
2016-09-08 22:08:47	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Client Quit)
2016-09-08 22:09:23	pfurla	yeah, just found it myself
2016-09-08 22:09:42	-->	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has joined #scala
2016-09-08 22:09:45	pfurla	had a few facepalm moments here http://stackoverflow.com/questions/39402494/scala-match-in-equals-method/39402586
2016-09-08 22:10:22	<--	hexagoxel (~hexagoxel@p200300798F1B5E00021E33FFFE2231E9.dip0.t-ipconnect.de) has quit (Ping timeout: 255 seconds)
2016-09-08 22:11:34	-->	Chris_Stewart_5 (~Chris_Ste@unaffiliated/chris-stewart-5/x-3612383) has joined #scala
2016-09-08 22:13:44	pfurla	! "Aa".hashCode == "BB".hashCode
2016-09-08 22:13:45	multibot_1	 Boolean = true
2016-09-08 22:13:48	pfurla	hehe
2016-09-08 22:14:33	<--	Osum (~radu@pool-98-116-223-214.nycmny.fios.verizon.net) has quit (Ping timeout: 240 seconds)
2016-09-08 22:14:45	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-08 22:15:10	-->	hexagoxel (~hexagoxel@p4FCCCA56.dip0.t-ipconnect.de) has joined #scala
2016-09-08 22:15:27	-->	greister__ (~greister@222.132.86.139) has joined #scala
2016-09-08 22:15:38	-->	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has joined #scala
2016-09-08 22:18:03	<--	greister_ (~greister@222.132.86.139) has quit (Ping timeout: 265 seconds)
2016-09-08 22:18:29	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-09-08 22:18:30	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Client Quit)
2016-09-08 22:19:39	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 264 seconds)
2016-09-08 22:21:08	<--	ganeshraju (~Adium@72.46.219.230) has quit (Quit: Leaving.)
2016-09-08 22:21:39	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-08 22:28:44	-->	toidiu (~toidiu@cpe-158-222-147-159.nyc.res.rr.com) has joined #scala
2016-09-08 22:29:16	<--	smendenh (~textual@162-229-180-208.lightspeed.rlghnc.sbcglobal.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 22:30:38	<--	Mandus (aasmundo@128.39.36.51) has quit (Ping timeout: 244 seconds)
2016-09-08 22:31:31	-->	Mandus (aasmundo@128.39.36.51) has joined #scala
2016-09-08 22:33:23	<--	pfurla (~textual@ool-2f12d419.dyn.optonline.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-08 22:33:57	-->	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has joined #scala
2016-09-08 22:35:40	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Client Quit)
2016-09-08 22:37:20	<--	toidiu (~toidiu@cpe-158-222-147-159.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-08 22:39:22	-->	toidiu (~toidiu@cpe-158-222-147-159.nyc.res.rr.com) has joined #scala
2016-09-08 22:47:51	<--	PSoBI (~latner@host66.minutemantransport.com) has quit (Ping timeout: 264 seconds)
2016-09-08 22:47:58	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-08 22:48:40	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-08 22:52:53	<--	toidiu (~toidiu@cpe-158-222-147-159.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-08 22:53:11	-->	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has joined #scala
2016-09-08 22:53:30	-->	toidiu (~toidiu@cpe-158-222-147-159.nyc.res.rr.com) has joined #scala
2016-09-08 22:53:30	<--	toidiu (~toidiu@cpe-158-222-147-159.nyc.res.rr.com) has quit (Client Quit)
2016-09-08 22:54:17	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Client Quit)
2016-09-08 22:56:13	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-08 22:56:50	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-08 23:01:09	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 260 seconds)
2016-09-08 23:01:44	-->	cross (~cross@spitfire.i.gajendra.net) has joined #scala
2016-09-08 23:02:14	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Remote host closed the connection)
2016-09-08 23:02:28	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-08 23:03:31	-->	pfurla (~textual@ool-2f12d419.dyn.optonline.net) has joined #scala
2016-09-08 23:03:34	<--	constant (~root@freebsd/developer/variable) has quit (Quit: 1 found in /dev/zero)
2016-09-08 23:04:18	-->	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has joined #scala
2016-09-08 23:04:51	-->	patchwork (~patchwork@137.53.241.254) has joined #scala
2016-09-08 23:06:07	<--	acidjnk (~havenone@pD9E7F0AF.dip0.t-ipconnect.de) has quit (Ping timeout: 244 seconds)
2016-09-08 23:07:17	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Client Quit)
2016-09-08 23:07:57	<--	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 23:09:22	<--	patchwork (~patchwork@137.53.241.254) has quit (Ping timeout: 265 seconds)
2016-09-08 23:09:26	S11001001	pfurla: it's pretty mechanical, matters only if you use/support subtyping.  Did it for the hell of it https://bitbucket.org/ermine-language/ermine-scala/src/5630232ed5730deababd16feb2438014ca135325/core/src/main/scala/com/clarifi/reporting/util/Graph.scala?at=default&fileviewer=file-view-default#Graph.scala-155
2016-09-08 23:10:01	S11001001	Guess there's also the "this eq o" line, forgot that
2016-09-08 23:10:15	pfurla	yep I know
2016-09-08 23:10:27	pfn	I thought there's a. whole. CanEqual trait
2016-09-08 23:11:28	pfurla	there is this http://www.scala-lang.org/api/current/#scala.Equals
2016-09-08 23:11:51	pfurla	there CanAwait too hehe http://www.scala-lang.org/api/current/#scala.concurrent.CanAwait
2016-09-08 23:11:52	-->	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has joined #scala
2016-09-08 23:12:10	-->	ganeshraju (~Adium@72.46.219.230) has joined #scala
2016-09-08 23:12:33	-->	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has joined #scala
2016-09-08 23:12:42	-->	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has joined #scala
2016-09-08 23:14:14	<--	ganeshraju (~Adium@72.46.219.230) has quit (Client Quit)
2016-09-08 23:16:59	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-08 23:17:00	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-08 23:17:39	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2016-09-08 23:17:59	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-08 23:18:32	<--	greister__ (~greister@222.132.86.139) has quit (Ping timeout: 240 seconds)
2016-09-08 23:19:16	S11001001	Too bad there are these type parameter things making all this nonsense
2016-09-08 23:19:25	S11001001	We should probably get rid of those
2016-09-08 23:19:52	S11001001	Lots of people write programs in Golang and they don't have them
2016-09-08 23:20:16	<--	marcoy (~marcoy@pool-173-68-57-92.nycmny.fios.verizon.net) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-08 23:20:38	-->	ganeshraju (~Adium@72.46.219.230) has joined #scala
2016-09-08 23:21:34	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 260 seconds)
2016-09-08 23:24:03	pfn	that's kind of from left field
2016-09-08 23:26:25	<--	haste-chris (~haste-chr@8.41.67.145) has quit (Quit: Leaving)
2016-09-08 23:28:22	-->	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has joined #scala
2016-09-08 23:30:22	-->	adelbertc (uid26183@gateway/web/irccloud.com/x-uzwbbqldodmtwdpv) has joined #scala
2016-09-08 23:31:35	-->	lambda-11235 (~lambda-11@184.63.207.209) has joined #scala
2016-09-08 23:37:33	<--	Chris_Stewart_5 (~Chris_Ste@unaffiliated/chris-stewart-5/x-3612383) has quit (Ping timeout: 240 seconds)
2016-09-08 23:37:50	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-08 23:40:01	-->	Squarism (~Squarism4@78-68-60-82-no193.tbcn.telia.com) has joined #scala
2016-09-08 23:42:22	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 250 seconds)
2016-09-08 23:44:06	--	irc: disconnected from server
2016-09-09 09:48:10	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-09 09:48:10	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-09 09:48:10	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-09 09:48:10	--	Channel #scala: 428 nicks (0 ops, 0 voices, 428 normals)
2016-09-09 09:48:10	***	Buffer Playback...
2016-09-09 09:48:10	pfurla	[23:11:28] there is this http://www.scala-lang.org/api/current/#scala.Equals
2016-09-09 09:48:10	pfurla	[23:11:51] there CanAwait too hehe http://www.scala-lang.org/api/current/#scala.concurrent.CanAwait
2016-09-09 09:48:10	S11001001	[23:19:16] Too bad there are these type parameter things making all this nonsense
2016-09-09 09:48:10	S11001001	[23:19:25] We should probably get rid of those
2016-09-09 09:48:10	S11001001	[23:19:52] Lots of people write programs in Golang and they don't have them
2016-09-09 09:48:10	pfn	[23:24:03] that's kind of from left field
2016-09-09 09:48:10	S11001001	[01:00:08] @tell mberndt that's what I meant; alternative is type parameter GADT
2016-09-09 09:48:10	lambdabot	[01:00:09] Consider it noted.
2016-09-09 09:48:10	Profpatsch	[02:22:02] How do I map over the keys & values of a Map?
2016-09-09 09:48:10	Profpatsch	[02:22:26] That is I want to modify both in parallel, but they don’t influence each other’s redefinition.
2016-09-09 09:48:10	reactormonk	[03:09:06] Profpatsch, convert to a ParSeq, convert back?
2016-09-09 09:48:10	mberndt	[05:39:06] Hi! I've got a sealed trait with various subtypes (case classes) that I need to serialize and deserialize to JSON. I'd like it to be robust, i. e. I'd like to get a compiler error when I forget to consider one of the case classes in the serialization and deserialization code
2016-09-09 09:48:10	mberndt	[05:39:50] It's easy for serialization, but how can I get that in the deserialization?
2016-09-09 09:48:10	graingert	[06:05:58] I'm following along the docs on https://www.playframework.com/documentation/2.4.x/ScalaJsonTransformers
2016-09-09 09:48:10	graingert	[06:06:03] but the first example doesn't work
2016-09-09 09:48:10	graingert	[06:06:05] I just get
2016-09-09 09:48:10	graingert	[06:06:20]  play.api.libs.json.JsResult[play.api.libs.json.JsValue] = JsError(List((/key2/key23,List(ValidationError(List(error.path.missing),WrappedArray())))))
2016-09-09 09:48:10	graingert	[06:07:02] even json.transform((__ \ 'key2).json.pick) doesn't work
2016-09-09 09:48:10	graingert	[06:07:10] I just get play.api.libs.json.JsResult[play.api.libs.json.JsValue] = JsError(List((/key2,List(ValidationError(List(error.path.missing),WrappedArray())))))
2016-09-09 09:48:10	JD557	[06:31:38] Any recommendations for a fast CSV parser ready to use in akka-streams (ie. that works as a Flow)?
2016-09-09 09:48:10	JD557	[06:32:11] I was using jackson-dataformat-csv but since it uses InputStreams it's not really easy to put it in the middle of a stream without some hacks
2016-09-09 09:48:10	marrrk	[07:48:19] What's your least favourite monad?
2016-09-09 09:48:10	Rc43	[09:03:02] Hi
2016-09-09 09:48:10	aloiscochard	[09:04:03] marrrk: Set
2016-09-09 09:48:10	marrrk	[09:08:19] aloiscochard: Is it one, though?
2016-09-09 09:48:10	aloiscochard	[09:09:43] marrrk: "A Set monad, analogous to the List monad, is allegedly impossible. The best we can do is to define Set as a restricted monad for non-determinism." (ref: http://okmij.org/ftp/Haskell/set-monad.html)
2016-09-09 09:48:10	marrrk	[09:09:55] wow
2016-09-09 09:48:10	Rc43	[09:22:19] I don't understand what is akka-slf4j for
2016-09-09 09:48:10	Rc43	[09:22:41] Is it possible to convert ActorLogging.log into slf4j.Logger with it?
2016-09-09 09:48:10	Rc43	[09:23:41] I want to generalize couple of not related to akka classes in such way that it would be possible to inject either ActorLogging or slf4j.Logger into them
2016-09-09 09:48:10	Rc43	[09:24:02] So I declared a trait with method getLogger: slf4j.Logger
2016-09-09 09:48:10	aupiff	[09:24:06] does cats want to add an IO type like scalaz? how often does one see a mix of cats and scalaz in a single project?
2016-09-09 09:48:10	aupiff	[09:26:32] I am watching the talk on doobie, and tpolecat shows how from FreeC we need a natural transformation to some other monad like scalaz's Task or IO -- if we're using mainly cats, what are the options for the monad our natural transformation maps to?
2016-09-09 09:48:10	aloiscochard	[09:26:44] aupiff: I don't think cats have generally much interest in providing effect handling, or work on non strict evaluation. In scalaz8, we take great care of that.
2016-09-09 09:48:10	aupiff	[09:29:17] aloiscochard: when is scalaz8 supposed to be released?
2016-09-09 09:48:10	aupiff	[09:30:12] the team I'm working with seems to prefer cats, but it's barely used in the code base--it wouldn't be very hard to move to scalaz.
2016-09-09 09:48:10	aloiscochard	[09:30:36] aupiff: that's a very good question. I expect initial usable snapshots to be released by the end of the year, probably 6 months more until getting a decent stable milestone with full IO/Async support.
2016-09-09 09:48:10	aloiscochard	[09:30:49] we should have lenses and basic typeclasses by the end of the year though.
2016-09-09 09:48:10	aloiscochard	[09:31:06] the big problems are solved now, I believe.
2016-09-09 09:48:10	aupiff	[09:31:45] what were the problems? what is the performance of cats vs. scalaz? is there a good comparision blog post I can read?
2016-09-09 09:48:10	aupiff	[09:32:00] I am a haskeller trying to deal with scala and I need guidance.
2016-09-09 09:48:10	aloiscochard	[09:43:34] aupiff: of the problem which was work on, was the problem of typeclass encoding with subtyping in scalaz7/cats, it's hard to explain quickly but it create pain when trying to build a MTL library. Scalaz8 use the scato encoding: https://github.com/jbgi/scato/raw/master/TypeClassesInScato.pdf
2016-09-09 09:48:10	aloiscochard	[09:43:57] aupiff: latest problem I did work on, was optic fusing at compile time (lenses, prism, ...), as we want the lib to be heavily based on lenses
2016-09-09 09:48:10	aloiscochard	[09:44:27] aupiff: an other one, was the IO/Async, story. It is very likely that scalaz8 follow the matterhorn design (improved): https://github.com/aloiscochard/matterhorn
2016-09-09 09:48:10	aloiscochard	[09:45:10] see here, for example of the IO/Async design: https://github.com/aloiscochard/matterhorn/blob/master/core/src/test/scala/CoreSpec.scala
2016-09-09 09:48:10	aloiscochard	[09:45:26] it is not yet in scalaz8, a few details have to be discussed but it is generally accepted.
2016-09-09 09:48:10	aloiscochard	[09:45:53] aupiff: also, removing all the technical debt and enforcing a coherent definition of typeclasses
2016-09-09 09:48:10	aupiff	[09:47:12] aloiscochard: thanks for all that, I'll start reading.
2016-09-09 09:48:10	aloiscochard	[09:47:41] aupiff: your welcome! feel free to let me know if you have any questions, I'll be happy to answer.
2016-09-09 09:48:10	aloiscochard	[09:47:52] just so you know, there is #scalaz also
2016-09-09 09:48:10	***	Playback Complete.
2016-09-09 09:48:24	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-09 09:48:49	-->	dylukes (~dylukes@150.212.79.173) has joined #scala
2016-09-09 09:48:55	<--	dylukes (~dylukes@150.212.79.173) has quit (Client Quit)
2016-09-09 09:49:19	aupiff	great, thank you!
2016-09-09 09:50:12	-->	adolf_stalin (~adolf_sta@205.157.178.143) has joined #scala
2016-09-09 09:50:14	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2016-09-09 09:53:42	-->	ganeshraju (~Adium@72.46.219.230) has joined #scala
2016-09-09 09:53:48	-->	dennisvennink (~dv@92.109.221.191) has joined #scala
2016-09-09 09:54:49	-->	cc_cc (~textual@83.232.184.139) has joined #scala
2016-09-09 09:55:00	-->	waqas (~Adium@2605:6000:ee43:2e00:7508:6185:54d2:9ecd) has joined #scala
2016-09-09 09:55:10	-->	Chris_Stewart_5 (~Chris_Ste@unaffiliated/chris-stewart-5/x-3612383) has joined #scala
2016-09-09 09:55:10	-->	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has joined #scala
2016-09-09 09:56:08	aupiff	in case anyone is curious, I've found that answer to my initial question about how to use cats with doobie: from the github page: "The book of doobie now uses IOLite (included in doobie.imports._) instead of Task, which is trivially different between scalaz and fs2 and complicates the yaxing. It's a totally inconsequential change but I think it may freak people out."
2016-09-09 09:59:56	<--	Dimitriye98 (~Dimitriye@c-73-252-165-178.hsd1.ca.comcast.net) has quit (Ping timeout: 265 seconds)
2016-09-09 10:03:39	-->	griffindy (~textual@192.133.79.17) has joined #scala
2016-09-09 10:05:27	-->	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has joined #scala
2016-09-09 10:11:17	-->	Big_G (Big_G@c-66-235-24-254.sea.wa.customer.broadstripe.net) has joined #scala
2016-09-09 10:11:22	<--	eklavya (~eklavya@117.203.13.186) has quit (Remote host closed the connection)
2016-09-09 10:11:45	<--	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has quit (Ping timeout: 244 seconds)
2016-09-09 10:12:27	<--	ghounds (~gabriel@69.74.59.115) has quit (Ping timeout: 264 seconds)
2016-09-09 10:14:01	-->	texasmynsted (~texasmyns@c-76-122-222-203.hsd1.tn.comcast.net) has joined #scala
2016-09-09 10:14:55	-->	thebope (~thebope@pdpc/supporter/student/thebope) has joined #scala
2016-09-09 10:15:10	<--	synthroid (~synthroid@208.167.254.95) has quit (Remote host closed the connection)
2016-09-09 10:21:26	<--	lidenbrock (c907ba37@gateway/web/freenode/ip.201.7.186.55) has quit (Ping timeout: 264 seconds)
2016-09-09 10:25:35	-->	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has joined #scala
2016-09-09 10:28:55	<--	overlord_tm (~andraz@storitve.energetika.net) has quit (Ping timeout: 250 seconds)
2016-09-09 10:29:28	-->	tpolecat (~anonymous@host109-148-53-197.range109-148.btcentralplus.com) has joined #scala
2016-09-09 10:30:02	<--	mkoskar (~mkoskar@unaffiliated/mkoskar) has quit (Quit: mkoskar)
2016-09-09 10:30:15	<--	romerocesar (~cesar@2601:602:9300:6000:bdb7:6925:eb22:5c3f) has quit (Ping timeout: 250 seconds)
2016-09-09 10:31:57	<--	hogetaro (~hogetaro@softbank126012121050.bbtec.net) has quit (Quit: Leaving...)
2016-09-09 10:33:47	-->	ghounds (~gabriel@69.74.59.115) has joined #scala
2016-09-09 10:33:57	-->	pfurla (~textual@65.206.95.146) has joined #scala
2016-09-09 10:34:09	<--	tpolecat (~anonymous@host109-148-53-197.range109-148.btcentralplus.com) has quit (Ping timeout: 260 seconds)
2016-09-09 10:34:43	-->	AzureStigma (~AzureStig@unaffiliated/azurestigma) has joined #scala
2016-09-09 10:35:41	-->	allengeorge (~textual@208.185.185.131) has joined #scala
2016-09-09 10:37:11	-->	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has joined #scala
2016-09-09 10:39:30	-->	elyphas (~elyphas@201.147.92.44) has joined #scala
2016-09-09 10:40:38	<--	elyphas (~elyphas@201.147.92.44) has quit (Client Quit)
2016-09-09 10:41:37	<--	solutron (~solutron@142-254-107-219.dsl.dynamic.fusionbroadband.com) has quit (Ping timeout: 252 seconds)
2016-09-09 10:42:31	<--	crobbins (~crobbins@96.8.88.13) has quit (Remote host closed the connection)
2016-09-09 10:43:15	-->	crobbins (~crobbins@96.8.88.13) has joined #scala
2016-09-09 10:44:28	<--	crobbins (~crobbins@96.8.88.13) has quit (Remote host closed the connection)
2016-09-09 10:44:41	<--	forgottenone (~forgotten@195.142.41.221) has quit (Quit: Konversation terminated!)
2016-09-09 10:45:27	<--	cc_cc (~textual@83.232.184.139) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-09 10:45:35	-->	forgottenone (~forgotten@195.142.41.221) has joined #scala
2016-09-09 10:46:55	<--	forgottenone (~forgotten@195.142.41.221) has quit (Client Quit)
2016-09-09 10:53:25	-->	crobbins (~crobbins@96.8.88.13) has joined #scala
2016-09-09 10:55:12	-->	eklavya (~eklavya@117.203.13.186) has joined #scala
2016-09-09 10:55:20	-->	nefilim (~Adium@c-71-202-233-36.hsd1.ca.comcast.net) has joined #scala
2016-09-09 10:56:36	-->	hellseher (~hellseher@2.92.48.173) has joined #scala
2016-09-09 10:56:58	<--	crobbins (~crobbins@96.8.88.13) has quit (Remote host closed the connection)
2016-09-09 10:57:08	<--	hellseher (~hellseher@2.92.48.173) has quit (Remote host closed the connection)
2016-09-09 10:57:58	-->	Jacoby6000 (~jacob.bar@host-64-47-96-210.masergy.com) has joined #scala
2016-09-09 10:58:08	-->	randomstatistic (~randomsta@205.207.255.196) has joined #scala
2016-09-09 10:58:13	<--	Big_G (Big_G@c-66-235-24-254.sea.wa.customer.broadstripe.net) has quit (Read error: Connection reset by peer)
2016-09-09 11:03:03	-->	whaley (~whaley@23-113-244-82.lightspeed.jcvlfl.sbcglobal.net) has joined #scala
2016-09-09 11:07:08	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-09 11:07:48	<--	red1ynx (~dzmitry@37.17.34.68) has quit (Ping timeout: 276 seconds)
2016-09-09 11:08:36	-->	crobbins (~crobbins@96.8.88.13) has joined #scala
2016-09-09 11:09:07	-->	uglyfigurine (~uglyfigur@131.228.197.54) has joined #scala
2016-09-09 11:10:27	<--	uglyfigurine (~uglyfigur@131.228.197.54) has quit (Remote host closed the connection)
2016-09-09 11:10:39	<--	fbergmann (fbergmann@nat/novell/x-qgvqvytzmcvpxlly) has quit (Quit: WeeChat 1.3)
2016-09-09 11:10:40	-->	uglyfigurine (~uglyfigur@131.228.197.54) has joined #scala
2016-09-09 11:12:04	<--	uglyfigurine (~uglyfigur@131.228.197.54) has quit (Remote host closed the connection)
2016-09-09 11:12:33	-->	romerocesar (~cesar@c-73-97-145-30.hsd1.wa.comcast.net) has joined #scala
2016-09-09 11:13:13	<--	flugsio (~fluzios@201.86.223.238) has quit (Ping timeout: 244 seconds)
2016-09-09 11:17:33	<--	romerocesar (~cesar@c-73-97-145-30.hsd1.wa.comcast.net) has quit (Ping timeout: 276 seconds)
2016-09-09 11:18:04	<--	jfg9 (~josh@80.87.25.194) has quit (Quit: jfg9)
2016-09-09 11:19:26	<--	przl (~przlrkt@p5DD1477A.dip0.t-ipconnect.de) has quit (Ping timeout: 244 seconds)
2016-09-09 11:20:59	<--	dabd (~dabd@86.188.177.234) has quit (Remote host closed the connection)
2016-09-09 11:21:08	-->	dabd (~dabd@86.188.177.234) has joined #scala
2016-09-09 11:21:37	<--	eklavya (~eklavya@117.203.13.186) has quit (Remote host closed the connection)
2016-09-09 11:21:46	-->	waqas1 (~Adium@ec2-52-91-1-253.compute-1.amazonaws.com) has joined #scala
2016-09-09 11:22:49	<--	waqas (~Adium@2605:6000:ee43:2e00:7508:6185:54d2:9ecd) has quit (Ping timeout: 255 seconds)
2016-09-09 11:23:03	-->	jedws (~jedws@eth59-167-133-100.static.internode.on.net) has joined #scala
2016-09-09 11:23:20	--	irc: disconnected from server
2016-09-09 16:47:11	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-09 16:47:11	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-09 16:47:11	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-09 16:47:11	--	Channel #scala: 426 nicks (0 ops, 0 voices, 426 normals)
2016-09-09 16:47:11	***	Buffer Playback...
2016-09-09 16:47:11	pfn	[15:10:51] and sbt-sonatype performs all the repo closing and releasing remotely on sonatype 
2016-09-09 16:47:11	tpolecat	[15:14:04] someone should make an intographic
2016-09-09 16:47:11	tpolecat	[15:14:09] info
2016-09-09 16:47:11	dylukes	[15:22:45] Question
2016-09-09 16:47:11	dylukes	[15:22:58] say I'm returning F[G[A]] and there exists an implicit conversion A ⇒ B
2016-09-09 16:47:11	dylukes	[15:23:09] I'd like to take a value of F[G[A]] and return it where one of F[G[B]] is expected.
2016-09-09 16:47:11	dylukes	[15:23:25] Can this be done? Do I need to add some wrapper call around the A value to get the implicit conversion to kick in?
2016-09-09 16:47:11	dylukes	[15:30:47] I'd probably have to define implicit def convert[B, A <% B](l: F[G[A]]): F[G[B]] = l map { a => a: B } for 
2016-09-09 16:47:11	dylukes	[15:30:48] :\ 
2016-09-09 16:47:11	dylukes	[15:37:57] Oh heh, I can just do it this way
2016-09-09 16:47:11	dylukes	[15:38:26] val result: OptionT[Future, B /* explicit type */] = for ... .run
2016-09-09 16:47:11	dylukes	[15:38:53] Well, don't even need the explicit cat.
2016-09-09 16:47:11	gothos	[15:40:53] aloiscochard: Out of curiosity, did you fix your Spark problem where scala.Some couldn't be found?
2016-09-09 16:47:11	aupiff	[15:41:26] I've been using cats' XorT, but now I read on their github page that Either in Scala is now right-biased so cats has introduced support for either and eitherT. The scala update apparently only takes effect in 2.12, so what are the options for people using scala 2.11 with cats 0.7.2
2016-09-09 16:47:11	aupiff	[15:45:56] weird, I was having issues before with `import cats.instances._`, but `import cats.syntax.either._` got Either working the way I'd expect.
2016-09-09 16:47:11	dylukes	[15:46:02] Bah, I followed Quill's instructions for defining a schema.
2016-09-09 16:47:11	dylukes	[15:46:15] But then when I try to use it elsewhere it complains that I haven't lifted values inside quote...
2016-09-09 16:47:11	dylukes	[15:46:24] Of course those values can't be lifted, they're quoted queries. :\.
2016-09-09 16:47:11	dylukes	[15:49:16] Ah hm no I can in general.
2016-09-09 16:47:11	dylukes	[15:49:32] I just tried to use a join of two tables "as if" it were a schema and it doesn't like me doing that apparently.
2016-09-09 16:47:11	aupiff	[16:04:40] what am I doing wrong here: Monad[Either[String,?]].pure(3)
2016-09-09 16:47:11	aupiff	[16:04:44] (in cats)
2016-09-09 16:47:11	aupiff	[16:05:39] `Monad[List].pure(3)` works for me.
2016-09-09 16:47:11	dylukes	[16:37:53] Can someone break down cats vs scalaz?
2016-09-09 16:47:11	aupiff	[16:39:27] I'd like that too
2016-09-09 16:47:11	aupiff	[16:39:46] and why doesn't Applicative[Future] exist in cats?
2016-09-09 16:47:11	dylukes	[16:40:57] Probably because it would be non-intuitive.
2016-09-09 16:47:11	aupiff	[16:41:03] what?
2016-09-09 16:47:11	dylukes	[16:41:11] Scalaz' Applicative instance for Future doesn't sequentially await.
2016-09-09 16:47:11	dylukes	[16:41:16] It executed futures concurrently.
2016-09-09 16:47:11	dylukes	[16:41:21] executes*
2016-09-09 16:47:11	aupiff	[16:41:30] how can it be a monad and not an applicative?
2016-09-09 16:47:11	aupiff	[16:41:33] that make no sense
2016-09-09 16:47:11	aupiff	[16:41:42] and! then you can't call traverse
2016-09-09 16:47:11	dylukes	[16:41:53] They might have fixed that.
2016-09-09 16:47:11	aupiff	[16:41:58] List[Future[Int]]
2016-09-09 16:47:11	dylukes	[16:42:05] True, yeah that does work.
2016-09-09 16:47:12	dylukes	[16:42:09] I don't know why it doesn't exist in cats.
2016-09-09 16:47:12	OlegYch_	[16:42:34] aupiff: i thought tpolecat explained the difference pretty clearly the other day
2016-09-09 16:47:12	dylukes	[16:42:51] Hah! There are Scala Olegs too...
2016-09-09 16:47:12	dylukes	[16:43:24] It seems like scalaz is more fundamentalist about purity.
2016-09-09 16:47:12	aupiff	[16:43:27] OlegYch_: I need more details
2016-09-09 16:47:12	dylukes	[16:43:30] But I could be wrong.
2016-09-09 16:47:12	aupiff	[16:43:37] ones that shouldn't be communicated over IRC
2016-09-09 16:47:12	aupiff	[16:43:53] OlegYch_: do you know why cats doesn't have Applicative[Future]
2016-09-09 16:47:12	aupiff	[16:45:44] OlegYch_: I agree with you though, tpolecat's explanation was very good. now I just need more low-level details -- why some instances exist in one lib and not the other, what people in cats use in place of IO / Task, and so on.
2016-09-09 16:47:12	OlegYch_	[16:46:14] dylukes: for the reference https://gist.github.com/OlegYch/fa21fb83a4aae637022fe17f29c50489
2016-09-09 16:47:12	dylukes	[16:46:37] "disagreements over the code of conduct, which scalaz will not adopt"
2016-09-09 16:47:12	dylukes	[16:46:38] such as?
2016-09-09 16:47:12	dylukes	[16:46:50] That sounds like political nonsense.
2016-09-09 16:47:12	***	Playback Complete.
2016-09-09 16:47:22	OlegYch_	aupiff: i believe there is a plan to use an external package for IO / Task stuff in cats
2016-09-09 16:47:25	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-09 16:47:39	OlegYch_	as for Future, dunno, i thought it was there
2016-09-09 16:48:01	aupiff	nope.
2016-09-09 16:48:11	<--	Sord (~Sord@87-100-243-137.bb.dnainternet.fi) has quit (Remote host closed the connection)
2016-09-09 16:48:25	--	irc: disconnected from server
2016-09-09 16:48:29	-->	Kod (~kodder@saiyan.joylab.ca) has joined #scala
2016-09-09 16:48:29	--	Topic for #scala is "The Scala programming language | Please follow the Scala Code of Conduct: http://www.scala-lang.org/conduct.html | Resources: http://www.scala-lang.org/community | paste code snippets to http://scastie.org or https://gist.github.com | Issues with the channel? Discuss on #scala-ops"
2016-09-09 16:48:29	--	Topic set by SethTisue on Wed, 11 May 2016 00:29:44
2016-09-09 16:48:29	--	Channel #scala: 424 nicks (0 ops, 0 voices, 424 normals)
2016-09-09 16:48:29	***	Buffer Playback...
2016-09-09 16:48:29	dylukes	[15:22:58] say I'm returning F[G[A]] and there exists an implicit conversion A ⇒ B
2016-09-09 16:48:29	dylukes	[15:23:09] I'd like to take a value of F[G[A]] and return it where one of F[G[B]] is expected.
2016-09-09 16:48:29	dylukes	[15:23:25] Can this be done? Do I need to add some wrapper call around the A value to get the implicit conversion to kick in?
2016-09-09 16:48:29	dylukes	[15:30:47] I'd probably have to define implicit def convert[B, A <% B](l: F[G[A]]): F[G[B]] = l map { a => a: B } for 
2016-09-09 16:48:29	dylukes	[15:30:48] :\ 
2016-09-09 16:48:29	dylukes	[15:37:57] Oh heh, I can just do it this way
2016-09-09 16:48:29	dylukes	[15:38:26] val result: OptionT[Future, B /* explicit type */] = for ... .run
2016-09-09 16:48:29	dylukes	[15:38:53] Well, don't even need the explicit cat.
2016-09-09 16:48:29	gothos	[15:40:53] aloiscochard: Out of curiosity, did you fix your Spark problem where scala.Some couldn't be found?
2016-09-09 16:48:29	aupiff	[15:41:26] I've been using cats' XorT, but now I read on their github page that Either in Scala is now right-biased so cats has introduced support for either and eitherT. The scala update apparently only takes effect in 2.12, so what are the options for people using scala 2.11 with cats 0.7.2
2016-09-09 16:48:29	aupiff	[15:45:56] weird, I was having issues before with `import cats.instances._`, but `import cats.syntax.either._` got Either working the way I'd expect.
2016-09-09 16:48:29	dylukes	[15:46:02] Bah, I followed Quill's instructions for defining a schema.
2016-09-09 16:48:29	dylukes	[15:46:15] But then when I try to use it elsewhere it complains that I haven't lifted values inside quote...
2016-09-09 16:48:29	dylukes	[15:46:24] Of course those values can't be lifted, they're quoted queries. :\.
2016-09-09 16:48:29	dylukes	[15:49:16] Ah hm no I can in general.
2016-09-09 16:48:29	dylukes	[15:49:32] I just tried to use a join of two tables "as if" it were a schema and it doesn't like me doing that apparently.
2016-09-09 16:48:29	aupiff	[16:04:40] what am I doing wrong here: Monad[Either[String,?]].pure(3)
2016-09-09 16:48:29	aupiff	[16:04:44] (in cats)
2016-09-09 16:48:29	aupiff	[16:05:39] `Monad[List].pure(3)` works for me.
2016-09-09 16:48:29	dylukes	[16:37:53] Can someone break down cats vs scalaz?
2016-09-09 16:48:29	aupiff	[16:39:27] I'd like that too
2016-09-09 16:48:29	aupiff	[16:39:46] and why doesn't Applicative[Future] exist in cats?
2016-09-09 16:48:29	dylukes	[16:40:57] Probably because it would be non-intuitive.
2016-09-09 16:48:29	aupiff	[16:41:03] what?
2016-09-09 16:48:29	dylukes	[16:41:11] Scalaz' Applicative instance for Future doesn't sequentially await.
2016-09-09 16:48:29	dylukes	[16:41:16] It executed futures concurrently.
2016-09-09 16:48:29	dylukes	[16:41:21] executes*
2016-09-09 16:48:29	aupiff	[16:41:30] how can it be a monad and not an applicative?
2016-09-09 16:48:29	aupiff	[16:41:33] that make no sense
2016-09-09 16:48:29	aupiff	[16:41:42] and! then you can't call traverse
2016-09-09 16:48:29	dylukes	[16:41:53] They might have fixed that.
2016-09-09 16:48:29	aupiff	[16:41:58] List[Future[Int]]
2016-09-09 16:48:29	dylukes	[16:42:05] True, yeah that does work.
2016-09-09 16:48:29	dylukes	[16:42:09] I don't know why it doesn't exist in cats.
2016-09-09 16:48:29	OlegYch_	[16:42:34] aupiff: i thought tpolecat explained the difference pretty clearly the other day
2016-09-09 16:48:29	dylukes	[16:42:51] Hah! There are Scala Olegs too...
2016-09-09 16:48:29	dylukes	[16:43:24] It seems like scalaz is more fundamentalist about purity.
2016-09-09 16:48:29	aupiff	[16:43:27] OlegYch_: I need more details
2016-09-09 16:48:29	dylukes	[16:43:30] But I could be wrong.
2016-09-09 16:48:29	aupiff	[16:43:37] ones that shouldn't be communicated over IRC
2016-09-09 16:48:29	aupiff	[16:43:53] OlegYch_: do you know why cats doesn't have Applicative[Future]
2016-09-09 16:48:29	aupiff	[16:45:44] OlegYch_: I agree with you though, tpolecat's explanation was very good. now I just need more low-level details -- why some instances exist in one lib and not the other, what people in cats use in place of IO / Task, and so on.
2016-09-09 16:48:29	OlegYch_	[16:46:14] dylukes: for the reference https://gist.github.com/OlegYch/fa21fb83a4aae637022fe17f29c50489
2016-09-09 16:48:29	dylukes	[16:46:37] "disagreements over the code of conduct, which scalaz will not adopt"
2016-09-09 16:48:29	dylukes	[16:46:38] such as?
2016-09-09 16:48:29	dylukes	[16:46:50] That sounds like political nonsense.
2016-09-09 16:48:29	OlegYch_	[16:47:22] aupiff: i believe there is a plan to use an external package for IO / Task stuff in cats
2016-09-09 16:48:29	OlegYch_	[16:47:39] as for Future, dunno, i thought it was there
2016-09-09 16:48:29	aupiff	[16:48:01] nope.
2016-09-09 16:48:29	aupiff	[16:48:27] yeah, it looks like fs2 has a task /io type that cats users can use
2016-09-09 16:48:29	***	Playback Complete.
2016-09-09 16:48:43	--	Channel created on Sun, 28 Jan 2007 17:58:41
2016-09-09 16:48:47	<--	nomicflux (~nomicflux@cpe-174-103-183-220.wi.res.rr.com) has quit (Quit: nomicflux)
2016-09-09 16:48:55	aupiff	but tpolecat uses something called IOLite in doobie
2016-09-09 16:49:02	dylukes	What exactly happened OlegYch_? "there was an inexcusable attempt to take over scalaz and kick out its founder"
2016-09-09 16:49:07	dylukes	How does that even happen?
2016-09-09 16:49:38	-->	Lucas[Keios] (~enigma@31-178-55-10.dynamic.chello.pl) has joined #scala
2016-09-09 16:49:55	OlegYch_	i'm afraid no one would answer that conclusively
2016-09-09 16:50:36	dylukes	https://gist.github.com/ekmett/81a507f50d857345691c#file-demands-txt-L17
2016-09-09 16:50:46	dylukes	If this is real, and I'd generally trust Edward, that's just awful.
2016-09-09 16:51:03	-->	Arrgh (~alex@70.36.63.98) has joined #scala
2016-09-09 16:51:31	<--	TheVoid (~void@unaffiliated/thevoid) has quit (Remote host closed the connection)
2016-09-09 16:51:57	-->	uglyfigurine (~uglyfigur@131.228.197.54) has joined #scala
2016-09-09 16:52:35	OlegYch_	aupiff: there is a bit of turmoil about who uses what, my only hope is that it settles sooner than later
2016-09-09 16:54:15	aupiff	dylukes: looks real to me.
2016-09-09 16:55:05	aupiff	wait, let me see if I understand correctly, larsrh90@gmail.com is kmett?
2016-09-09 16:55:15	nullremains	woah, is that Kmett or Lars?
2016-09-09 16:55:37	aupiff	dylukes: how did you find that?
2016-09-09 16:55:52	<--	Sasazuka__ (~Sasazuka@unaffiliated/sasazuka) has quit (Ping timeout: 250 seconds)
2016-09-09 16:56:34	aupiff	kmett reposted that?
2016-09-09 16:56:55	nullremains	Yeah, would assume this is Lars' letter to Tony
2016-09-09 16:57:09	aupiff	interesting
2016-09-09 16:57:25	-->	Sasazuka (~Sasazuka@unaffiliated/sasazuka) has joined #scala
2016-09-09 16:57:54	aupiff	was kmett archiving that email for interested parties? did tony send it to him?
2016-09-09 16:58:14	-->	nafg (~naftoli@ool-3f8fe1de.dyn.optonline.net) has joined #scala
2016-09-09 16:59:30	-->	mberndt (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has joined #scala
2016-09-09 17:00:31	dylukes	aupiff google
2016-09-09 17:00:36	-->	red1ynx (~dzmitry@178.124.163.67) has joined #scala
2016-09-09 17:00:56	OlegYch_	you could ask dibblego himself
2016-09-09 17:05:57	<--	nafg (~naftoli@ool-3f8fe1de.dyn.optonline.net) has quit (Ping timeout: 244 seconds)
2016-09-09 17:07:16	<--	Lucas[Keios] (~enigma@31-178-55-10.dynamic.chello.pl) has quit (Quit: Leaving.)
2016-09-09 17:19:02	-->	nafg (~naftoli@ool-3f8fe1de.dyn.optonline.net) has joined #scala
2016-09-09 17:20:06	<--	cotalinux (~cota@86.124.188.234) has quit (Read error: Connection reset by peer)
2016-09-09 17:20:51	-->	pfurla (~textual@65.206.95.146) has joined #scala
2016-09-09 17:21:32	-->	madalex (~madalex@unaffiliated/madalex) has joined #scala
2016-09-09 17:23:38	-->	ghounds (~gabriel@cpe-67-245-240-199.nyc.res.rr.com) has joined #scala
2016-09-09 17:24:02	<--	circ-user-F6zEO (~circuser-@82.131.32.35.cable.starman.ee) has quit (Ping timeout: 244 seconds)
2016-09-09 17:24:37	<--	uglyfigurine (~uglyfigur@131.228.197.54) has quit (Remote host closed the connection)
2016-09-09 17:24:44	-->	mdiarra (~mdiarra@LFbn-1-3481-56.w90-127.abo.wanadoo.fr) has joined #scala
2016-09-09 17:25:03	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 240 seconds)
2016-09-09 17:25:08	<--	allengeorge (~textual@208.185.185.131) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-09 17:25:37	<--	mszczygiel (~mszczygie@dynamic-78-10-106-188.ssp.dialog.net.pl) has quit (Quit: Lost terminal)
2016-09-09 17:27:09	<--	mberndt (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has quit (Ping timeout: 260 seconds)
2016-09-09 17:27:42	-->	uglyfigurine (~uglyfigur@131.228.197.54) has joined #scala
2016-09-09 17:31:52	-->	marr (~ccc@87-205-202-30.adsl.inetia.pl) has joined #scala
2016-09-09 17:33:15	<--	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has quit (Ping timeout: 276 seconds)
2016-09-09 17:33:34	<--	ghounds (~gabriel@cpe-67-245-240-199.nyc.res.rr.com) has quit (Ping timeout: 260 seconds)
2016-09-09 17:33:57	-->	ghounds (~gabriel@cpe-67-245-240-199.nyc.res.rr.com) has joined #scala
2016-09-09 17:34:21	-->	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has joined #scala
2016-09-09 17:35:21	<--	veegee (~textual@107.152.98.170) has quit (Ping timeout: 250 seconds)
2016-09-09 17:36:11	<--	ChristopherDaven (~Christoph@216.146.171.86) has quit (Remote host closed the connection)
2016-09-09 17:36:25	-->	allengeorge (~textual@208.185.185.131) has joined #scala
2016-09-09 17:37:12	-->	mberndt (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has joined #scala
2016-09-09 17:38:15	<--	vsuthichai (~vsuthicha@64.80.5.145) has quit (Ping timeout: 264 seconds)
2016-09-09 17:39:15	<--	Ir1sh (~Ir1sh@12.228.115.34) has quit
2016-09-09 17:41:41	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-09 17:41:47	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-09 17:42:38	<--	mberndt (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has quit (Ping timeout: 244 seconds)
2016-09-09 17:43:43	-->	mberndt (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has joined #scala
2016-09-09 17:45:49	<--	fekir (~fekir@2a02:8109:8c00:1db8:225:d3ff:fec3:c8dc) has quit (Ping timeout: 260 seconds)
2016-09-09 17:46:54	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 276 seconds)
2016-09-09 17:48:34	<--	allengeorge (~textual@208.185.185.131) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-09 17:48:47	<--	tag (~tag@fw03.sfoffice.quantcast.com) has quit (Ping timeout: 250 seconds)
2016-09-09 17:49:15	<--	ghounds (~gabriel@cpe-67-245-240-199.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-09 17:49:34	-->	ghounds (~gabriel@cpe-67-245-240-199.nyc.res.rr.com) has joined #scala
2016-09-09 17:50:03	<--	ghounds (~gabriel@cpe-67-245-240-199.nyc.res.rr.com) has quit (Client Quit)
2016-09-09 17:50:04	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Remote host closed the connection)
2016-09-09 17:50:35	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-09 17:51:24	<--	Blkt (~Blkt@2a01:4f8:200:2425::adda) has quit (Read error: Connection reset by peer)
2016-09-09 17:51:27	<--	mberndt (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has quit (Ping timeout: 276 seconds)
2016-09-09 17:51:40	-->	Blkt (~Blkt@2a01:4f8:200:2425::adda) has joined #scala
2016-09-09 17:52:50	<--	Blkt (~Blkt@2a01:4f8:200:2425::adda) has quit (Read error: Connection reset by peer)
2016-09-09 17:52:58	<--	Milyardo (~Adium@pool-71-246-242-33.washdc.fios.verizon.net) has quit (Quit: Leaving.)
2016-09-09 17:53:04	-->	Blkt (~Blkt@2a01:4f8:200:2425::adda) has joined #scala
2016-09-09 17:54:04	<--	Blkt (~Blkt@2a01:4f8:200:2425::adda) has quit (Read error: Connection reset by peer)
2016-09-09 17:54:19	-->	Blkt (~Blkt@2a01:4f8:200:2425::adda) has joined #scala
2016-09-09 17:57:16	-->	mberndt (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has joined #scala
2016-09-09 17:57:21	<--	dylukes (~dylukes@static-108-32-49-11.pitbpa.fios.verizon.net) has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
2016-09-09 17:58:30	-->	clarkkampfe (~no6@205-178-104-116.c3-0.stk-ubr1.chi-stk.il.cable.rcn.com) has joined #scala
2016-09-09 18:00:42	-->	jfg9 (~josh@host-78-146-239-20.as13285.net) has joined #scala
2016-09-09 18:02:30	<--	adolf_stalin (~adolf_sta@205.157.178.143) has quit (Quit: Leaving...)
2016-09-09 18:02:59	<--	mizu_no_oto (~textual@c-50-177-170-9.hsd1.ma.comcast.net) has quit (Quit: Computer has gone to sleep.)
2016-09-09 18:03:14	<--	griffindy (~textual@192.133.79.17) has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
2016-09-09 18:03:17	-->	tag (~tag@fw03.sfoffice.quantcast.com) has joined #scala
2016-09-09 18:03:49	<--	mberndt (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has quit (Ping timeout: 252 seconds)
2016-09-09 18:08:50	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-09 18:10:05	-->	vili_ (~nick@2605:a000:ffc0:d8:5c8e:e37d:ec73:4299) has joined #scala
2016-09-09 18:10:24	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-09 18:10:40	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-09 18:11:59	-->	zmack (~zmack@86.127.155.155) has joined #scala
2016-09-09 18:11:59	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-09 18:12:06	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-09 18:12:39	-->	vsuthichai (~vsuthicha@64.80.5.145) has joined #scala
2016-09-09 18:14:03	<--	firstdayonthejob (~firstdayo@cpc99346-croy26-2-0-cust153.19-2.cable.virginm.net) has quit (Ping timeout: 240 seconds)
2016-09-09 18:14:41	<--	randomstatistic (~randomsta@205.207.255.196) has quit
2016-09-09 18:15:11	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 244 seconds)
2016-09-09 18:16:24	-->	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-09 18:16:24	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-09 18:18:19	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-09 18:18:19	<--	emirypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-09 18:22:07	<--	vsuthichai (~vsuthicha@64.80.5.145) has quit (Ping timeout: 265 seconds)
2016-09-09 18:22:12	<--	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has quit (Read error: Connection reset by peer)
2016-09-09 18:23:09	-->	emilypi (~emilypi@cpe-74-73-51-56.nyc.res.rr.com) has joined #scala
2016-09-09 18:25:15	<--	mdiarra (~mdiarra@LFbn-1-3481-56.w90-127.abo.wanadoo.fr) has quit (Ping timeout: 276 seconds)
2016-09-09 18:25:48	<--	madalex (~madalex@unaffiliated/madalex) has quit (Quit: Textual IRC Client: www.textualapp.com)
2016-09-09 18:25:59	<--	nafg (~naftoli@ool-3f8fe1de.dyn.optonline.net) has quit (Ping timeout: 265 seconds)
2016-09-09 18:26:26	-->	red1ynx_ (~dzmitry@178.124.163.67) has joined #scala
2016-09-09 18:27:28	<--	red1ynx (~dzmitry@178.124.163.67) has quit (Ping timeout: 252 seconds)
2016-09-09 18:27:52	<--	uglyfigurine (~uglyfigur@131.228.197.54) has quit (Remote host closed the connection)
2016-09-09 18:30:11	-->	vsuthichai (~vsuthicha@64.80.5.145) has joined #scala
2016-09-09 18:31:09	-->	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has joined #scala
2016-09-09 18:32:56	-->	randomstatistic (~randomsta@205.207.255.196) has joined #scala
2016-09-09 18:35:29	<--	aupiff (~roy@cpe-74-66-4-29.nyc.res.rr.com) has quit (Ping timeout: 244 seconds)
2016-09-09 18:35:38	-->	mberndt (~mberndt@dslb-188-108-225-240.188.108.pools.vodafone-ip.de) has joined #scala
2016-09-09 18:36:01	<--	crobbins (~crobbins@96.8.88.13) has quit (Remote host closed the connection)
2016-09-09 18:37:09	<--	Profpatsch (u3rfX8fSud@caelum.uberspace.de) has left #scala ("WeeChat 0.4.3")
2016-09-09 18:38:15	<--	jfg9 (~josh@host-78-146-239-20.as13285.net) has quit (Quit: jfg9)
2016-09-09 18:38:28	<--	vsuthichai (~vsuthicha@64.80.5.145) has quit (Ping timeout: 252 seconds)
2016-09-09 18:40:18	<--	sepp2k (~sepp2k@pD9521E98.dip0.t-ipconnect.de) has quit (Quit: Leaving.)
